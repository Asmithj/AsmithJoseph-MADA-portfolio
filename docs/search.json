[
  {
    "objectID": "synthetic-data-exercise/synthetic-data-exercise.html",
    "href": "synthetic-data-exercise/synthetic-data-exercise.html",
    "title": "Synthetic Data Exercise",
    "section": "",
    "text": "Introduction of the TBpregnancy Synthetic Dataset\nThe TB pregnancy dataset is a synthetic dataset designed to study the pharmacokinetic (PK) properties of antiretroviral (ARV) and anti-tuberculosis (TB) drugs in pregnant and postpartum women. The dataset was generated to model real-world drug metabolism patterns and assess how pregnancy impacts drug clearance, exposure (AUC), and birth outcomes. The data simulates clinical trial observations and incorporates known physiological changes during pregnancy that affect drug absorption, distribution, metabolism, and elimination.\nAdditionally, the dataset examines how pregnancy affects drug metabolism through demographic, pharmacokinetic, and clinical variables. It includes age, BMI, trimester (1st, 2nd, 3rd, postpartum), and drug type (ARV or anti-TB), along with Cmax, AUC, clearance (CL), half-life (T½), and protein binding. Clinical outcomes include CD4 count (for ARV users), viral load, ALT levels, and birth outcomes (normal vs. adverse). Key research questions explore pregnancy’s effect on AUC and clearance, differences in ARV vs. anti-TB metabolism, factors influencing adverse birth outcomes, and inter-individual variability in drug metabolism.\n\n\nGenerating Synthetic Data of pharmacokinetic (PK) data for Antiretroviral (ARV) and Anti-Tuberculosis (TB) drugs during pregnancy and postpartum\n\n# Load required libraries\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.4.3\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n# Set seed for reproducibility\nset.seed(123)\n\n# Number of participants\nn &lt;- 300  \n\n# Generate participant IDs\nparticipant_id &lt;- 1:n  \n\n# Pregnancy periods (1st, 2nd, 3rd trimester, Postpartum)\ntrimester &lt;- sample(c(\"1st Trimester\", \"2nd Trimester\", \"3rd Trimester\", \"Postpartum\"), \n                    size = n, replace = TRUE, prob = c(0.25, 0.25, 0.25, 0.25))\n\n# Drug Type (ARV or Anti-TB)\ndrug_type &lt;- sample(c(\"ARV\", \"Anti-TB\"), size = n, replace = TRUE)\n\n# Generate demographic data\nage &lt;- sample(18:45, size = n, replace = TRUE)  # Age between 18-45 years\nbmi &lt;- ifelse(trimester == \"Postpartum\", \n              rnorm(n, mean = 26, sd = 3), \n              rnorm(n, mean = 30, sd = 3))  # Higher BMI in pregnancy\n\n# Gestational Age (weeks) for pregnancy cases\ngestational_age &lt;- ifelse(trimester == \"Postpartum\", NA, sample(12:40, size = n, replace = TRUE))\n\n# Dose (mg), adjusted for pregnancy\ndose &lt;- ifelse(trimester == \"Postpartum\", \n               rnorm(n, mean = 600, sd = 50), \n               rnorm(n, mean = 650, sd = 50))  # Slightly increased dose in pregnancy\n\n# Generate pharmacokinetic data\ncmax &lt;- ifelse(trimester == \"Postpartum\", \n               rnorm(n, mean = 5, sd = 1), \n               rnorm(n, mean = 4, sd = 1))  # Lower in pregnancy\n\nauc &lt;- ifelse(trimester == \"Postpartum\", \n              rnorm(n, mean = 45, sd = 5), \n              rnorm(n, mean = 35, sd = 5))  # Reduced drug exposure in pregnancy\n\nhalf_life &lt;- ifelse(trimester == \"Postpartum\", \n                    rnorm(n, mean = 8, sd = 1), \n                    rnorm(n, mean = 7, sd = 1))  # Shorter in pregnancy\n\nclearance &lt;- ifelse(trimester == \"Postpartum\", \n                    rnorm(n, mean = 10, sd = 2), \n                    rnorm(n, mean = 12, sd = 2))  # Higher clearance in pregnancy\n\n# Protein Binding (%)\nprotein_binding &lt;- rnorm(n, mean = 85, sd = 5)  # Between 80-90%\n\n# CD4 Count (HIV patients, ARV only)\ncd4_count &lt;- ifelse(drug_type == \"ARV\", \n                    ifelse(trimester == \"Postpartum\", rnorm(n, mean = 500, sd = 100), rnorm(n, mean = 400, sd = 100)), \n                    NA)  # Only for ARV users\n\n# Viral Load (log10 copies/mL) - inverse of CD4 count\nviral_load &lt;- ifelse(drug_type == \"ARV\", \n                     5 - (cd4_count / 200), \n                     NA)  # Only for ARV users\n\n# Liver Enzyme Levels (ALT, IU/L) - indicator of liver function\nalt_levels &lt;- rnorm(n, mean = 25, sd = 10)  # Between 15-35 IU/L\n\n# Birth Outcome (0 = Normal, 1 = Adverse) influenced by drug exposure\nprob_adverse_outcome &lt;- 1 / (1 + exp(-(-1 + 0.05 * clearance - 0.1 * auc + 0.01 * alt_levels)))\nbirth_outcome &lt;- rbinom(n, size = 1, prob = prob_adverse_outcome)\n\n# Create the dataset\nTBpregnancy &lt;- data.frame(ParticipantID = participant_id, \n                 Age = age,\n                 BMI = bmi,\n                 GestationalAge = gestational_age,\n                 Trimester = trimester, \n                 DrugType = drug_type, \n                 Dose_mg = dose,\n                 Cmax = cmax, \n                 AUC = auc, \n                 HalfLife = half_life, \n                 Clearance = clearance, \n                 ProteinBinding = protein_binding,\n                 CD4Count = cd4_count,\n                 ViralLoad = viral_load,\n                 ALT_Levels = alt_levels,\n                 BirthOutcome = birth_outcome)\n\n# View first few rows\nhead(TBpregnancy)\n\n  ParticipantID Age      BMI GestationalAge     Trimester DrugType  Dose_mg\n1             1  45 30.39880             18 3rd Trimester  Anti-TB 690.5561\n2             2  33 28.22766             25 1st Trimester  Anti-TB 731.4292\n3             3  26 29.43845             21 3rd Trimester      ARV 641.5331\n4             4  28 35.93455             35 1st Trimester  Anti-TB 692.9263\n5             5  28 25.94956             27 1st Trimester      ARV 627.9202\n6             6  36 29.20644             36 2nd Trimester      ARV 704.2929\n      Cmax      AUC HalfLife Clearance ProteinBinding CD4Count ViralLoad\n1 5.051530 31.87629 5.439194  9.920776       78.50281       NA        NA\n2 3.911380 26.52678 6.122411 10.812195       75.52868       NA        NA\n3 5.561617 41.72005 5.674557  8.264870       84.76765 397.1953  3.014024\n4 4.966893 28.51780 6.877079 13.380295       84.80144       NA        NA\n5 3.949942 30.39506 6.690450 13.424845       82.75101 373.9001  3.130500\n6 2.427745 37.21709 7.535453 13.231151       84.61910 499.8509  2.500746\n  ALT_Levels BirthOutcome\n1   14.62036            0\n2   21.40848            0\n3   14.65765            0\n4   26.06639            0\n5   41.08755            0\n6   24.63504            0\n\n\n\n\nExploratory of the Dataset\n\nsummary(TBpregnancy)\n\n ParticipantID         Age             BMI        GestationalAge \n Min.   :  1.00   Min.   :18.00   Min.   :19.37   Min.   :12.00  \n 1st Qu.: 75.75   1st Qu.:24.00   1st Qu.:26.53   1st Qu.:19.25  \n Median :150.50   Median :30.00   Median :28.89   Median :27.50  \n Mean   :150.50   Mean   :31.04   Mean   :28.92   Mean   :26.89  \n 3rd Qu.:225.25   3rd Qu.:39.00   3rd Qu.:31.31   3rd Qu.:35.00  \n Max.   :300.00   Max.   :45.00   Max.   :37.23   Max.   :40.00  \n                                                  NA's   :74     \n  Trimester           DrugType            Dose_mg           Cmax      \n Length:300         Length:300         Min.   :507.8   Min.   :1.175  \n Class :character   Class :character   1st Qu.:610.3   1st Qu.:3.596  \n Mode  :character   Mode  :character   Median :639.9   Median :4.223  \n                                       Mean   :639.2   Mean   :4.235  \n                                       3rd Qu.:669.6   3rd Qu.:4.967  \n                                       Max.   :763.4   Max.   :7.852  \n                                                                      \n      AUC           HalfLife        Clearance      ProteinBinding \n Min.   :24.02   Min.   : 3.866   Min.   : 5.126   Min.   :66.32  \n 1st Qu.:33.41   1st Qu.: 6.421   1st Qu.: 9.881   1st Qu.:81.81  \n Median :37.16   Median : 7.137   Median :11.280   Median :85.17  \n Mean   :37.80   Mean   : 7.186   Mean   :11.377   Mean   :84.78  \n 3rd Qu.:42.52   3rd Qu.: 7.984   3rd Qu.:12.951   3rd Qu.:87.74  \n Max.   :54.96   Max.   :10.334   Max.   :17.451   Max.   :99.56  \n                                                                  \n    CD4Count        ViralLoad       ALT_Levels      BirthOutcome \n Min.   : 92.31   Min.   :1.227   Min.   :-3.729   Min.   :0.00  \n 1st Qu.:364.42   1st Qu.:2.488   1st Qu.:18.851   1st Qu.:0.00  \n Median :429.95   Median :2.850   Median :25.494   Median :0.00  \n Mean   :429.62   Mean   :2.852   Mean   :25.157   Mean   :0.03  \n 3rd Qu.:502.43   3rd Qu.:3.178   3rd Qu.:32.009   3rd Qu.:0.00  \n Max.   :754.55   Max.   :4.538   Max.   :48.426   Max.   :1.00  \n NA's   :150      NA's   :150                                    \n\nstr(TBpregnancy)\n\n'data.frame':   300 obs. of  16 variables:\n $ ParticipantID : int  1 2 3 4 5 6 7 8 9 10 ...\n $ Age           : int  45 33 26 28 28 36 27 40 19 42 ...\n $ BMI           : num  30.4 28.2 29.4 35.9 25.9 ...\n $ GestationalAge: int  18 25 21 35 27 36 NA 33 NA 22 ...\n $ Trimester     : chr  \"3rd Trimester\" \"1st Trimester\" \"3rd Trimester\" \"1st Trimester\" ...\n $ DrugType      : chr  \"Anti-TB\" \"Anti-TB\" \"ARV\" \"Anti-TB\" ...\n $ Dose_mg       : num  691 731 642 693 628 ...\n $ Cmax          : num  5.05 3.91 5.56 4.97 3.95 ...\n $ AUC           : num  31.9 26.5 41.7 28.5 30.4 ...\n $ HalfLife      : num  5.44 6.12 5.67 6.88 6.69 ...\n $ Clearance     : num  9.92 10.81 8.26 13.38 13.42 ...\n $ ProteinBinding: num  78.5 75.5 84.8 84.8 82.8 ...\n $ CD4Count      : num  NA NA 397 NA 374 ...\n $ ViralLoad     : num  NA NA 3.01 NA 3.13 ...\n $ ALT_Levels    : num  14.6 21.4 14.7 26.1 41.1 ...\n $ BirthOutcome  : int  0 0 0 0 0 0 0 0 0 0 ...\n\n\n\n\nVisualizations of the dataset\n\n# Boxplot of AUC (Drug Exposure) across pregnancy stages\nggplot(TBpregnancy, aes(x = Trimester, y = AUC, fill = Trimester)) +\n  geom_boxplot() +\n  theme_minimal() +\n  ggtitle(\"Drug Exposure (AUC) Across Pregnancy and Postpartum\")\n\n\n\n\n\n\n\n# Scatter plot: Clearance vs. AUC\nggplot(TBpregnancy, aes(x = Clearance, y = AUC, color = Trimester)) +\n  geom_point() +\n  theme_minimal() +\n  ggtitle(\"Clearance vs. Drug Exposure (AUC)\")\n\n\n\n\n\n\n\n# Birth Outcome Distribution\nggplot(TBpregnancy, aes(x = factor(BirthOutcome), fill = factor(BirthOutcome))) +\n  geom_bar() +\n  theme_minimal() +\n  labs(x = \"Birth Outcome (0 = Normal, 1 = Adverse)\", y = \"Count\", title = \"Distribution of Birth Outcomes\")\n\n\n\n\n\n\n\n\n\n\nFitting Regression Models\nI want to explore this question: Does Pregnancy Affect Drug Exposure (AUC)?\n\nlm_model &lt;- lm(AUC ~ Trimester + DrugType + BMI, data = TBpregnancy)\nsummary(lm_model)  # Expect AUC to be lower in pregnancy\n\n\nCall:\nlm(formula = AUC ~ Trimester + DrugType + BMI, data = TBpregnancy)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-11.2311  -2.9273  -0.4594   3.0240  10.0642 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)            36.78303    2.59611  14.169   &lt;2e-16 ***\nTrimester2nd Trimester  1.39998    0.74434   1.881    0.061 .  \nTrimester3rd Trimester  0.34391    0.72871   0.472    0.637    \nTrimesterPostpartum    10.84955    0.80261  13.518   &lt;2e-16 ***\nDrugTypeARV            -0.81245    0.52043  -1.561    0.120    \nBMI                    -0.05828    0.08543  -0.682    0.496    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 4.465 on 294 degrees of freedom\nMultiple R-squared:  0.5152,    Adjusted R-squared:  0.507 \nF-statistic: 62.49 on 5 and 294 DF,  p-value: &lt; 2.2e-16\n\n\nInterpretation The linear regression model examines the effect of trimester, drug type, and BMI on AUC (drug exposure). - The intercept (36.78, p &lt; 0.001) represents the estimated AUC in the first trimester for anti-TB drugs, assuming BMI is zero. - Postpartum significantly increases AUC by 10.85 units (p &lt; 0.001), indicating higher drug exposure after pregnancy. - The second trimester shows a marginally significant increase (1.40, p = 0.061), while the third trimester has no meaningful effect (p = 0.637). - ARV drugs tend to reduce AUC (-0.81), but this effect is not significant (p = 0.120). BMI has a negligible effect on AUC (p = 0.496).\nThe model explains 51.5% of the variance in AUC (R² = 0.515), and the overall model is highly significant (p &lt; 0.001), confirming that trimester is the primary driver of AUC changes.\n\n\nFitting Logistic Regression to Predict Birth Outcomes\n\nglm_model &lt;- glm(BirthOutcome ~ AUC + Clearance + ALT_Levels + Trimester, data = TBpregnancy, family = binomial)\nsummary(glm_model)  # Expect higher clearance & ALT levels to increase risk of adverse birth outcomes\n\n\nCall:\nglm(formula = BirthOutcome ~ AUC + Clearance + ALT_Levels + Trimester, \n    family = binomial, data = TBpregnancy)\n\nCoefficients:\n                         Estimate Std. Error z value Pr(&gt;|z|)  \n(Intercept)               3.82120    3.78056   1.011   0.3121  \nAUC                      -0.20101    0.08760  -2.295   0.0218 *\nClearance                 0.09208    0.17360   0.530   0.5958  \nALT_Levels               -0.03880    0.03740  -1.037   0.2995  \nTrimester2nd Trimester   -0.20570    0.80006  -0.257   0.7971  \nTrimester3rd Trimester   -1.91442    1.13286  -1.690   0.0910 .\nTrimesterPostpartum     -15.43338 1959.80257  -0.008   0.9937  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 80.845  on 299  degrees of freedom\nResidual deviance: 63.949  on 293  degrees of freedom\nAIC: 77.949\n\nNumber of Fisher Scoring iterations: 19\n\n\nInterpretattion: This logistic regression model assesses the relationship between AUC (drug exposure), Clearance, ALT levels, and Trimester on the probability of adverse birth outcomes. - The intercept (3.82, p = 0.312) suggests the baseline log-odds of an adverse birth outcome when all predictors are at their reference levels. - Higher AUC significantly reduces the risk of adverse birth outcomes (-0.201, p = 0.0218), indicating that increased drug exposure is protective. - Clearance (0.092, p = 0.5958) and ALT levels (-0.0388, p = 0.2995) are not significant predictors, suggesting that drug metabolism and liver function have limited impact in this model. - The third trimester shows a marginally lower risk (-1.91, p = 0.091), while postpartum has an extreme coefficient (-15.43), likely due to data imbalance.\nThe model improves prediction compared to the null model (lower residual deviance: 63.95 vs. null deviance: 80.85), and the overall fit is reasonable (AIC = 77.95), but additional covariates or interaction terms may refine predictions.\n\n\nLinear Regression: Predict Drug Exposure (AUC)\n\n# Linear Model: AUC as the dependent variable\nlm_auc &lt;- lm(AUC ~ Trimester + BMI + DrugType + Clearance + ProteinBinding, data = TBpregnancy)\nsummary(lm_auc)  # Expect Trimester and Clearance to be significant\n\n\nCall:\nlm(formula = AUC ~ Trimester + BMI + DrugType + Clearance + ProteinBinding, \n    data = TBpregnancy)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-10.8389  -2.9398  -0.3856   3.1062  10.0087 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)            44.67683    5.55159   8.048 2.14e-14 ***\nTrimester2nd Trimester  1.40815    0.74509   1.890   0.0598 .  \nTrimester3rd Trimester  0.32169    0.72716   0.442   0.6585    \nTrimesterPostpartum    10.46530    0.85853  12.190  &lt; 2e-16 ***\nBMI                    -0.06334    0.08530  -0.743   0.4583    \nDrugTypeARV            -0.84857    0.52081  -1.629   0.1043    \nClearance              -0.16896    0.12772  -1.323   0.1869    \nProteinBinding         -0.06733    0.05426  -1.241   0.2157    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 4.454 on 292 degrees of freedom\nMultiple R-squared:  0.5207,    Adjusted R-squared:  0.5092 \nF-statistic: 45.32 on 7 and 292 DF,  p-value: &lt; 2.2e-16\n\n\nInterpretation This linear regression model examines the effect of Trimester, BMI, Drug Type, Clearance, and Protein Binding on AUC (drug exposure). - The intercept (44.68, p &lt; 0.001) represents the baseline AUC when all categorical variables are at their reference levels. - Postpartum is significantly associated with a 10.47-unit increase in AUC (p &lt; 0.001), confirming that drug exposure is higher after pregnancy. - The second trimester shows a marginally significant increase (1.41, p = 0.0598), while the third trimester has no significant effect (p = 0.6585). - Drug type (ARV vs. Anti-TB) slightly reduces AUC (-0.85, p = 0.1043), but the effect is not statistically significant. BMI (-0.063, p = 0.4583), Clearance (-0.168, p = 0.1869), and Protein Binding (-0.067, p = 0.2157) do not significantly influence AUC.\nThe model explains 52.1% of the variance in AUC (R² = 0.5207), indicating a moderate fit, and the overall model is highly significant (p &lt; 0.001), confirming that trimester remains the strongest predictor of AUC changes.\n\n\n2 Logistic Regression to Predict Adverse Birth Outcome\n\n# Logistic Regression: Predicting BirthOutcome\nglm_birth &lt;- glm(BirthOutcome ~ AUC + Clearance + ALT_Levels + Trimester + DrugType, \n                 data = TBpregnancy, family = binomial)\nsummary(glm_birth)  # Expect Clearance & ALT levels to increase risk\n\n\nCall:\nglm(formula = BirthOutcome ~ AUC + Clearance + ALT_Levels + Trimester + \n    DrugType, family = binomial, data = TBpregnancy)\n\nCoefficients:\n                         Estimate Std. Error z value Pr(&gt;|z|)  \n(Intercept)               4.29376    4.04765   1.061   0.2888  \nAUC                      -0.20583    0.08914  -2.309   0.0209 *\nClearance                 0.07990    0.17648   0.453   0.6507  \nALT_Levels               -0.04112    0.03841  -1.071   0.2844  \nTrimester2nd Trimester   -0.20060    0.79934  -0.251   0.8018  \nTrimester3rd Trimester   -1.88516    1.13819  -1.656   0.0977 .\nTrimesterPostpartum     -15.38573 1957.06453  -0.008   0.9937  \nDrugTypeARV              -0.26425    0.75192  -0.351   0.7253  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 80.845  on 299  degrees of freedom\nResidual deviance: 63.824  on 292  degrees of freedom\nAIC: 79.824\n\nNumber of Fisher Scoring iterations: 19\n\n\nInterpretation This logistic regression model evaluates the impact of AUC, Clearance, ALT Levels, Trimester, and Drug Type on the probability of adverse birth outcomes. - The intercept (4.29, p = 0.2888) represents the baseline log-odds of an adverse birth outcome when all predictors are at their reference levels. - AUC is the only significant predictor (-0.2058, p = 0.0209), indicating that higher drug exposure significantly reduces the risk of adverse birth outcomes. - Clearance (0.0799, p = 0.6507) and ALT levels (-0.0411, p = 0.2844) do not significantly influence birth outcomes. - Trimester has no significant impact, although the third trimester shows a marginally protective effect (-1.88, p = 0.0977). - The postpartum coefficient (-15.39) is extreme and non-significant (p = 0.9937), likely due to data imbalance. - Drug type (ARV vs. Anti-TB) does not significantly influence birth outcomes (-0.2642, p = 0.7253).\nThe model improves prediction compared to the null model (residual deviance: 63.82 vs. null deviance: 80.85), and AUC remains the strongest predictor of birth outcomes. However, the AIC (79.82) suggests that additional predictors may improve the model’s fit.\n\n\nRandom Forest of Non-Linear Model for Birth Outcomes\n\n# Load required libraries\nlibrary(randomForest)\n\nWarning: package 'randomForest' was built under R version 4.4.2\n\n\nrandomForest 4.7-1.2\n\n\nType rfNews() to see new features/changes/bug fixes.\n\n\n\nAttaching package: 'randomForest'\n\n\nThe following object is masked from 'package:dplyr':\n\n    combine\n\n\nThe following object is masked from 'package:ggplot2':\n\n    margin\n\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Convert categorical variables (ensuring classification mode)\nTBpregnancy$Trimester &lt;- as.factor(TBpregnancy$Trimester)\nTBpregnancy$DrugType &lt;- as.factor(TBpregnancy$DrugType)\nTBpregnancy$BirthOutcome &lt;- as.factor(TBpregnancy$BirthOutcome)  # Ensuring classification mode\n\n# Train a Random Forest classification model\nset.seed(123)\nrf_model &lt;- randomForest(BirthOutcome ~ AUC + Clearance + ALT_Levels + BMI + Age + ProteinBinding, \n                         data = TBpregnancy, ntree = 500, importance = TRUE)\n\n# Extract variable importance (correctly using \"MeanDecreaseGini\" for classification models)\nvar_imp &lt;- as.data.frame(importance(rf_model))  # Extract importance values\nvar_imp$Variable &lt;- rownames(var_imp)  # Add variable names\nvar_imp &lt;- var_imp %&gt;% arrange(desc(MeanDecreaseGini))  # Sort by importance\n\n# Create a color-coded variable importance plot\nggplot(var_imp, aes(x = reorder(Variable, MeanDecreaseGini), y = MeanDecreaseGini, fill = MeanDecreaseGini)) +\n  geom_bar(stat = \"identity\", width = 0.7, color = \"black\") +  # Adds border for clarity\n  coord_flip() +\n  scale_fill_gradient(low = \"#00BFC4\", high = \"#F8766D\") +  # Blue to red gradient (low to high importance)\n  theme_minimal() +\n  labs(title = \"Variable Importance in Predicting Birth Outcomes\",\n       x = \"Predictor Variables\", y = \"Mean Decrease in Gini\",\n       fill = \"Importance\") +\n  theme(text = element_text(size = 14),\n        plot.title = element_text(hjust = 0.5, face = \"bold\"),\n        legend.position = \"right\")\n\n\n\n\n\n\n\n\n\n\nSimulate Repeated Measures\n\n# Expand the dataset: Each participant has 3 time points\nset.seed(123)\nTBpregnancy_long &lt;- TBpregnancy %&gt;%\n  slice(rep(1:n(), each = 3)) %&gt;%  # Repeat each row 3 times\n  mutate(Timepoint = rep(1:3, times = n))  # Assign time points\n\n# Introduce slight variations in AUC and Clearance per timepoint\nTBpregnancy_long &lt;- TBpregnancy_long %&gt;%\n  mutate(AUC = AUC + rnorm(n() , mean = 0, sd = 2),  # Small variations\n         Clearance = Clearance + rnorm(n(), mean = 0, sd = 0.5))\n\n# Check the structure\nhead(TBpregnancy_long)\n\n  ParticipantID Age      BMI GestationalAge     Trimester DrugType  Dose_mg\n1             1  45 30.39880             18 3rd Trimester  Anti-TB 690.5561\n2             1  45 30.39880             18 3rd Trimester  Anti-TB 690.5561\n3             1  45 30.39880             18 3rd Trimester  Anti-TB 690.5561\n4             2  33 28.22766             25 1st Trimester  Anti-TB 731.4292\n5             2  33 28.22766             25 1st Trimester  Anti-TB 731.4292\n6             2  33 28.22766             25 1st Trimester  Anti-TB 731.4292\n     Cmax      AUC HalfLife Clearance ProteinBinding CD4Count ViralLoad\n1 5.05153 30.75534 5.439194  9.413719       78.50281       NA        NA\n2 5.05153 31.41594 5.439194  9.525120       78.50281       NA        NA\n3 5.05153 34.99371 5.439194 10.070573       78.50281       NA        NA\n4 3.91138 26.66780 6.122411 11.631721       75.52868       NA        NA\n5 3.91138 26.78536 6.122411 11.354504       75.52868       NA        NA\n6 3.91138 29.95691 6.122411 10.499911       75.52868       NA        NA\n  ALT_Levels BirthOutcome Timepoint\n1   14.62036            0         1\n2   14.62036            0         2\n3   14.62036            0         3\n4   21.40848            0         1\n5   21.40848            0         2\n6   21.40848            0         3\n\n\n\n\nMixed-Effects Model: Accounting for Individual Differences\n\nlibrary(lme4)\n\nWarning: package 'lme4' was built under R version 4.4.3\n\n\nLoading required package: Matrix\n\n\nWarning: package 'Matrix' was built under R version 4.4.3\n\n# Fit a mixed model for AUC with random intercept per Participant\nmixed_model &lt;- lmer(AUC ~ Trimester + Clearance + (1 | ParticipantID), data = TBpregnancy_long)\nsummary(mixed_model)\n\nLinear mixed model fit by REML ['lmerMod']\nFormula: AUC ~ Trimester + Clearance + (1 | ParticipantID)\n   Data: TBpregnancy_long\n\nREML criterion at convergence: 4610\n\nScaled residuals: \n     Min       1Q   Median       3Q      Max \n-2.60844 -0.57569 -0.00148  0.54177  2.90555 \n\nRandom effects:\n Groups        Name        Variance Std.Dev.\n ParticipantID (Intercept) 19.501   4.416   \n Residual                   3.923   1.981   \nNumber of obs: 900, groups:  ParticipantID, 300\n\nFixed effects:\n                       Estimate Std. Error t value\n(Intercept)            35.39729    1.33250  26.564\nTrimester2nd Trimester  1.49325    0.76096   1.962\nTrimester3rd Trimester  0.18794    0.73955   0.254\nTrimesterPostpartum    10.80113    0.79607  13.568\nClearance              -0.05564    0.10071  -0.553\n\nCorrelation of Fixed Effects:\n            (Intr) Trms2T Trms3T TrmstP\nTrmstr2ndTr -0.326                     \nTrmstr3rdTr -0.310  0.521              \nTrmstrPstpr -0.556  0.496  0.502       \nClearance   -0.914  0.040  0.013  0.306\n\n\nInterpretation of the last model This linear mixed model (LMM) examines the effect of Trimester and Clearance on AUC (drug exposure), while accounting for individual variability through random effects for ParticipantID. - The random intercept variance (19.501, SD = 4.416) indicates substantial differences in AUC between individuals, whereas residual variance (3.923, SD = 1.981) reflects within-individual fluctuations. - The postpartum period is significantly associated with a 10.80-unit increase in AUC (p &lt; 0.001), confirming that drug exposure rises after pregnancy. - The second trimester shows a marginally significant increase in AUC (+1.49, p ≈ 0.05), while the third trimester has no meaningful effect. Clearance (-0.056, p = 0.55) does not significantly influence AUC, suggesting that other metabolic factors may play a stronger role. - The large variation across participants highlights the need for individualized drug monitoring during pregnancy and postpartum.\n\n\nKey Results & Findings\n\nPregnancy significantly reduces drug exposure (AUC), with postpartum showing a strong rebound (+10.8, p &lt; 0.001), confirming higher drug levels after delivery.\nThe second trimester shows a marginal increase in AUC (p ≈ 0.05), while the third trimester has no meaningful effect.\nHigher AUC is protective against adverse birth outcomes (-0.2058, p = 0.0218), while drug clearance does not show a significant effect.\nA linear mixed model (LMM) revealed substantial inter-individual variability in drug metabolism (ParticipantID variance = 19.501), highlighting the need for personalized drug monitoring during pregnancy."
  },
  {
    "objectID": "starter-analysis-exercise/results/readme.html",
    "href": "starter-analysis-exercise/results/readme.html",
    "title": "Asmith Joseph Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains results produced by the code, such as figures and tables.\nDepending on the size and type of your project, you can either place it all in a single folder or create sub-folders. For instance you could create a folder for figures, another for tables. Or you could create a sub-folder for dataset 1, another for dataset 2. Or you could have a subfolder for exploratory analysis, another for final analysis. The options are endless, choose whatever makes sense for your project. For this template, there is just a a single folder, but having sub-folders is often a good idea."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "title": "Starter Analysis Exercise",
    "section": "",
    "text": "Write a summary of your project."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#general-background-information",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#general-background-information",
    "title": "Starter Analysis Exercise",
    "section": "2.1 General Background Information",
    "text": "2.1 General Background Information\nProvide enough background on your topic that others can understand the why and how of your analysis"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "title": "Starter Analysis Exercise",
    "section": "2.2 Description of data and data source",
    "text": "2.2 Description of data and data source\nDescribe what the data is, what it contains, where it is from, etc. Eventually this might be part of a methods section. The dataset comprises variables related to individuals’ physical characteristics, such as height, weight, gender, hair color, and calculated Body Mass Index (BMI) with its classification. Each variable is accompanied by a definition and a range of allowed values as per the codebook."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#questionshypotheses-to-be-addressed",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#questionshypotheses-to-be-addressed",
    "title": "Starter Analysis Exercise",
    "section": "2.3 Questions/Hypotheses to be addressed",
    "text": "2.3 Questions/Hypotheses to be addressed\nState the research questions you plan to answer with this analysis.\nTo cite other work (important everywhere, but likely happens first in introduction), make sure your references are in the bibtex file specified in the YAML header above (here dataanalysis_template_references.bib) and have the right bibtex key. Then you can include like this:\nExamples of reproducible research projects can for instance be found in (McKay, Ebell, Billings, et al., 2020; McKay, Ebell, Dale, Shen, & Handel, 2020)"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-aquisition",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-aquisition",
    "title": "Starter Analysis Exercise",
    "section": "3.1 Data aquisition",
    "text": "3.1 Data aquisition\nAs applicable, explain where and how you got the data. If you directly import the data from an online source, you can combine this section with the next."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-import-and-cleaning",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-import-and-cleaning",
    "title": "Starter Analysis Exercise",
    "section": "3.2 Data import and cleaning",
    "text": "3.2 Data import and cleaning\nWrite code that reads in the file and cleans it so it’s ready for analysis. Since this will be fairly long code for most datasets, it might be a good idea to have it in one or several R scripts. If that is the case, explain here briefly what kind of cleaning/processing you do, and provide more details and well documented code somewhere (e.g. as supplement in a paper). All materials, including files that contain code, should be commented well so everyone can follow along."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#statistical-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#statistical-analysis",
    "title": "Starter Analysis Exercise",
    "section": "3.3 Statistical analysis",
    "text": "3.3 Statistical analysis\nExplain anything related to your statistical analyses."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#exploratorydescriptive-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#exploratorydescriptive-analysis",
    "title": "Starter Analysis Exercise",
    "section": "4.1 Exploratory/Descriptive analysis",
    "text": "4.1 Exploratory/Descriptive analysis\nUse a combination of text/tables/figures to explore and describe your data. Show the most important descriptive results here. Additional ones should go in the supplement. Even more can be in the R and Quarto files that are part of your project.\nTable 1 shows a summary of the data.\nNote the loading of the data providing a relative path using the ../../ notation. (Two dots means a folder up). You never want to specify an absolute path like C:\\ahandel\\myproject\\results\\ because if you share this with someone, it won’t work for them since they don’t have that path. You can also use the here R package to create paths. See examples of that below. I recommend the here package, but I’m showing the other approach here just in case you encounter it.\n\n\n\n\nTable 1: Data summary table.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_type\nskim_variable\nn_missing\ncomplete_rate\nfactor.ordered\nfactor.n_unique\nfactor.top_counts\nnumeric.mean\nnumeric.sd\nnumeric.p0\nnumeric.p25\nnumeric.p50\nnumeric.p75\nnumeric.p100\nnumeric.hist\n\n\n\n\nfactor\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nnumeric\nHeight\n0\n1\nNA\nNA\nNA\n165.66667\n15.97655\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nnumeric\nWeight\n0\n1\nNA\nNA\nNA\n70.11111\n21.24526\n45\n55\n70\n80\n110\n▇▂▃▂▂"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#basic-statistical-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#basic-statistical-analysis",
    "title": "Starter Analysis Exercise",
    "section": "4.2 Basic statistical analysis",
    "text": "4.2 Basic statistical analysis\nTo get some further insight into your data, if reasonable you could compute simple statistics (e.g. simple models with 1 predictor) to look for associations between your outcome(s) and each individual predictor variable. Though note that unless you pre-specified the outcome and main exposure, any “p&lt;0.05 means statistical significance” interpretation is not valid.\nFigure 1 shows a scatterplot figure produced by one of the R scripts.\n\n\n\n\n\n\n\n\nFigure 1: Height and weight stratified by gender."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis",
    "title": "Starter Analysis Exercise",
    "section": "4.3 Full analysis",
    "text": "4.3 Full analysis\nUse one or several suitable statistical/machine learning methods to analyze your data and to produce meaningful figures, tables, etc. This might again be code that is best placed in one or several separate R scripts that need to be well documented. You want the code to produce figures and data ready for display as tables, and save those. Then you load them here.\nExample Table 2 shows a summary of a linear model fit.\n\n\n\n\nTable 2: Linear model fit table.\n\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n149.2726967\n23.3823360\n6.3839942\n0.0013962\n\n\nWeight\n0.2623972\n0.3512436\n0.7470519\n0.4886517\n\n\nGenderM\n-2.1244913\n15.5488953\n-0.1366329\n0.8966520\n\n\nGenderO\n-4.7644739\n19.0114155\n-0.2506112\n0.8120871"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#summary-and-interpretation",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#summary-and-interpretation",
    "title": "Starter Analysis Exercise",
    "section": "5.1 Summary and Interpretation",
    "text": "5.1 Summary and Interpretation\nSummarize what you did, what you found and what it means."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#strengths-and-limitations",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#strengths-and-limitations",
    "title": "Starter Analysis Exercise",
    "section": "5.2 Strengths and Limitations",
    "text": "5.2 Strengths and Limitations\nDiscuss what you perceive as strengths and limitations of your analysis."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#conclusions",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#conclusions",
    "title": "Starter Analysis Exercise",
    "section": "5.3 Conclusions",
    "text": "5.3 Conclusions\nWhat are the main take-home messages?\nInclude citations in your Rmd file using bibtex, the list of references will automatically be placed at the end\nThis paper (Leek & Peng, 2015) discusses types of analyses.\nThese papers (McKay, Ebell, Billings, et al., 2020; McKay, Ebell, Dale, et al., 2020) are good examples of papers published using a fully reproducible setup similar to the one shown in this template.\nNote that this cited reference will show up at the end of the document, the reference formatting is determined by the CSL file specified in the YAML header. Many more style files for almost any journal are available. You also specify the location of your bibtex reference file in the YAML. You can call your reference file anything you like, I just used the generic word references.bib but giving it a more descriptive name is probably better."
  },
  {
    "objectID": "starter-analysis-exercise/data/readme.html",
    "href": "starter-analysis-exercise/data/readme.html",
    "title": "Asmith Joseph Data Analysis Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all data at various stages.\nThis data is being loaded/manipulated/changed/saved with code from the code folders.\nYou should place the raw data in the raw_data folder and not edit it. Ever!\nIdeally, load the raw data into R and do all changes there with code, so everything is automatically reproducible and documented.\nSometimes, you need to edit the files in the format you got. For instance, Excel files are sometimes so poorly formatted that it’s close to impossible to read them into R, or the persons you got the data from used color to code some information, which of course won’t import into R. In those cases, you might have to make modifications in a software other than R. If you need to make edits in whatever format you got the data (e.g. Excel), make a copy and place those copies in a separate folder, AND ONLY EDIT THOSE COPIES. Also, write down somewhere the edits you made.\nAdd as many sub-folders as suitable. If you only have a single processing step, one sub-folder for processed data is enough. If you have multiple stages of cleaning and processing, additional sub-folders might be useful. Adjust based on the complexity of your project.\nI suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data:\nhttp://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata"
  },
  {
    "objectID": "starter-analysis-exercise/code/readme.html",
    "href": "starter-analysis-exercise/code/readme.html",
    "title": "Asmith Joseph Data Analysis Portfolio",
    "section": "",
    "text": "Place your various R or Quarto files in the appropriate folders.\nYou can either have fewer large scripts, or multiple scripts that do only specific actions. Those can be R or Quarto files. In either case, document the scripts and what goes on in them so well that someone else (including future you) can easily figure out what is happening.\nThe scripts should load the appropriate data (e.g. raw or processed), perform actions, and save results (e.g. processed data, figures, computed values) in the appropriate folders. Document somewhere what inputs each script takes and where output is placed.\nIf scripts need to be run in a specific order, document this. Either as comments in the script, or in a separate text file such as this readme file. Ideally of course in both locations.\nDepending on your specific project, you might want to have further folders/sub-folders."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl) #for loading Excel files\n\nWarning: package 'readxl' was built under R version 4.4.3\n\nlibrary(dplyr) #for data processing/cleaning\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\nlibrary(skimr) #for nice visualization of data \n\nWarning: package 'skimr' was built under R version 4.4.2\n\nlibrary(here) #to set paths\n\nWarning: package 'here' was built under R version 4.4.2\n\n\nhere() starts at C:/Users/ajose35/Desktop/MADA-course/AsmithJoseph-MADA-portfolio\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"raw-data\",\"exampledata.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\n\n\n\nCheck data\nFirst we can look at the codebook\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 3 × 3\n  `Variable Name` `Variable Definition`                 `Allowed Values`      \n  &lt;chr&gt;           &lt;chr&gt;                                 &lt;chr&gt;                 \n1 Height          height in centimeters                 numeric value &gt;0 or NA\n2 Weight          weight in kilograms                   numeric value &gt;0 or NA\n3 Gender          identified gender (male/female/other) M/F/O/NA              \n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 3\n$ Height &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\", \"156\", \"166\", \"155\", …\n$ Weight &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7000, NA, 45, 55, 50\n$ Gender &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"M\", \"F\", \"F\", \"M…\n\nsummary(rawdata)\n\n    Height              Weight          Gender         \n Length:14          Min.   :  45.0   Length:14         \n Class :character   1st Qu.:  55.0   Class :character  \n Mode  :character   Median :  70.0   Mode  :character  \n                    Mean   : 602.7                     \n                    3rd Qu.:  90.0                     \n                    Max.   :7000.0                     \n                    NA's   :1                          \n\nhead(rawdata)\n\n# A tibble: 6 × 3\n  Height Weight Gender\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; \n1 180        80 M     \n2 175        70 O     \n3 sixty      60 F     \n4 178        76 F     \n5 192        90 NA    \n6 6          55 F     \n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45\n55\n70\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n151.62\n46.46\n6\n154.00\n165\n175\n192\n▁▁▁▂▇\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\nhist(d1$Height)\n\n\n\n\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n165.23\n16.52\n133\n155.00\n166\n178\n192\n▂▇▆▆▃\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) %&gt;% tidyr::drop_na()\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\n\n\n\nAll done, data is clean now.\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above.\n\nprocesseddata &lt;- d4\n\n\n\nSave data\nFinally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\nsaveRDS(processeddata, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda.html",
    "href": "starter-analysis-exercise/code/eda-code/eda.html",
    "title": "An example exploratory analysis script",
    "section": "",
    "text": "This Quarto file loads the cleaned data and does some exploring.\nI’m only showing it the way where the code is included in the file. As described in the processing_code materials, I currently prefer the approach of having R code in a separate file and pulling it in.\nBut I already had this written and haven’t yet re-done it that way. Feel free to redo and send a pull request on GitHub :)\nAgain, it is largely a matter of preference and what makes the most sense to decide if one wants to have code inside Quarto files, or as separate R files. And sometimes, an R script with enough comments is good enough and one doesn’t need a Quarto file.\nAlso note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you’ll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.\nAs part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.\nStart by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables.\nPlots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones.\n\nSetup\n\n#load needed packages. make sure they are installed.\nlibrary(here) #for data loading/saving\n\nWarning: package 'here' was built under R version 4.4.2\n\n\nhere() starts at C:/Users/ajose35/Desktop/MADA-course/AsmithJoseph-MADA-portfolio\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(skimr)\n\nWarning: package 'skimr' was built under R version 4.4.2\n\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.4.3\n\n\nLoad the data.\n\n#Path to data. Note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\n#load data\nmydata &lt;- readRDS(data_location)\n\n\n\nData exploration through tables\nShowing a bit of code to produce and save a summary table.\n\nsummary_df = skimr::skim(mydata)\nprint(summary_df)\n\n── Data Summary ────────────────────────\n                           Values\nName                       mydata\nNumber of rows             9     \nNumber of columns          3     \n_______________________          \nColumn type frequency:           \n  factor                   1     \n  numeric                  2     \n________________________         \nGroup variables            None  \n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique top_counts      \n1 Gender                0             1 FALSE          3 M: 4, F: 3, O: 2\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate  mean   sd  p0 p25 p50 p75 p100 hist \n1 Height                0             1 166.  16.0 133 156 166 178  183 ▂▁▃▃▇\n2 Weight                0             1  70.1 21.2  45  55  70  80  110 ▇▂▃▂▂\n\n# save to file\nsummarytable_file = here(\"starter-analysis-exercise\",\"results\", \"tables-files\", \"summarytable.rds\")\nsaveRDS(summary_df, file = summarytable_file)\n\nWe are saving the results to the results/tables folder. Structure the folders inside results such that they make sense for your specific analysis. Provide enough documentation that someone can understand what you are doing and what goes where. readme.md files inside each folder are a good idea.\n\n\nData exploration through figures\nHistogram plots for the continuous outcomes.\nHeight first.\n\np1 &lt;- mydata %&gt;% ggplot(aes(x=Height)) + geom_histogram() \nplot(p1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-distribution.png\")\nggsave(filename = figure_file, plot=p1) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow weights.\n\np2 &lt;- mydata %&gt;% ggplot(aes(x=Weight)) + geom_histogram() \nplot(p2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"weight-distribution.png\")\nggsave(filename = figure_file, plot=p2) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow height as function of weight.\n\np3 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_point() + geom_smooth(method='lm')\nplot(p3)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight.png\")\nggsave(filename = figure_file, plot=p3) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nOnce more height as function of weight, stratified by gender. Note that there is so little data, it’s a bit silly. But we’ll plot it anyway.\n\np4 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight, color = Gender)) + geom_point() + geom_smooth(method='lm')\nplot(p4)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight-stratified.png\")\nggsave(filename = figure_file, plot=p4) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\nWarning in qt((1 - level)/2, df): no non-missing arguments to max; returning\n-Inf\n\n\n\n\nNotes\nFor your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible."
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html",
    "href": "presentation-exercise/presentation-exercise.html",
    "title": "Presentation Exercise",
    "section": "",
    "text": "Introduction\nVisualization Exercise : Replicating the FiveThirtyEight Fatalities Graph using AI Assistance\nThe objective of this exercise is to replicate a FiveThirtyEight graph that visualizes airline fatalities adjusted for seat availability and distance traveled between 1985-99 and 2000-14. I obtained the article from FiveThirtyEight.\nThe FiveThirtyEight article suggests that past crashes are not the best indicator of an airline’s current safety. Instead, it recommends evaluating airlines based on their overall incident rates, including non-fatal ones, which provide a more consistent safety measure. The analysis also notes that airlines from wealthier countries typically have better safety records due to stricter standards and regulations. A composite “safety score” calculated using data on incidents and fatalities helps rank airlines, with significant variations in safety observed across different carriers and time periods.\nFull article for more details here.\nThe data was pulled from FiveThirtyEight Data.\n\n\nWarning: package 'here' was built under R version 4.4.2\n\n\nhere() starts at C:/Users/ajose35/Desktop/MADA-course/AsmithJoseph-MADA-portfolio\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInitial AI Prompt\nMy Prompt:\nI am undertaking a project to replicate a graph from an online article. Here’s how we’ll proceed: 1) I will provide the link to the article, 2) share the dataset, and 3) upload an image of the original graph. Your task is to recreate the graph in RStudio, mirroring the original in terms of variables, colors, and styles. I will be available throughout the process to help with any adjustments you need to make.\nAI Response:\nUnderstood! Please provide the dataset, and I will generate RStudio code to replicate the FiveThirtyEight visualization.\n\n\nData Loading & Initial Visualization\nUser Prompt:\nLoad the dataset using the here package in R. Read and clean the data to extract only relevant columns.\nI Response & Code:\n\n# Load required libraries\nif (!requireNamespace(\"here\", quietly = TRUE)) install.packages(\"here\")\nif (!requireNamespace(\"tidyverse\", quietly = TRUE)) install.packages(\"tidyverse\")\n\nlibrary(here)\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.4.2\n\n\nWarning: package 'ggplot2' was built under R version 4.4.3\n\n\nWarning: package 'readr' was built under R version 4.4.2\n\n\nWarning: package 'purrr' was built under R version 4.4.2\n\n\nWarning: package 'lubridate' was built under R version 4.4.2\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# Define the file path using `here`\ndata_path &lt;- here(\"presentation-exercise\", \"data\", \"airline-safety.csv\")\n\n# Read the CSV file\nairline_data &lt;- read_csv(data_path)\n\nRows: 56 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): airline\ndbl (7): avail_seat_km_per_week, incidents_85_99, fatal_accidents_85_99, fat...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Rename columns for clarity\nairline_data_clean &lt;- airline_data %&gt;%\n  rename(\n    airline = airline,\n    fatal_85_99 = fatalities_85_99,\n    fatal_00_14 = fatalities_00_14\n  )\n\n\n\nFirst Attempt at the Graph\nMy Prompt:\nGenerate a scatter plot where:\nX-axis: Fatalities (1985-99) Y-axis: Fatalities (2000-14) Dots: Represent airlines Trend Line: Add a flat red regression line (like in the original graph) Label specific airlines (Kenya Airways, Malaysia Airlines, China Airlines, Pakistan International, and Avianca)\n\n\nLoad the data.\n\n# Load libraries\nlibrary(here)\nlibrary(tidyverse)\nlibrary(ggrepel)\n\nWarning: package 'ggrepel' was built under R version 4.4.2\n\n# Define file path using `here`\ndata_path &lt;- here(\"presentation-exercise\", \"data\", \"airline-safety.csv\")\n\n# Read the CSV file\nairline_data &lt;- read_csv(data_path)\n\nRows: 56 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): airline\ndbl (7): avail_seat_km_per_week, incidents_85_99, fatal_accidents_85_99, fat...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Check the first few rows of the dataset\nhead(airline_data)\n\n# A tibble: 6 × 8\n  airline           avail_seat_km_per_week incidents_85_99 fatal_accidents_85_99\n  &lt;chr&gt;                              &lt;dbl&gt;           &lt;dbl&gt;                 &lt;dbl&gt;\n1 Aer Lingus                     320906734               2                     0\n2 Aeroflot*                     1197672318              76                    14\n3 Aerolineas Argen…              385803648               6                     0\n4 Aeromexico*                    596871813               3                     1\n5 Air Canada                    1865253802               2                     0\n6 Air France                    3004002661              14                     4\n# ℹ 4 more variables: fatalities_85_99 &lt;dbl&gt;, incidents_00_14 &lt;dbl&gt;,\n#   fatal_accidents_00_14 &lt;dbl&gt;, fatalities_00_14 &lt;dbl&gt;\n\n\n\n\nData Preparation\n\n# Check the structure of the dataset\nglimpse(airline_data)\n\nRows: 56\nColumns: 8\n$ airline                &lt;chr&gt; \"Aer Lingus\", \"Aeroflot*\", \"Aerolineas Argentin…\n$ avail_seat_km_per_week &lt;dbl&gt; 320906734, 1197672318, 385803648, 596871813, 18…\n$ incidents_85_99        &lt;dbl&gt; 2, 76, 6, 3, 2, 14, 2, 3, 5, 7, 3, 21, 1, 5, 4,…\n$ fatal_accidents_85_99  &lt;dbl&gt; 0, 14, 0, 1, 0, 4, 1, 0, 0, 2, 1, 5, 0, 3, 0, 0…\n$ fatalities_85_99       &lt;dbl&gt; 0, 128, 0, 64, 0, 79, 329, 0, 0, 50, 1, 101, 0,…\n$ incidents_00_14        &lt;dbl&gt; 0, 6, 1, 5, 2, 6, 4, 5, 5, 4, 7, 17, 1, 0, 6, 2…\n$ fatal_accidents_00_14  &lt;dbl&gt; 0, 1, 0, 0, 0, 2, 1, 1, 1, 0, 0, 3, 0, 0, 0, 0,…\n$ fatalities_00_14       &lt;dbl&gt; 0, 88, 0, 0, 0, 337, 158, 7, 88, 0, 0, 416, 0, …\n\n# Rename columns for clarity (optional, keeping it consistent with the FiveThirtyEight graphs)\nairline_data_clean &lt;- airline_data %&gt;%\n  rename(\n    airline = airline,\n    fatal_accidents_85_99 = fatal_accidents_85_99,\n    fatal_accidents_00_14 = fatal_accidents_00_14,\n    fatalities_85_99 = fatalities_85_99,\n    fatalities_00_14 = fatalities_00_14,\n    incidents_85_99 = incidents_85_99,\n    incidents_00_14 = incidents_00_14\n  )\n\n# Check for missing values\nsum(is.na(airline_data_clean))\n\n[1] 0\n\n\n\n\nFirst Attempt at the Graph\nMy Prompt:\nGenerate a scatter plot where:\nX-axis: Fatalities (1985-99) Y-axis: Fatalities (2000-14) Dots: Represent airlines Trend Line: Add a flat red regression line (like in the original graph) Label specific airlines (Kenya Airways, Malaysia Airlines, China Airlines, Pakistan International, and Avianca)\n#Correcting Airline Positions My Prompt:\nAdjust airline fatality positions to match the original graph.\nKenya Airways should be at (0, 1375) Malaysia Airlines should have two dots at (0, 750) and (0, 500) China Airlines & Pakistan International should be aligned at the same X-axis value. Avianca should be slightly past 1000.\n\n\nCreate Graph 1 (Fatalities) –&gt; (1st attempt)\n\n# Create the first scatter plot\nfatalities_plot &lt;- ggplot(airline_data_clean, aes(x = fatalities_85_99, y = fatalities_00_14)) +\n  geom_point(color = \"black\", size = 3, alpha = 0.7) +  # Scatter plot points\n  geom_smooth(method = \"lm\", color = \"red\", se = FALSE, size = 1.5) +  # Regression line\n  geom_text_repel(aes(label = ifelse(fatalities_00_14 &gt; 250 | fatalities_85_99 &gt; 750, airline, \"\")),\n                  size = 5, family = \"Atlas Grotesk\", fontface = \"bold\") +  # Automatic labeling for key airlines\n  labs(\n    title = \"Fatalities by Airline Are Highly Unpredictable\",\n    subtitle = \"Fatalities adjusted for seats available and distance traveled\\n(deaths per 1 trillion seat kilometers)\",\n    x = \"1985-99\",\n    y = \"2000-14\",\n    caption = \"Source: Flight Safety Foundation | FIVE THIRTY EIGHT\"\n  ) +\n  theme_minimal() +  # Minimalist theme to match FiveThirtyEight\n  theme(\n    text = element_text(family = \"Atlas Grotesk\"),\n    plot.title = element_text(size = 18, face = \"bold\"),\n    plot.subtitle = element_text(size = 12, color = \"gray30\"),\n    axis.title = element_text(size = 14),\n    axis.text = element_text(size = 12),\n    plot.caption = element_text(size = 10, color = \"gray50\"),\n    panel.grid.major = element_line(color = \"gray85\"),\n    panel.grid.minor = element_blank(),\n    plot.background = element_rect(fill = \"gray95\", color = NA)\n  )\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n# Print the plot\nprint(fatalities_plot)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n\n\nCreate Graph 1 (Fatalities) –&gt; (2nd attempt)\n\n# Load libraries\nlibrary(here)\nlibrary(tidyverse)\nlibrary(ggrepel)\nlibrary(showtext)  # For custom fonts\n\nWarning: package 'showtext' was built under R version 4.4.2\n\n\nLoading required package: sysfonts\n\n\nWarning: package 'sysfonts' was built under R version 4.4.2\n\n\nLoading required package: showtextdb\n\n\nWarning: package 'showtextdb' was built under R version 4.4.2\n\n# Enable the Atlas Grotesk font\nfont_add_google(\"Montserrat\", \"AtlasGrotesk\")  # Alternative if Atlas Grotesk isn't available\nshowtext_auto()\n\n\n# Rename columns for clarity\nairline_data_clean &lt;- airline_data %&gt;%\n  rename(\n    airline = airline,\n    fatal_85_99 = fatalities_85_99,\n    fatal_00_14 = fatalities_00_14\n  )\n\n# Manually correct airline fatality positions to match original graph\nmanual_adjustments &lt;- tibble(\n  airline = c(\"Kenya Airways\", \"Malaysia Airlines\", \"China Airlines\", \"Pakistan International\", \"Avianca\"),\n  fatal_85_99 = c(250, 250, 750, 700, 1050),  # Adjust x-axis positions\n  fatal_00_14 = c(1250, 750, 400, 300, 0)  # Adjust y-axis positions\n)\n\n# Merge adjustments with original dataset\nairline_data_fixed &lt;- airline_data_clean %&gt;%\n  filter(!airline %in% manual_adjustments$airline) %&gt;%\n  bind_rows(manual_adjustments)\n\n# Select only key airlines for labeling\nlabel_airlines &lt;- c(\"Kenya Airways\", \"Malaysia Airlines\", \"China Airlines\", \"Pakistan International\", \"Avianca\")\n\n# Create label column for only the selected airlines\nairline_data_fixed &lt;- airline_data_fixed %&gt;%\n  mutate(label = ifelse(airline %in% label_airlines, airline, NA))\n\n\n# Load required package for margin units\nlibrary(grid)\n\n# Create the scatter plot with corrected airline positions\nfatalities_plot &lt;- ggplot(airline_data_fixed, aes(x = fatal_85_99, y = fatal_00_14)) +\n  \n  # Scatter points (Black dots)\n  geom_point(color = \"black\", size = 3, alpha = 0.8) +\n  \n  # Flat Red regression line (Ensuring a flat trend)\n  geom_smooth(method = \"lm\", formula = y ~ 1, color = \"red\", se = FALSE, size = 1.5, fullrange = TRUE) +\n  \n  # Airline Labels (Fix Overlap Issues)\n  geom_text_repel(aes(label = label),\n                  size = 4.5,  # Adjusted for better readability\n                  family = \"AtlasGrotesk\",\n                  fontface = \"bold\",\n                  nudge_y = 50,  # Move text slightly to reduce overlap\n                  segment.color = \"gray70\", # Light gray connecting lines\n                  segment.size = 0.5,\n                  segment.curvature = -0.2,\n                  box.padding = 0.5) +\n  \n  # Titles and labels\n  labs(\n    title = \"Fatalities by Airline Are Highly Unpredictable\",\n    subtitle = \"Fatalities adjusted for seats available and distance traveled\\n(deaths per 1 trillion seat kilometers)\",\n    x = \"1985-99\",\n    y = \"2000-14\",\n    caption = \"Source: Flight Safety Foundation | FIVE THIRTY EIGHT\"\n  ) +\n  \n  # Match FiveThirtyEight theme\n  theme_minimal() +\n  theme(\n    text = element_text(family = \"AtlasGrotesk\"),\n    plot.title = element_text(size = 18, face = \"bold\"),\n    plot.subtitle = element_text(size = 12, color = \"gray30\"),\n    axis.title = element_text(size = 14),\n    axis.text = element_text(size = 12),\n    plot.caption = element_text(size = 10, color = \"gray50\", hjust = 1), # Align to right\n    \n    # Grid styling to match FiveThirtyEight\n    panel.grid.major = element_line(color = \"gray90\"),  # Lighter grid\n    panel.grid.minor = element_blank(),\n    \n    # Background color\n    plot.background = element_rect(fill = \"gray95\", color = NA),\n    \n    # Adjust margins for axis spacing (Fix: Convert to unit format)\n    plot.margin = unit(c(20, 20, 30, 20), \"pt\")  # Use \"pt\" for points\n  ) +\n  \n  # Set x and y axis limits to match the original graph\n  scale_x_continuous(limits = c(0, 1500), breaks = seq(0, 1500, 250)) +\n  scale_y_continuous(limits = c(0, 1500), breaks = seq(0, 1500, 250))\n\n# Print the corrected plot\nprint(fatalities_plot)\n\nWarning: Removed 51 rows containing missing values or values outside the scale range\n(`geom_text_repel()`).\n\n\n\n\n\n\n\n\n\n\n\n\nMy prompt:\nLet’s proceed with the following revisions and adjustments to your graph:\nAdjust the positions of airline fatalities to match those in the original graph:\nPlace Kenya Airways at coordinates (0, 1375). Position Malaysia Airlines with two dots at coordinates (0, 750) and (0, 500). Align China Airlines and Pakistan International on the same X-axis. Set Avianca slightly past the 1000 mark on the X-axis. Change the font to Atlas Grotesk for all text elements.\nAdjust the label positions to ensure they sit right next to the corresponding dot.\nModify the grid color to light gray, replicating the style of FiveThirtyEight.\nAdd a shaded gray area at the bottom of the graph, incorporating the FiveThirtyEight logo and source text for attribution.\n\n# Load required libraries\nif (!requireNamespace(\"here\", quietly = TRUE)) install.packages(\"here\")\nif (!requireNamespace(\"tidyverse\", quietly = TRUE)) install.packages(\"tidyverse\")\nif (!requireNamespace(\"ggrepel\", quietly = TRUE)) install.packages(\"ggrepel\")\nif (!requireNamespace(\"showtext\", quietly = TRUE)) install.packages(\"showtext\")\n\nlibrary(here)\nlibrary(tidyverse)\nlibrary(ggrepel)\nlibrary(showtext)\nlibrary(grid)  # For margin fixes\n\n# Enable Google Font (Alternative to Atlas Grotesk)\nfont_add_google(\"Montserrat\", \"montserrat\")\nshowtext_auto()\n\n# Define the file path using `here`\ndata_path &lt;- here(\"presentation-exercise\", \"data\", \"airline-safety.csv\")\n\n# Read the CSV file\nairline_data &lt;- read_csv(data_path)\n\nRows: 56 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): airline\ndbl (7): avail_seat_km_per_week, incidents_85_99, fatal_accidents_85_99, fat...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Rename columns for clarity\nairline_data_clean &lt;- airline_data %&gt;%\n  rename(\n    airline = airline,\n    fatal_85_99 = fatalities_85_99,\n    fatal_00_14 = fatalities_00_14\n  )\n\n# Manually correct airline fatality positions to match original graph\nmanual_adjustments &lt;- tibble(\n  airline = c(\"Kenya Airways\", \"Malaysia Airlines\", \"China Airlines\", \"Pakistan International\", \"Avianca\"),\n  fatal_85_99 = c(0, 0, 850, 850, 1025),  # Keep Malaysia & Kenya exactly on the y-axis\n  fatal_00_14 = c(1375, 750, 400, 200, 0)  # One dot at 750, China at 400, Pakistan at 200\n)\n\n# Merge adjustments with original dataset\nairline_data_fixed &lt;- airline_data_clean %&gt;%\n  filter(!airline %in% manual_adjustments$airline) %&gt;%\n  bind_rows(manual_adjustments)\n\n# Select only key airlines for labeling\nlabel_airlines &lt;- c(\"Kenya Airways\", \"Malaysia Airlines\", \"China Airlines\", \"Pakistan International\", \"Avianca\")\n\n# Create label column for only the selected airlines\nairline_data_fixed &lt;- airline_data_fixed %&gt;%\n  mutate(label = ifelse(airline %in% label_airlines, airline, NA)) %&gt;%\n  mutate(label = ifelse(is.na(label), \"\", label))  # Fix missing label issue\n\n# Create the scatter plot with corrected airline positions\nfatalities_plot &lt;- ggplot(airline_data_fixed, aes(x = fatal_85_99, y = fatal_00_14)) +\n  \n  # Scatter points (Black dots)\n  geom_point(color = \"black\", size = 3, alpha = 0.8) +\n  \n  # Flat Red regression line (Ensuring a flat trend)\n  geom_smooth(method = \"lm\", formula = y ~ 1, color = \"red\", se = FALSE, linewidth = 1.5, fullrange = TRUE) +\n  \n  # Airline Labels (Fix Overlap Issues)\n  geom_text_repel(aes(label = label),\n                  size = 4.5,  \n                  family = \"montserrat\",  # Updated font\n                  fontface = \"bold\",\n                  hjust = 0,  # Align text to the right\n                  nudge_x = 15,  # Move labels slightly right of dots for precision\n                  nudge_y = 5,   # Adjust to ensure spacing is exactly like original\n                  segment.color = NA,  # No connecting line\n                  segment.size = 0) +\n  \n  # Titles and labels\n  labs(\n    title = \"Fatalities by Airline Are Highly Unpredictable\",\n    subtitle = \"Fatalities adjusted for seats available and distance traveled\\n(deaths per 1 trillion seat kilometers)\",\n    x = \"1985-99\",\n    y = \"2000-14\",\n    caption = \"Source: Flight Safety Foundation | FIVE THIRTY EIGHT\"\n  ) +\n  \n  # Match FiveThirtyEight theme\n  theme_minimal() +\n  theme(\n    text = element_text(family = \"montserrat\"),  # Use the correct font\n    plot.title = element_text(size = 18, face = \"bold\"),\n    plot.subtitle = element_text(size = 12, color = \"gray30\"),\n    axis.title = element_text(size = 14),\n    axis.text = element_text(size = 12),\n    plot.caption = element_text(size = 10, color = \"gray50\", hjust = 1), \n    \n    # Grid styling to match FiveThirtyEight\n    panel.grid.major = element_line(color = \"gray90\"),  \n    panel.grid.minor = element_blank(),\n    \n    # Background color\n    plot.background = element_rect(fill = \"gray95\", color = NA),\n    \n    # Adjust margins for axis spacing\n    plot.margin = unit(c(20, 20, 30, 20), \"pt\")  # Fix margin issue\n  ) +\n  \n  # Set x and y axis limits to match the original graph\n  scale_x_continuous(limits = c(0, 1500), breaks = seq(0, 1500, 250)) +\n  scale_y_continuous(limits = c(0, 1500), breaks = seq(0, 1500, 250))\n\n# Print the corrected plot\nprint(fatalities_plot)\n\n\n\n\n\n\n\n\n\n\nMy Prompt:\nIdentify the differences between Graph 1 the original and the replicate\nAI Response:\nIn the original graph, the labels for China Airlines and Pakistan International need vertical adjustments for accuracy; they’re positioned too closely in the replicated graph. The red trend line should be flat and end slightly past 1000, not extending too far as in the replication. For Kenya Airways, the dot should align on the first y-grid line with the label rightly spaced to the right—current positioning is off. Malaysia Airlines’ labels need to accurately reflect their placement next to the first major y-grid line. Avianca’s dot, closer to 1000 in the original, is too far right in the replication and needs adjustment. Generally, labels in the replicated graph are too close to the dots compared to the original, where they are more spaced out, requiring overall spacing corrections.\n\n\n\n\n\n(Part 2) Creating the Airline Safety Table\nTo build this table, I selected key variables on incidents, fatal accidents, and fatalities for the periods 1985-1999 and 2000-2014, filtering the data to highlight the 15 airlines with the highest total fatalities.\nUsing gt(), I structured the table by adding a bold title, formatted headers, and spanning columns for the two time periods. Airline names were bolded for emphasis, and numerical values were simplified for better readability. To enhance insights, I applied color-coded conditional formatting, using a gradient scale from green (low incidents) to red (high fatalities). A summary row was also included to provide totals for incidents, fatal accidents, and fatalities, along with a source note for attribution.\n\n\nLoading the data and necessary Libraries\n\n# Load libraries\nlibrary(gt)\n\nWarning: package 'gt' was built under R version 4.4.2\n\nlibrary(tidyverse)\nlibrary(scales)\n\nWarning: package 'scales' was built under R version 4.4.2\n\n\n\nAttaching package: 'scales'\n\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\nlibrary(sparkline)  # For inline visualizations\n\nWarning: package 'sparkline' was built under R version 4.4.2\n\n\n\n# Load airline safety dataset\ndata_path &lt;- here(\"presentation-exercise\", \"data\", \"airline-safety.csv\")\nairline_data &lt;- read_csv(data_path)\n\nRows: 56 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): airline\ndbl (7): avail_seat_km_per_week, incidents_85_99, fatal_accidents_85_99, fat...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Select key columns\nairline_table &lt;- airline_data %&gt;%\n  select(\n    airline, incidents_85_99, fatal_accidents_85_99, fatalities_85_99,\n    incidents_00_14, fatal_accidents_00_14, fatalities_00_14\n  ) %&gt;%\n\n  # Filter for top airlines based on total fatalities\n  arrange(desc(fatalities_85_99 + fatalities_00_14)) %&gt;%\n  slice_head(n = 15)  # Show only the top 15 airlines for readability\n\n\n\nCreating the Airline Safety Incidents (1985-2014) Table with gt\n\n# Define color palette for severity levels\ncolor_palette &lt;- c(\n  \"#4CAF50\",  # Green (Low)\n  \"#FFD700\",  # Yellow (Moderate)\n  \"#FF9800\",  # Orange (High)\n  \"#E53935\",  # Red (Very High)\n  \"#B71C1C\"   # Dark Red (Extreme)\n)\n\n# Define breakpoints for automatic conditional formatting\nbreakpoints &lt;- c(0, 10, 50, 200, 700, Inf) \n\n# Create the gt table\ngt_table &lt;- airline_table %&gt;%\n  gt() %&gt;%\n\n  # Add title & subtitle\n  tab_header(\n    title = md(\"**Airline Safety Incidents (1985-2014)**\"),\n    subtitle = md(\"_A summary of incidents, fatal accidents, and fatalities per trillion seat kilometers._\")\n  ) %&gt;%\n\n  # Format column labels\n  cols_label(\n    airline = \"Airline\",\n    incidents_85_99 = \"Incidents\",\n    fatal_accidents_85_99 = \"Fatal Accidents\",\n    fatalities_85_99 = \"Fatalities\",\n    incidents_00_14 = \"Incidents\",\n    fatal_accidents_00_14 = \"Fatal Accidents\",\n    fatalities_00_14 = \"Fatalities\"\n  ) %&gt;%\n\n  # Apply color formatting\n  data_color(\n    columns = c(incidents_85_99, fatal_accidents_85_99, fatalities_85_99,\n                incidents_00_14, fatal_accidents_00_14, fatalities_00_14),\n    colors = col_bin(\n      palette = color_palette,\n      domain = NULL,\n      bins = breakpoints\n    )\n  ) %&gt;%\n\n  # Format numerical values\n  fmt_number(\n    columns = c(incidents_85_99, fatal_accidents_85_99, fatalities_85_99,\n                incidents_00_14, fatal_accidents_00_14, fatalities_00_14),\n    decimals = 0\n  ) %&gt;%\n\n  # Bold airline names\n  tab_style(\n    style = list(\n      cell_text(weight = \"bold\")\n    ),\n    locations = cells_body(\n      columns = airline\n    )\n  ) %&gt;%\n\n  # Add column span header\n  tab_spanner(\n    label = \"1985-1999\",\n    columns = c(incidents_85_99, fatal_accidents_85_99, fatalities_85_99)\n  ) %&gt;%\n  tab_spanner(\n    label = \"2000-2014\",\n    columns = c(incidents_00_14, fatal_accidents_00_14, fatalities_00_14)\n  ) %&gt;%\n\n  # Add summary row\n  summary_rows(\n    groups = NULL,\n    columns = c(incidents_85_99, fatal_accidents_85_99, fatalities_85_99,\n                incidents_00_14, fatal_accidents_00_14, fatalities_00_14),\n    fns = list(\"Total\" = ~sum(.))\n  ) %&gt;%\n\n  # Add source note\n  tab_source_note(\n    source_note = md(\"Source: Flight Safety Foundation | **FIVETHIRTYEIGHT**\")\n  ) %&gt;%\n\n  # Set table options\n  tab_options(\n    column_labels.font.weight = \"bold\",\n    table.font.size = px(14),\n    table.border.top.width = px(2),\n    table.border.bottom.width = px(2),\n    heading.title.font.weight = \"bold\"\n  )\n\nWarning: Since gt v0.9.0, the `colors` argument has been deprecated.\n• Please use the `fn` argument instead.\nThis warning is displayed once every 8 hours.\n\n\nWarning: Since gt v0.9.0, `groups = NULL` is deprecated.\nℹ If this was intended for generation of grand summary rows, use\n  `grand_summary_rows()` instead.\n\n# Print the table\ngt_table\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAirline Safety Incidents (1985-2014)\n\n\nA summary of incidents, fatal accidents, and fatalities per trillion seat kilometers.\n\n\n\nAirline\n\n1985-1999\n\n\n2000-2014\n\n\n\nIncidents\nFatal Accidents\nFatalities\nIncidents\nFatal Accidents\nFatalities\n\n\n\n\n\nChina Airlines\n12\n6\n535\n2\n1\n225\n\n\n\nMalaysia Airlines\n3\n1\n34\n3\n2\n537\n\n\n\nJapan Airlines\n3\n1\n520\n0\n0\n0\n\n\n\nAmerican*\n21\n5\n101\n17\n3\n416\n\n\n\nAir India*\n2\n1\n329\n4\n1\n158\n\n\n\nDelta / Northwest*\n24\n12\n407\n24\n2\n51\n\n\n\nUnited / Continental*\n19\n8\n319\n14\n2\n109\n\n\n\nKorean Air\n12\n5\n425\n1\n0\n0\n\n\n\nAir France\n14\n4\n79\n6\n2\n337\n\n\n\nAvianca\n5\n3\n323\n0\n0\n0\n\n\n\nSaudi Arabian\n7\n2\n313\n11\n0\n0\n\n\n\nThai Airways\n8\n4\n308\n2\n1\n1\n\n\n\nEgyptair\n8\n3\n282\n4\n1\n14\n\n\n\nTAM\n8\n3\n98\n7\n2\n188\n\n\n\nKenya Airways\n2\n0\n0\n2\n2\n283\n\n\nTotal\n—\n148\n58\n4073\n97\n19\n2319\n\n\n\nSource: Flight Safety Foundation | FIVETHIRTYEIGHT"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html",
    "href": "coding-exercise/coding-exercise.html",
    "title": "R Coding Exercise",
    "section": "",
    "text": "# Installing the dslabs package because I did not have it in my library\n# MJ: code isn't rendering with this line so I made it a comment\n#install.packages(\"dslabs\")\n# Loading the dslabs package\nlibrary(dslabs)\n\nWarning: package 'dslabs' was built under R version 4.4.2\n# Using the help function page to assist in obtaining the gapminder dataset from the dslabs package\nhelp(\"gapminder\")\n\nstarting httpd help server ... done\n\n# loading the dslabs package and gapminder dataset\nlibrary(dslabs)\ndata(\"gapminder\")\n\n# Using the  str() to view the structure of the dataset\nstr(gapminder)\n\n'data.frame':   10545 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ year            : int  1960 1960 1960 1960 1960 1960 1960 1960 1960 1960 ...\n $ infant_mortality: num  115.4 148.2 208 NA 59.9 ...\n $ life_expectancy : num  62.9 47.5 36 63 65.4 ...\n $ fertility       : num  6.19 7.65 7.32 4.43 3.11 4.55 4.82 3.45 2.7 5.57 ...\n $ population      : num  1636054 11124892 5270844 54681 20619075 ...\n $ gdp             : num  NA 1.38e+10 NA NA 1.08e+11 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 4 1 1 2 2 3 2 5 4 3 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 19 11 10 2 15 21 2 1 22 21 ...\n\n# Using the  summary() to obtain a statistical summary of the dataset\nsummary(gapminder)\n\n                country           year      infant_mortality life_expectancy\n Albania            :   57   Min.   :1960   Min.   :  1.50   Min.   :13.20  \n Algeria            :   57   1st Qu.:1974   1st Qu.: 16.00   1st Qu.:57.50  \n Angola             :   57   Median :1988   Median : 41.50   Median :67.54  \n Antigua and Barbuda:   57   Mean   :1988   Mean   : 55.31   Mean   :64.81  \n Argentina          :   57   3rd Qu.:2002   3rd Qu.: 85.10   3rd Qu.:73.00  \n Armenia            :   57   Max.   :2016   Max.   :276.90   Max.   :83.90  \n (Other)            :10203                  NA's   :1453                    \n   fertility       population             gdp               continent   \n Min.   :0.840   Min.   :3.124e+04   Min.   :4.040e+07   Africa  :2907  \n 1st Qu.:2.200   1st Qu.:1.333e+06   1st Qu.:1.846e+09   Americas:2052  \n Median :3.750   Median :5.009e+06   Median :7.794e+09   Asia    :2679  \n Mean   :4.084   Mean   :2.701e+07   Mean   :1.480e+11   Europe  :2223  \n 3rd Qu.:6.000   3rd Qu.:1.523e+07   3rd Qu.:5.540e+10   Oceania : 684  \n Max.   :9.220   Max.   :1.376e+09   Max.   :1.174e+13                  \n NA's   :187     NA's   :185         NA's   :2972                       \n             region    \n Western Asia   :1026  \n Eastern Africa : 912  \n Western Africa : 912  \n Caribbean      : 741  \n South America  : 684  \n Southern Europe: 684  \n (Other)        :5586  \n\n# Using the class() to check the type of object gapminder is consist of \nclass(gapminder)\n\n[1] \"data.frame\"\n#ading the dplyr package into R session so i can  make its functions available. This package ispart of the tidyverse and is specifically designed for data manipulation and transformation, which will assist in providing fuctions to better work with data frames. \nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n## in the code below we are exploring some of the categories the  of African Data from the gapminder dataset located in the dslabs package in Rstudio\n\n#I started by creating two new objects from the `africadata` dataset:\n#- **`InfantLife`**: This object contains only the columns `infant_mortality` and `life_expectancy`.\n#- **`PoppLife`**: This object contains only the columns `population` and `life_expectancy`.\n\n#I use the `str()` function to examine the structure of each object and the `summary()` function to get descriptive statistics.\n\n### Code and Results.\n# We want to Filter only African countries and assign to a new object new object/variable called africadata. So this code is doing that task. \nafricadata &lt;- gapminder %&gt;%\n  filter(continent == \"Africa\")\n\n# We want to View the structure of the africadata object. The str() command is doing that task.\nstr(africadata)\n\n'data.frame':   2907 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 2 3 18 22 26 27 29 31 32 33 ...\n $ year            : int  1960 1960 1960 1960 1960 1960 1960 1960 1960 1960 ...\n $ infant_mortality: num  148 208 187 116 161 ...\n $ life_expectancy : num  47.5 36 38.3 50.3 35.2 ...\n $ fertility       : num  7.65 7.32 6.28 6.62 6.29 6.95 5.65 6.89 5.84 6.25 ...\n $ population      : num  11124892 5270844 2431620 524029 4829291 ...\n $ gdp             : num  1.38e+10 NA 6.22e+08 1.24e+08 5.97e+08 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 11 10 20 17 20 5 10 20 10 10 ...\n\n# Here we are abtaining a summary of the africadata object.\nsummary(africadata)\n\n         country          year      infant_mortality life_expectancy\n Algeria     :  57   Min.   :1960   Min.   : 11.40   Min.   :13.20  \n Angola      :  57   1st Qu.:1974   1st Qu.: 62.20   1st Qu.:48.23  \n Benin       :  57   Median :1988   Median : 93.40   Median :53.98  \n Botswana    :  57   Mean   :1988   Mean   : 95.12   Mean   :54.38  \n Burkina Faso:  57   3rd Qu.:2002   3rd Qu.:124.70   3rd Qu.:60.10  \n Burundi     :  57   Max.   :2016   Max.   :237.40   Max.   :77.60  \n (Other)     :2565                  NA's   :226                     \n   fertility       population             gdp               continent   \n Min.   :1.500   Min.   :    41538   Min.   :4.659e+07   Africa  :2907  \n 1st Qu.:5.160   1st Qu.:  1605232   1st Qu.:8.373e+08   Americas:   0  \n Median :6.160   Median :  5570982   Median :2.448e+09   Asia    :   0  \n Mean   :5.851   Mean   : 12235961   Mean   :9.346e+09   Europe  :   0  \n 3rd Qu.:6.860   3rd Qu.: 13888152   3rd Qu.:6.552e+09   Oceania :   0  \n Max.   :8.450   Max.   :182201962   Max.   :1.935e+11                  \n NA's   :51      NA's   :51          NA's   :637                        \n                       region   \n Eastern Africa           :912  \n Western Africa           :912  \n Middle Africa            :456  \n Northern Africa          :342  \n Southern Africa          :285  \n Australia and New Zealand:  0  \n (Other)                  :  0\n# using the Africadata object containing only infant_mortality and life_expectancy, I am creating two new object called InfantLife\nInfantLife &lt;- africadata %&gt;%\n  select(infant_mortality, life_expectancy)\n\n#using the Africadata object containing only population, life_expectancy, I am creating two new object called PoppLife Create \nPoppLife &lt;- africadata %&gt;%\n  select(population, life_expectancy)\n\n# Verifying the first few rows of both objects to verify\nhead(InfantLife)\n\n  infant_mortality life_expectancy\n1            148.2           47.50\n2            208.0           35.98\n3            186.9           38.29\n4            115.5           50.34\n5            161.3           35.21\n6            145.1           40.58\n\nhead(PoppLife)\n\n  population life_expectancy\n1   11124892           47.50\n2    5270844           35.98\n3    2431620           38.29\n4     524029           50.34\n5    4829291           35.21\n6    2786740           40.58\n\n# I want to View the structure of the InfantLife and  PoppLife to ensure the number of rows and columns . The str() command is doing that task.\nstr(InfantLife)\n\n'data.frame':   2907 obs. of  2 variables:\n $ infant_mortality: num  148 208 187 116 161 ...\n $ life_expectancy : num  47.5 36 38.3 50.3 35.2 ...\n\nstr(PoppLife)\n\n'data.frame':   2907 obs. of  2 variables:\n $ population     : num  11124892 5270844 2431620 524029 4829291 ...\n $ life_expectancy: num  47.5 36 38.3 50.3 35.2 ...\n\n# Using the summary() function  to obtain a statistical summary of the InfantLife object. the summary will give a detailed idea of  (min, median, max, etc.)\nsummary(InfantLife)\n\n infant_mortality life_expectancy\n Min.   : 11.40   Min.   :13.20  \n 1st Qu.: 62.20   1st Qu.:48.23  \n Median : 93.40   Median :53.98  \n Mean   : 95.12   Mean   :54.38  \n 3rd Qu.:124.70   3rd Qu.:60.10  \n Max.   :237.40   Max.   :77.60  \n NA's   :226                     \n\n# Using the summary() function  to obtain a statistical summary of the PoppLife objec. the summary will give a detailed idea of  (min, median, max, etc).\nsummary(PoppLife)\n\n   population        life_expectancy\n Min.   :    41538   Min.   :13.20  \n 1st Qu.:  1605232   1st Qu.:48.23  \n Median :  5570982   Median :53.98  \n Mean   : 12235961   Mean   :54.38  \n 3rd Qu.: 13888152   3rd Qu.:60.10  \n Max.   :182201962   Max.   :77.60  \n NA's   :51\n# I originally ran the code for the plot and I received theses error msg:Warning: Removed 226 rows containing missing values or values outside the scale range (geom_point()).Warning: Removed 51 rows containing missing values or values outside the scale range (geom_point()). so in order revolve the missing rows/values outside of the plot so took those measures - codes below-&gt; \n\n                                                                                                                                                           # First I Checked for missing values in the infant_mortality and life_expectancy columns\nsum(is.na(InfantLife$infant_mortality))  # Count missing values in infant_mortality\n\n[1] 226\n\nsum(is.na(InfantLife$life_expectancy))   # Count missing values in life_expectancy\n\n[1] 0\n\n# Second I Checked for missing values in the population and life_expectancy columns\nsum(is.na(PoppLife$population))          # Count missing values in population\n\n[1] 51\n\nsum(is.na(PoppLife$life_expectancy))     # Count missing values in life_expectancy\n\n[1] 0\n\n# Third I removed the rows with missing values in InfantLife\nInfantLife &lt;- na.omit(InfantLife)\n\n# Remove rows with missing values in PoppLife\nPoppLife &lt;- na.omit(PoppLife)\n\n\n# I then verified the range of infant_mortality and life_expectancy\nrange(InfantLife$infant_mortality, na.rm = TRUE)\n\n[1]  11.4 237.4\n\nrange(InfantLife$life_expectancy, na.rm = TRUE)\n\n[1] 13.2 77.6\n\n# I also verified the range of population and life_expectancy\nrange(PoppLife$population, na.rm = TRUE)\n\n[1]     41538 182201962\n\nrange(PoppLife$life_expectancy, na.rm = TRUE)\n\n[1] 13.2 77.6\n\n# I Filtered out extreme values for better visualization\nInfantLife &lt;- InfantLife %&gt;%\n  filter(infant_mortality &lt;= 200)  # Example: Focus on infant mortality ≤ 200\n\nPoppLife &lt;- PoppLife %&gt;%\n  filter(population &gt; 0)  # Ensure population is positive\n# Load necessary libraries\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.4.3\n\nlibrary(dplyr)\n\n# Remove missing values from datasets\nInfantLife &lt;- na.omit(InfantLife)\nPoppLife &lt;- na.omit(PoppLife)\n\n# Plot 1: Life expectancy as a function of infant mortality\nggplot(InfantLife, aes(x = infant_mortality, y = life_expectancy)) +\n  geom_point(color = \"pink\") +  # Plot points\n  labs(\n    title = \"Life Expectancy vs Infant Mortality\",\n    x = \"Infant Mortality (per 1000 live births)\",\n    y = \"Life Expectancy (years)\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n# Plot 2: Life expectancy as a function of population size (log scale for x-axis)\nggplot(PoppLife, aes(x = population, y = life_expectancy)) +\n  geom_point(color = \"blue\") +  # Plot points\n  scale_x_log10() +  # Set the x-axis to a log scale\n  labs(\n    title = \"Life Expectancy vs Population Size (Log Scale)\",\n    x = \"Population (log scale)\",\n    y = \"Life Expectancy (years)\"\n  ) +\n  theme_minimal()\n# Taking a look at a sample of the africadata dataset\nhead(africadata)\n\n       country year infant_mortality life_expectancy fertility population\n1      Algeria 1960            148.2           47.50      7.65   11124892\n2       Angola 1960            208.0           35.98      7.32    5270844\n3        Benin 1960            186.9           38.29      6.28    2431620\n4     Botswana 1960            115.5           50.34      6.62     524029\n5 Burkina Faso 1960            161.3           35.21      6.29    4829291\n6      Burundi 1960            145.1           40.58      6.95    2786740\n          gdp continent          region\n1 13828152297    Africa Northern Africa\n2          NA    Africa   Middle Africa\n3   621797131    Africa  Western Africa\n4   124460933    Africa Southern Africa\n5   596612183    Africa  Western Africa\n6   341126765    Africa  Eastern Africa\n\n# Checking data for a specific country (Nigeria)\nafricadata %&gt;%\n  filter(country == \"Nigeria\") %&gt;%\n  select(country, year, infant_mortality, life_expectancy, population)\n\n   country year infant_mortality life_expectancy population\n1  Nigeria 1960            165.0           40.39   45211614\n2  Nigeria 1961               NA           41.00   46144154\n3  Nigeria 1962            182.6           41.61   47117859\n4  Nigeria 1963            181.4           42.19   48128460\n5  Nigeria 1964            195.4           42.75   49169819\n6  Nigeria 1965            191.0           43.29   50238569\n7  Nigeria 1966            186.8           43.81   51336375\n8  Nigeria 1967            182.6           38.31   52468593\n9  Nigeria 1968            178.2           33.47   53640547\n10 Nigeria 1969            173.7           31.63   54859201\n11 Nigeria 1970            168.9           41.79   56131844\n12 Nigeria 1971            164.1           46.56   57453734\n13 Nigeria 1972            159.2           47.16   58829319\n14 Nigeria 1973            154.1           47.77   60285453\n15 Nigeria 1974            149.2           48.38   61857023\n16 Nigeria 1975            144.4           49.00   63565598\n17 Nigeria 1976            139.9           49.62   65426976\n18 Nigeria 1977            135.8           50.24   67425435\n19 Nigeria 1978            132.2           50.84   69512233\n20 Nigeria 1979            129.3           51.42   71619216\n21 Nigeria 1980            127.0           51.95   73698096\n22 Nigeria 1981            125.4           52.41   75729572\n23 Nigeria 1982            124.4           52.80   77729802\n24 Nigeria 1983            123.9           53.12   79729311\n25 Nigeria 1984            123.9           53.36   81775215\n26 Nigeria 1985            124.3           53.54   83901570\n27 Nigeria 1986            124.9           53.67   86118043\n28 Nigeria 1987            125.4           53.78   88412917\n29 Nigeria 1988            125.8           53.88   90773613\n30 Nigeria 1989            126.0           53.98   93179755\n31 Nigeria 1990            125.9           54.10   95617345\n32 Nigeria 1991            125.8           54.30   98085436\n33 Nigeria 1992            125.5           54.40  100592458\n34 Nigeria 1993            125.1           54.50  103145093\n35 Nigeria 1994            124.4           54.90  105753088\n36 Nigeria 1995            123.4           55.00  108424822\n37 Nigeria 1996            121.9           55.00  111164651\n38 Nigeria 1997            119.9           55.00  113975055\n39 Nigeria 1998            117.5           55.10  116860691\n40 Nigeria 1999            114.8           55.20  119826231\n41 Nigeria 2000            112.0           55.20  122876723\n42 Nigeria 2001            109.0           55.40  126014935\n43 Nigeria 2002            105.9           55.30  129246283\n44 Nigeria 2003            102.9           55.60  132581484\n45 Nigeria 2004             99.8           56.10  136033321\n46 Nigeria 2005             96.6           56.80  139611303\n47 Nigeria 2006             93.4           57.40  143318011\n48 Nigeria 2007             90.3           58.30  147152502\n49 Nigeria 2008             87.3           59.20  151115683\n50 Nigeria 2009             84.3           60.30  155207145\n51 Nigeria 2010             81.5           61.20  159424742\n52 Nigeria 2011             78.8           62.00  163770669\n53 Nigeria 2012             76.2           62.60  168240403\n54 Nigeria 2013             73.8           63.30  172816517\n55 Nigeria 2014             71.5           63.70  177475986\n56 Nigeria 2015             69.4           64.60  182201962\n57 Nigeria 2016               NA           65.51         NA\n#There is a clear negative correlation in the Life Expectancy vs Infant Mortality plot: as infant mortality increases, life expectancy decreases. This reflects how poor healthcare, sanitation, and poverty impact life expectancy. The streaks in the plot occur because the dataset includes repeated measurements for each country across multiple years. Over time, as a country’s infant mortality rate and life expectancy change, the points form smooth, line-like patterns.\n#In the Life Expectancy vs Population Size plot, we observe a positive correlation: countries with larger populations tend to have higher life expectancies. Larger populations are often associated with better infrastructure, stronger economies, and advanced healthcare. The x-axis uses a logarithmic scale to display the wide range of population sizes better, preventing smaller populations from being compressed. Streaks also appear here, reflecting population growth over time and overlapping trends for countries with similar trajectories.\n#These streaks arise because each country has multiple rows in the dataset, one for each year, with metrics like life expectancy, infant mortality, and population changing gradually. For example, Nigeria has 57 rows of data from 1960 onward.\n#This illustrates how Nigeria’s population grows steadily while its life expectancy and infant mortality rates change gradually. These patterns repeat for other countries, forming the streaks observed in both plots.\n#More data processing\n# Checking which years have missing values for infant_mortality\nmissing_by_year &lt;- africadata %&gt;%\n  group_by(year) %&gt;%\n  summarize(missing_values = sum(is.na(infant_mortality)))  # Count missing values per year\n\n# checking to see the years with missing data\nprint(missing_by_year)\n\n# A tibble: 57 × 2\n    year missing_values\n   &lt;int&gt;          &lt;int&gt;\n 1  1960             10\n 2  1961             17\n 3  1962             16\n 4  1963             16\n 5  1964             15\n 6  1965             14\n 7  1966             13\n 8  1967             11\n 9  1968             11\n10  1969              7\n# ℹ 47 more rows\n\n# Filtering data for the year 2000\nafrica_2000 &lt;- africadata %&gt;%\n  filter(year == 2000)\n\n# Checking the structure and summary of the new object\nstr(africa_2000)\n\n'data.frame':   51 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 2 3 18 22 26 27 29 31 32 33 ...\n $ year            : int  2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ...\n $ infant_mortality: num  33.9 128.3 89.3 52.4 96.2 ...\n $ life_expectancy : num  73.3 52.3 57.2 47.6 52.6 46.7 54.3 68.4 45.3 51.5 ...\n $ fertility       : num  2.51 6.84 5.98 3.41 6.59 7.06 5.62 3.7 5.45 7.35 ...\n $ population      : num  31183658 15058638 6949366 1736579 11607944 ...\n $ gdp             : num  5.48e+10 9.13e+09 2.25e+09 5.63e+09 2.61e+09 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 11 10 20 17 20 5 10 20 10 10 ...\n\nsummary(africa_2000)\n\n         country        year      infant_mortality life_expectancy\n Algeria     : 1   Min.   :2000   Min.   : 12.30   Min.   :37.60  \n Angola      : 1   1st Qu.:2000   1st Qu.: 60.80   1st Qu.:51.75  \n Benin       : 1   Median :2000   Median : 80.30   Median :54.30  \n Botswana    : 1   Mean   :2000   Mean   : 78.93   Mean   :56.36  \n Burkina Faso: 1   3rd Qu.:2000   3rd Qu.:103.30   3rd Qu.:60.00  \n Burundi     : 1   Max.   :2000   Max.   :143.30   Max.   :75.00  \n (Other)     :45                                                  \n   fertility       population             gdp               continent \n Min.   :1.990   Min.   :    81154   Min.   :2.019e+08   Africa  :51  \n 1st Qu.:4.150   1st Qu.:  2304687   1st Qu.:1.274e+09   Americas: 0  \n Median :5.550   Median :  8799165   Median :3.238e+09   Asia    : 0  \n Mean   :5.156   Mean   : 15659800   Mean   :1.155e+10   Europe  : 0  \n 3rd Qu.:5.960   3rd Qu.: 17391242   3rd Qu.:8.654e+09   Oceania : 0  \n Max.   :7.730   Max.   :122876723   Max.   :1.329e+11                \n                                                                      \n                       region  \n Eastern Africa           :16  \n Western Africa           :16  \n Middle Africa            : 8  \n Northern Africa          : 6  \n Southern Africa          : 5  \n Australia and New Zealand: 0  \n (Other)                  : 0\n#More plotting\n#  Life Expectancy vs Infant Mortality (Year 2000) --&gt; Plot 1\nggplot(africa_2000, aes(x = infant_mortality, y = life_expectancy)) +\n  geom_point(color = \"pink\", alpha = 0.7) +  # Plot points with transparency\n  labs(\n    title = \"Life Expectancy vs Infant Mortality (Year 2000)\",\n    x = \"Infant Mortality (per 1000 live births)\",\n    y = \"Life Expectancy (years)\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n#  Life Expectancy vs Population Size (Year 2000) --&gt; Plot 2\nggplot(africa_2000, aes(x = population, y = life_expectancy)) +\n  geom_point(color = \"blue\", alpha = 0.7) +  # Plot points with transparency\n  scale_x_log10() +  # Use a log scale for population\n  labs(\n    title = \"Life Expectancy vs Population Size (Year 2000)\",\n    x = \"Population (log scale)\",\n    y = \"Life Expectancy (years)\"\n  ) +\n  theme_minimal()\n#Simple model fits\n#  Life Expectancy as the outcome, Infant Mortality as the predictor --&gt; Fit 1\nfit1 &lt;- lm(life_expectancy ~ infant_mortality, data = africa_2000)\n\n# Printing the summary of model Fit 1\nsummary(fit1)\n\n\nCall:\nlm(formula = life_expectancy ~ infant_mortality, data = africa_2000)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-22.6651  -3.7087   0.9914   4.0408   8.6817 \n\nCoefficients:\n                 Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)      71.29331    2.42611  29.386  &lt; 2e-16 ***\ninfant_mortality -0.18916    0.02869  -6.594 2.83e-08 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.221 on 49 degrees of freedom\nMultiple R-squared:  0.4701,    Adjusted R-squared:  0.4593 \nF-statistic: 43.48 on 1 and 49 DF,  p-value: 2.826e-08\n\n#  Life Expectancy as the outcome, Population Size as the predictor --&gt; Fit 2\nfit2 &lt;- lm(life_expectancy ~ population, data = africa_2000)\n\n# Printing summary of model Fit 2\nsummary(fit2)\n\n\nCall:\nlm(formula = life_expectancy ~ population, data = africa_2000)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-18.429  -4.602  -2.568   3.800  18.802 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 5.593e+01  1.468e+00  38.097   &lt;2e-16 ***\npopulation  2.756e-08  5.459e-08   0.505    0.616    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 8.524 on 49 degrees of freedom\nMultiple R-squared:  0.005176,  Adjusted R-squared:  -0.01513 \nF-statistic: 0.2549 on 1 and 49 DF,  p-value: 0.6159\n## Linear Models and Results\n\n#I fit two linear regression models to quantify the relationships between life expectancy and two predictors: infant mortality and population size. Based on the output this is what I observed \n\n### The 1st model: Life Expectancy vs Infant Mortality\n#- The slope (\\( \\beta_1 = -0.189 \\)) shows that for every additional infant death per 1,000 live births, life expectancy decreases by approximately 0.19 years.\n#- The \\ (p \\)-value (\\ (2.83 \\times 10^ {-8} \\)) indicates this relationship is highly significant.\n#- The \\ (R^2 = 0.47 \\) shows that 47% of the variability in life expectancy is explained by infant mortality.\n\n\n\n### 2nd Model: Life Expectancy vs Population Size\n#- The slope (\\ (\\beta_1 = 2.76 \\times 10^ {-8} \\)) is negligible, and the \\ (p \\)-value (\\( 0.616 \\)) indicates no significant relationship.\n#- The \\ (R^2 = 0.0052 \\) confirms that population size does not explain variability in life expectancy.\n\n\n\n### Conclusion\n# Infant mortality is a strong and significant predictor of life expectancy, while population size shows no meaningful relationship. These results highlight the importance of addressing healthcare and living conditions to improve life expectancy rather than focusing on population size."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#setup",
    "href": "coding-exercise/coding-exercise.html#setup",
    "title": "R Coding Exercise",
    "section": "Setup",
    "text": "Setup\n\n# load dataset \"olives\"\nolive &lt;- dslabs::olive\n\n# view olive structure\nstr(olive)\n\n'data.frame':   572 obs. of  10 variables:\n $ region     : Factor w/ 3 levels \"Northern Italy\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ area       : Factor w/ 9 levels \"Calabria\",\"Coast-Sardinia\",..: 5 5 5 5 5 5 5 5 5 5 ...\n $ palmitic   : num  10.75 10.88 9.11 9.66 10.51 ...\n $ palmitoleic: num  0.75 0.73 0.54 0.57 0.67 0.49 0.66 0.61 0.6 0.55 ...\n $ stearic    : num  2.26 2.24 2.46 2.4 2.59 2.68 2.64 2.35 2.39 2.13 ...\n $ oleic      : num  78.2 77.1 81.1 79.5 77.7 ...\n $ linoleic   : num  6.72 7.81 5.49 6.19 6.72 6.78 6.18 7.34 7.09 6.33 ...\n $ linolenic  : num  0.36 0.31 0.31 0.5 0.5 0.51 0.49 0.39 0.46 0.26 ...\n $ arachidic  : num  0.6 0.61 0.63 0.78 0.8 0.7 0.56 0.64 0.83 0.52 ...\n $ eicosenoic : num  0.29 0.29 0.29 0.35 0.46 0.44 0.29 0.35 0.33 0.3 ...\n\n# view olive summary\nsummary(olive)\n\n            region                 area        palmitic      palmitoleic    \n Northern Italy:151   South-Apulia   :206   Min.   : 6.10   Min.   :0.1500  \n Sardinia      : 98   Inland-Sardinia: 65   1st Qu.:10.95   1st Qu.:0.8775  \n Southern Italy:323   Calabria       : 56   Median :12.01   Median :1.1000  \n                      Umbria         : 51   Mean   :12.32   Mean   :1.2609  \n                      East-Liguria   : 50   3rd Qu.:13.60   3rd Qu.:1.6925  \n                      West-Liguria   : 50   Max.   :17.53   Max.   :2.8000  \n                      (Other)        : 94                                   \n    stearic          oleic          linoleic        linolenic     \n Min.   :1.520   Min.   :63.00   Min.   : 4.480   Min.   :0.0000  \n 1st Qu.:2.050   1st Qu.:70.00   1st Qu.: 7.707   1st Qu.:0.2600  \n Median :2.230   Median :73.03   Median :10.300   Median :0.3300  \n Mean   :2.289   Mean   :73.12   Mean   : 9.805   Mean   :0.3189  \n 3rd Qu.:2.490   3rd Qu.:76.80   3rd Qu.:11.807   3rd Qu.:0.4025  \n Max.   :3.750   Max.   :84.10   Max.   :14.700   Max.   :0.7400  \n                                                                  \n   arachidic       eicosenoic    \n Min.   :0.000   Min.   :0.0100  \n 1st Qu.:0.500   1st Qu.:0.0200  \n Median :0.610   Median :0.1700  \n Mean   :0.581   Mean   :0.1628  \n 3rd Qu.:0.700   3rd Qu.:0.2800  \n Max.   :1.050   Max.   :0.5800  \n                                 \n\n# get region levels\nunique(olive$region)\n\n[1] Southern Italy Sardinia       Northern Italy\nLevels: Northern Italy Sardinia Southern Italy\n\n# get area levels\nunique(olive$area)\n\n[1] North-Apulia    Calabria        South-Apulia    Sicily         \n[5] Inland-Sardinia Coast-Sardinia  Umbria          East-Liguria   \n[9] West-Liguria   \n9 Levels: Calabria Coast-Sardinia East-Liguria ... West-Liguria\n\n\nThe olive dataset contains information on the composition in percentage of eight fatty acids (palmitic, palmitoleic, stearic, oleic, linoleic, linolenic, arachidic, eicosenoic) found in the lipid fraction of 572 Italian olive oils. Olive oils are categorized by general region (Northern Italy, Sardinia, Southern Italy) and area of Italy."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#data-processing",
    "href": "coding-exercise/coding-exercise.html#data-processing",
    "title": "R Coding Exercise",
    "section": "Data processing",
    "text": "Data processing\nSuppose we want to look at the breakdown of eicosenoic composition by region. First, create a new dataset with only the region and eicosenoic variables.\n\n# condense the data to include only information about eicosenoic and region\nolive_red1 &lt;- olive %&gt;%\n  select(region, eicosenoic)"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#data-exploration",
    "href": "coding-exercise/coding-exercise.html#data-exploration",
    "title": "R Coding Exercise",
    "section": "Data exploration",
    "text": "Data exploration\nMake a plot of eicosenoic by region.\n\n# plot eicosenoic by region\nplot(olive_red1$region, olive_red1$eicosenoic)\n\n\n\n\n\n\n\n\nThere appears to be distinct differences in eicosenic by region. Fit a linear regression model using region as a predictor of eicosenoic.\n\n# fit regression model using region as a predictor of eicosenoic\nfit1 &lt;- lm(eicosenoic ~ region, data = olive_red1)\n\n# summarize model\nsummary(fit1)\n\n\nCall:\nlm(formula = eicosenoic ~ region, data = olive_red1)\n\nResiduals:\n      Min        1Q    Median        3Q       Max \n-0.173220 -0.013220  0.000265  0.010612  0.306780 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)           0.0197351  0.0051523   3.830 0.000142 ***\nregionSardinia       -0.0003473  0.0082127  -0.042 0.966280    \nregionSouthern Italy  0.2534847  0.0062415  40.613  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.06331 on 569 degrees of freedom\nMultiple R-squared:  0.7986,    Adjusted R-squared:  0.7979 \nF-statistic:  1128 on 2 and 569 DF,  p-value: &lt; 2.2e-16\n\n\nThe coefficient estimate for the Sardinia region is \\(-0.00035\\) with a corresponding p-value of \\(0.966\\), which suggests that olive oil from this region does not differ from the reference region level, Northern Italy, in eicisenoic composition.\nThe coefficient estimate for the region Southern Italy is \\(0.253\\) with a corresponding p-value of \\(&lt;0.001\\), which suggests that olive oil from this region has increased eicisenoic composition over the reference region level, Northern Italy.\nNow, look at eicosenoic composition by oleic composition, stratified by region.\n\n# create a dataset with region, oleic, and eicosenoic\nolive_red2 &lt;- olive %&gt;%\n  select(region, oleic, eicosenoic)\n\nplot(olive_red2$oleic, olive$eicosenoic, col = olive$region)\nlegend(\"topleft\", \n       legend = unique(olive$region), \n       col = unique(olive$region), \n       pch=1,\n       cex = 0.7)\n\n\n\n\n\n\n\n\nThere are distinct clusters by region observed in the data. Specifically, in olive oil from Southern Italy, there seems to be increased eicosenic composition over Sardinia and Northern Italy. Additionally, there appears to be a positive association between oleic composition and eicoenic composition in Southern Italy.\nFit a regression model using oleic as a predictor of eicosenoic in the region of Southern Italy.\n\n# filter data to include only oil from Southern Italy\nolive_red3 &lt;- olive_red2 %&gt;%\n  filter(region == \"Southern Italy\")\n\n# fit regression model using oleic as a predictor of eicosenoic in oil from Southern Italy\nfit2 &lt;- lm(eicosenoic ~ oleic, data = olive_red3)\n\n# summarize model\nsummary(fit2)\n\n\nCall:\nlm(formula = eicosenoic ~ oleic, data = olive_red3)\n\nResiduals:\n      Min        1Q    Median        3Q       Max \n-0.167244 -0.056046 -0.005071  0.050180  0.237070 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -0.369575   0.089526  -4.128 4.67e-05 ***\noleic        0.009053   0.001259   7.188 4.63e-12 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.078 on 321 degrees of freedom\nMultiple R-squared:  0.1387,    Adjusted R-squared:  0.136 \nF-statistic: 51.67 on 1 and 321 DF,  p-value: 4.625e-12\n\n\nThe coefficient estimate for oleic composition is \\(0.009\\) with a corresponding p-value of \\(&lt;0.001\\), which suggests that in olive oil from Southern Italy, there is a small positive association between oleic composition and eicisenoic composition."
  },
  {
    "objectID": "aboutme.html",
    "href": "aboutme.html",
    "title": "About me",
    "section": "",
    "text": "The Roadmap of My Academic and Career Journey !\n\nHi there! I’m Asmith Joseph, a 3rd-year Ph.D. student in Epidemiology and Biostatistics and a researcher at the Global Health Institute. Originally from sunny Tampa, Florida, my academic adventure began with a bachelor’s degree in health sciences and public health. Along the way, I explored my love for languages by earning a Master’s in French and Applied Linguistics at the University of South Florida. To top it off, I completed my Master of Public Health in Epidemiology at Florida International University.\nMy passion lies in unraveling the complexities of infectious diseases, especially HIV-tuberculosis co-infection in low- to middle-income countries. My research aims to improve tuberculosis treatments, enhance control strategies, and address the reproductive health challenges faced by those affected. I have worn many hats in the field of public health. As an ORISE Fellow at the CDC, I tackled evaluation activities that helped drive meaningful change. Before that, I served as an Epidemiologist with the Emerging Infections Program at Emory University, focusing on surveillance for influenza, respiratory syncytial virus, and SARS-CoV-2 in Atlanta. My journey also includes time as a Clinical Research Coordinator at the University of South Florida and the University of Miami. There, I managed multiple clinical studies, including trials on HIV/AIDS, hereditary breast and ovarian cancer, cognitive performance in older adults, and tobacco cessation. Through it all, my goal has been clear: to combine science, data, and human connection to make a global impact on health.\n\n\nMy Data Adventure (So Far!)\nThroughout my educational and professional journey, I’ve had the opportunity to explore various data and software tools. While I wouldn’t call myself an expert (far from it), I’ve developed a fundamental working knowledge of statistical and data analysis tools. I’ve used SAS, SPSS, EpiInfo, RedCap, Python, and R to analyze and manage datasets, and for qualitative work, I’ve worked with Dedoose and Qualtrics to navigate survey data and thematic analysis. I’m the first to admit there’s plenty of room for growth. That’s why I’m eager to dive into a Modern Applied Data Analysis course, where I aim to build more vigorous modeling, data visualization, and practical analytics skills. I desire to move beyond the basics and gain confidence in applying these techniques to solve real-world problems. For me, data analysis is a learning process—challenging but always rewarding when the results come together.\n\n\nBeyond the Books: My Passion in the Kitchen\nCooking is my happy place. I love experimenting with new recipes, blending flavors, and creating something delicious from scratch. It’s my ultimate stress reliever (and let’s be honest, much needed during this rollercoaster of a PhD journey!).\nOnce I finally wrap up this chapter of academia, I dream of taking my love for cooking to the next level by attending culinary school. And if I’m dreaming big, because why not? I’d love to study in Paris or Italy, soaking in the rich food culture and learning from the best.\nSure, it’s a far-fetched idea, but I’ve always believed in aiming high. Whether it’s unraveling the complexities of epidemiology or perfecting the art of a soufflé, I’m determined to chase the things that light me up inside.\nFor now, I’ll keep practicing in my kitchen, dreaming of the day I can create dishes worthy of a chef—or at the very least, wow my friends with a picture-perfect crème brûlée. Until then, it’s just me, my whisk, and my PhD—tackling one challenge at a time!"
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html",
    "href": "cdcdata-exercise/cdcdata-exercise.html",
    "title": "Exercise 5: Processing Data (CDC)",
    "section": "",
    "text": "The National Artesunate for Severe Malaria Program Case Report Data (April - December 2019) provides deidentified patient data on individuals receiving intravenous (IV) artesunate, the first-line treatment for severe malaria. Collected through the Centers for Disease Control and Prevention (CDC), this dataset contains 197 observations and 119 clinical variables, detailing malaria diagnosis methods, organ dysfunction indicators, laboratory values, and treatment responses. Each patient is assigned a unique ParticipantID, which allows linkage to related datasets, including Artesun ate Dosing Data, Follow-On Antimalarial Dosing Data, and Microscopy (Parasitemia) Data. The dataset, last updated on April 10, 2020, is publicly available on the CDC open data portal (https://data.cdc.gov/Global-Health/National-Artesunate-for-Severe-Malaria-Program-Cas/igaz-icki/about_data). Key variables include Dx (diagnosis method), IV_parasitemia (malaria confirmation), IV_shock (shock status), IV_ards (Acute Respiratory Distress Syndrome), IV_ARF (Acute Renal Failure), and IV_DIC (Disseminated Intravascular Coagulation). Additionally, it includes a Data Dictionary and a Guide to NASMP Datasets, offering comprehensive documentation for analysis."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#this-part-was-contributed-by-murtaza-yaqubi.",
    "href": "cdcdata-exercise/cdcdata-exercise.html#this-part-was-contributed-by-murtaza-yaqubi.",
    "title": "Exercise 5: Processing Data (CDC)",
    "section": "This part was contributed by Murtaza Yaqubi.",
    "text": "This part was contributed by Murtaza Yaqubi.\nIt’s a good practice to install and load the necessary packages for analysis.\n\nlibrary(dplyr)\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.4.2\n\n\nWarning: package 'purrr' was built under R version 4.4.2\n\n\nWarning: package 'lubridate' was built under R version 4.4.2\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ lubridate 1.9.4     ✔ tibble    3.2.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter()  masks stats::filter()\n✖ purrr::flatten() masks jsonlite::flatten()\n✖ dplyr::lag()     masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggplot2)\n\n\nGenerating synthetic data frame.\nI created a synthetic data frame to replicate the analysis of the dataset above. To achieve this, I used the results of the original analysis to attempt to replicate the original dataset with its corresponding results. I began by setting a seed for reproducibility. Next, I defined the number of observations before introducing the codes for the variables in the data frame. The data frame contains two categorical variables and five continuous variables. These variables are Patient_ID, Condition, TreatmentGiven, BreathCount, Fever, Tachycardia, and Hypoglycemia.\n\n# Set seed for reproducibility\nset.seed(123)\n\n# Define number of observations\nn &lt;- 197\n\n# Generate synthetic dataset\nHealthSynthetic &lt;- data.frame(\n  # Unique Patient ID\n  Patient_ID = 1:n,\n  \n  # Categorical Variables (pneumonia and bronchitis)\n  Condition = sample(c(\"Pneumonia\", \"Bronchitis\"), n, replace = TRUE, prob = c(0.2487, 0.7513)),\n  \n  TreatmentGiven = sample(c(0, 1, NA), n, replace = TRUE, prob = c(0.1269, 0.7919, 0.0812)),\n  \n  # Continuous Variables (breath count, fever, tachycardia, hypoglycemia)\n  BreathCount = round(rnorm(n, mean = 13.98141, sd = 11.31289)),\n  \n  Fever = sample(c(0, 1, NA), n, replace = TRUE, prob = c(0.90, 0.05, 0.05)), \n  \n  Tachycardia = sample(c(0, 1, NA), n, replace = TRUE, prob = c(0.50, 0.45, 0.05)),  \n  \n  Hypoglycemia = sample(c(0, 1, NA), n, replace = TRUE, prob = c(0.75, 0.20, 0.05))  \n)\n\n# View the first few rows\nhead(HealthSynthetic)\n\n  Patient_ID  Condition TreatmentGiven BreathCount Fever Tachycardia\n1          1 Bronchitis              1           0     0           1\n2          2  Pneumonia              1           7    NA           0\n3          3 Bronchitis              1           1    NA           0\n4          4  Pneumonia              1          39     0           0\n5          5  Pneumonia             NA          29     0           0\n6          6 Bronchitis              1          11     0           0\n  Hypoglycemia\n1            0\n2            1\n3            1\n4            0\n5            0\n6            1\n\n# Summary statistics\nsummary(HealthSynthetic)\n\n   Patient_ID   Condition         TreatmentGiven    BreathCount    \n Min.   :  1   Length:197         Min.   :0.0000   Min.   :-14.00  \n 1st Qu.: 50   Class :character   1st Qu.:1.0000   1st Qu.:  7.00  \n Median : 99   Mode  :character   Median :1.0000   Median : 14.00  \n Mean   : 99                      Mean   :0.8833   Mean   : 14.34  \n 3rd Qu.:148                      3rd Qu.:1.0000   3rd Qu.: 22.00  \n Max.   :197                      Max.   :1.0000   Max.   : 43.00  \n                                  NA's   :17                       \n     Fever          Tachycardia      Hypoglycemia   \n Min.   :0.00000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.00000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.00000   Median :0.0000   Median :0.0000  \n Mean   :0.04839   Mean   :0.4607   Mean   :0.1809  \n 3rd Qu.:0.00000   3rd Qu.:1.0000   3rd Qu.:0.0000  \n Max.   :1.00000   Max.   :1.0000   Max.   :1.0000  \n NA's   :11        NA's   :6        NA's   :9       \n\n# Check structure\nstr(HealthSynthetic)\n\n'data.frame':   197 obs. of  7 variables:\n $ Patient_ID    : int  1 2 3 4 5 6 7 8 9 10 ...\n $ Condition     : chr  \"Bronchitis\" \"Pneumonia\" \"Bronchitis\" \"Pneumonia\" ...\n $ TreatmentGiven: num  1 1 1 1 NA 1 1 1 0 1 ...\n $ BreathCount   : num  0 7 1 39 29 11 20 9 9 5 ...\n $ Fever         : num  0 NA NA 0 0 0 0 0 0 0 ...\n $ Tachycardia   : num  1 0 0 0 0 0 0 1 0 1 ...\n $ Hypoglycemia  : num  0 1 1 0 0 1 0 0 0 0 ...\n\n\n\n\nSummary statistics:\nI generated the summary statistics for both categorical and continuous variables by leveraging loop functions. This approach allowed me to efficiently apply the same set of operations to multiple variables without repeating large chunks of code, thus streamlining the analysis process and minimizing the risk of errors.\n\nlibrary(tidyverse)\n\n# Before producing summary tables, I have to convert \"Condition\" and \"TreatmentGiven\" to factors from characters.   \nHealthSynthetic &lt;- HealthSynthetic %&gt;% \n  mutate(Condition = as.factor(Condition), TreatmentGiven = as.factor(TreatmentGiven))\n\n# Categorical Variables Summary\ncategorical_vars &lt;- c(\"Condition\", \"TreatmentGiven\")\n\ncategorical_summary &lt;- function(df, var) {\n  df %&gt;%\n    group_by(.data[[var]]) %&gt;%\n    summarise(Count = n(), Percentage = (n() / nrow(df)) * 100)\n}\n\n# Compute summaries for categorical variables\ncat_summary_list &lt;- lapply(categorical_vars, function(var) categorical_summary(HealthSynthetic, var))\n\n# Print categorical summaries\nnames(cat_summary_list) &lt;- categorical_vars\nprint(cat_summary_list)\n\n$Condition\n# A tibble: 2 × 3\n  Condition  Count Percentage\n  &lt;fct&gt;      &lt;int&gt;      &lt;dbl&gt;\n1 Bronchitis   150       76.1\n2 Pneumonia     47       23.9\n\n$TreatmentGiven\n# A tibble: 3 × 3\n  TreatmentGiven Count Percentage\n  &lt;fct&gt;          &lt;int&gt;      &lt;dbl&gt;\n1 0                 21      10.7 \n2 1                159      80.7 \n3 &lt;NA&gt;              17       8.63\n\n# Continuous Variables Summary\ncontinuous_vars &lt;- c(\"Patient_ID\", \"BreathCount\", \"Fever\", \"Tachycardia\", \"Hypoglycemia\")\n\ncontinuous_summary &lt;- HealthSynthetic %&gt;%\n  select(where(is.numeric)) %&gt;%  # Select only numeric variables\n  summarise_all(list(\n    mean = ~mean(., na.rm = TRUE),\n    sd = ~sd(., na.rm = TRUE),\n    min = ~min(., na.rm = TRUE),\n    q25 = ~quantile(., 0.25, na.rm = TRUE),\n    median = ~median(., na.rm = TRUE),\n    q75 = ~quantile(., 0.75, na.rm = TRUE),\n    max = ~max(., na.rm = TRUE)\n  ))\n\n# Print continuous summary\nprint(continuous_summary)\n\n  Patient_ID_mean BreathCount_mean Fever_mean Tachycardia_mean\n1              99          14.3401  0.0483871         0.460733\n  Hypoglycemia_mean Patient_ID_sd BreathCount_sd Fever_sd Tachycardia_sd\n1         0.1808511      57.01316       11.30789 0.215162      0.4997657\n  Hypoglycemia_sd Patient_ID_min BreathCount_min Fever_min Tachycardia_min\n1       0.3859225              1             -14         0               0\n  Hypoglycemia_min Patient_ID_q25 BreathCount_q25 Fever_q25 Tachycardia_q25\n1                0             50               7         0               0\n  Hypoglycemia_q25 Patient_ID_median BreathCount_median Fever_median\n1                0                99                 14            0\n  Tachycardia_median Hypoglycemia_median Patient_ID_q75 BreathCount_q75\n1                  0                   0            148              22\n  Fever_q75 Tachycardia_q75 Hypoglycemia_q75 Patient_ID_max BreathCount_max\n1         0               1                0            197              43\n  Fever_max Tachycardia_max Hypoglycemia_max\n1         1               1                1\n\n\n\n\nPlotting the data:\nI used loop functions to generate bar plots for both categorical and continuous variables, enabling me to efficiently apply the same plotting logic to multiple variables without duplicating code. This approach streamlined the visualization process and made the code more compact and manageable.\n\n# Function to plot categorical variable distribution\nplot_categorical &lt;- function(df, var) {\n  ggplot(df, aes(x = as.factor(.data[[var]]))) +\n    geom_bar(aes(y = (..count..) / sum(..count..)), fill = \"purple\", alpha = 0.8) +\n    scale_y_continuous(labels = scales::percent_format()) +\n    labs(title = paste(\"Distribution of\", var), y = \"Percentage\", x = var) +\n    theme_minimal()\n}\n\n# Categorical variables\ncategorical_vars &lt;- c(\"Condition\", \"TreatmentGiven\")\n\n# Generating bar charts\nfor (var in categorical_vars) {\n  print(plot_categorical(HealthSynthetic, var))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Function to plot histogram and density curve\nplot_histogram &lt;- function(df, var) {\n  ggplot(df, aes(x = .data[[var]])) +\n    geom_histogram(aes(y = ..density..), bins = 20, fill = \"steelblue\", alpha = 0.7) +\n    geom_density(color = \"orange\", size = 1) +\n    labs(title = paste(\"Distribution of\", var), x = var, y = \"Density\") +\n    theme_minimal()\n}\n\n# Continuous variables\nnumeric_vars &lt;- names(HealthSynthetic %&gt;% select(where(is.numeric)))\n\n\n# Plot continuous variables\nfor (var in numeric_vars) {  \n  print(plot_histogram(HealthSynthetic, var))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning: Removed 11 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\nWarning: Removed 11 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\n\n\nWarning: Removed 6 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\nWarning: Removed 6 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\n\n\nWarning: Removed 9 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\nWarning: Removed 9 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\n\n\nNote: The reason my synthetic data frame appears almost identical to the original dataset is that I used the results of the original dataset to create my synthetic data frame. My objective was to replicate the original dataset’s results as closely as possible. I utilized ChatGpt to assist me in this process. It involved numerous trials and errors, along with prompting, to achieve the desired outcome. Additionally, I gained valuable insights from Asmith’s code during this exercise. Notably, I was introduced to a looping function that I copied for my analysis, which not only made my code look cleaner but also eliminated the need to add large chunks of code. I found looping functions particularly useful in plotting and creating a summary table for the variables of interest in this exercise."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My website and data analysis portfolio",
    "section": "",
    "text": "Feel free to change the text below any way you want 😁!\n\nHello\n\nAnd hello again\nWelcome to my website and data analysis portfolio.\n\nPlease use the Menu Bar above to look around.\nHave fun!"
  },
  {
    "objectID": "starter-analysis-exercise/code/analysis-code/readme.html",
    "href": "starter-analysis-exercise/code/analysis-code/readme.html",
    "title": "Asmith Joseph Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory analysis and statistical analysis on the processed/cleaned data. The code produces a few tables and figures, which are saved in the results folder.\nIt’s the same code done 3 times:\n\nFirst, there is an R script that you can run which does all the computations.\nSecond, there is a Quarto file which contains exactly the same code as the R script.\nThird, my current favorite, is a Quarto file with an approach where the code is pulled in from the R script and run.\n\nThe last version has the advantage of having code in one place for easy writing/debugging, and then being able to pull the code into the Quarto file for a nice combination of text/commentary and code.\nEach way of doing this is a reasonable approach, pick whichever one you prefer or makes the most sense for your setup. Whichever approach you choose, add ample documentation/commentary so you and others can easily understand what’s going on and what is done."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/readme.html",
    "href": "starter-analysis-exercise/code/eda-code/readme.html",
    "title": "Asmith Joseph Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory data analysis (EDA) on the processed/cleaned data. The code produces a few tables and figures, which are saved in the appropriate results sub-folder."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/readme.html",
    "href": "starter-analysis-exercise/code/processing-code/readme.html",
    "title": "Asmith Joseph Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code for processing data.\nCurrently, there is just a single Quarto file to illustrate how the processing can look like.\nInstead of a Quarto file that contains code, it is also possible to use R scripts or a combination of R scripts and Quarto code. Those approaches are illustrated in the full dataanalysis-template repository."
  },
  {
    "objectID": "starter-analysis-exercise/data/raw-data/readme.html",
    "href": "starter-analysis-exercise/data/raw-data/readme.html",
    "title": "Asmith Joseph Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains a simple made-up data-set in an Excel file.\nIt contains the variables Height, Weight and Gender of a few imaginary individuals.\nThe dataset purposefully contains some faulty entries that need to be cleaned.\nGenerally, any dataset should contain some meta-data explaining what each variable in the dataset is. (This is often called a Codebook.) For this simple example, the codebook is given as a second sheet in the Excel file.\nThis raw data-set should generally not be edited by hand. It should instead be loaded and processed/cleaned using code."
  },
  {
    "objectID": "starter-analysis-exercise/products/readme.html",
    "href": "starter-analysis-exercise/products/readme.html",
    "title": "Asmith Joseph Data Analysis Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all the products of your project.\nFor a classical academic project, this will be a peer-reviewed manuscript, and should be placed into a manuscript folder.\nFor our case, since we’ll want to put it on the website, we call it a report.\nOften you need a library of references in bibtex format, as well as a CSL style file that determines reference formatting. Since those files might be used by several of the products, I’m placing them in the main products folder. Feel free to re-organize."
  },
  {
    "objectID": "starter-analysis-exercise/results/figures/readme.html",
    "href": "starter-analysis-exercise/results/figures/readme.html",
    "title": "Asmith Joseph Data Analysis Portfolio",
    "section": "",
    "text": "Folder for all figures.\nYou can create further sub-folders if that makes sense."
  },
  {
    "objectID": "starter-analysis-exercise/results/tables-files/readme.html",
    "href": "starter-analysis-exercise/results/tables-files/readme.html",
    "title": "Asmith Joseph Data Analysis Portfolio",
    "section": "",
    "text": "Folder for all tables (generally stored as Rds files) and other files.\nYou can create further sub-folders if that makes sense."
  }
]