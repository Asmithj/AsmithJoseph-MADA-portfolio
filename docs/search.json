[
  {
    "objectID": "ml-models-exercise/ml-models-exercise.html",
    "href": "ml-models-exercise/ml-models-exercise.html",
    "title": "Machine Learning Models 1",
    "section": "",
    "text": "# Load necessary packages\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidymodels)  # for modeling and data splitting\n\nWarning: package 'tidymodels' was built under R version 4.4.2\n\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.3.0 ──\n\n\n✔ broom        1.0.8     ✔ rsample      1.2.1\n✔ dials        1.4.0     ✔ tibble       3.2.1\n✔ ggplot2      3.5.1     ✔ tidyr        1.3.1\n✔ infer        1.0.7     ✔ tune         1.3.0\n✔ modeldata    1.4.0     ✔ workflows    1.2.0\n✔ parsnip      1.3.0     ✔ workflowsets 1.1.0\n✔ purrr        1.0.4     ✔ yardstick    1.3.2\n✔ recipes      1.1.1     \n\n\nWarning: package 'dials' was built under R version 4.4.2\n\n\nWarning: package 'scales' was built under R version 4.4.2\n\n\nWarning: package 'ggplot2' was built under R version 4.4.3\n\n\nWarning: package 'infer' was built under R version 4.4.2\n\n\nWarning: package 'modeldata' was built under R version 4.4.2\n\n\nWarning: package 'parsnip' was built under R version 4.4.2\n\n\nWarning: package 'purrr' was built under R version 4.4.2\n\n\nWarning: package 'recipes' was built under R version 4.4.2\n\n\nWarning: package 'rsample' was built under R version 4.4.3\n\n\nWarning: package 'tune' was built under R version 4.4.2\n\n\nWarning: package 'workflows' was built under R version 4.4.2\n\n\nWarning: package 'workflowsets' was built under R version 4.4.2\n\n\nWarning: package 'yardstick' was built under R version 4.4.2\n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ purrr::discard() masks scales::discard()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\n✖ recipes::step()  masks stats::step()\n\nlibrary(ggplot2)     # for visualization\nlibrary(here)        # for managing file paths\n\nWarning: package 'here' was built under R version 4.4.2\n\n\nhere() starts at C:/Users/ajose35/Desktop/MADA-course/AsmithJoseph-MADA-portfolio\n\nlibrary(corrplot)\n\nWarning: package 'corrplot' was built under R version 4.4.2\n\n\ncorrplot 0.95 loaded\n\nlibrary(ranger)      # for random forest via ranger\n\nWarning: package 'ranger' was built under R version 4.4.3\n\nlibrary(glmnet)      # for LASSO via glmnet\n\nWarning: package 'glmnet' was built under R version 4.4.3\n\n\nLoading required package: Matrix\n\n\nWarning: package 'Matrix' was built under R version 4.4.3\n\n\n\nAttaching package: 'Matrix'\n\n\nThe following objects are masked from 'package:tidyr':\n\n    expand, pack, unpack\n\n\nLoaded glmnet 4.1-8\n\nlibrary(readr)       # for reading CSV files\n\nWarning: package 'readr' was built under R version 4.4.2\n\n\n\nAttaching package: 'readr'\n\n\nThe following object is masked from 'package:yardstick':\n\n    spec\n\n\nThe following object is masked from 'package:scales':\n\n    col_factor\n\n# Set up output folder using the here package\noutput_folder &lt;- here::here(\"ml-models-exercise\")\nif (!dir.exists(output_folder)) {\n  dir.create(output_folder, recursive = TRUE)\n}\nrds_file_path &lt;- file.path(output_folder, \"clean_data.rds\")\n\n# Preliminaries: Set a random seed for reproducibility\nset.seed(1234)\n\n# Load the clean data from the RDS file\nclean_data &lt;- readRDS(rds_file_path)\n\n# Verify the loaded data\nstr(clean_data)\n\ntibble [120 × 6] (S3: tbl_df/tbl/data.frame)\n $ Y   : num [1:120] 2691 2639 2150 1789 3126 ...\n $ DOSE: num [1:120] 25 25 25 25 25 25 25 25 25 25 ...\n $ AGE : num [1:120] 42 24 31 46 41 27 23 20 23 28 ...\n $ SEX : Factor w/ 2 levels \"1\",\"2\": 1 1 1 2 2 1 1 1 1 1 ...\n $ WT  : num [1:120] 94.3 80.4 71.8 77.4 64.3 ...\n $ HT  : num [1:120] 1.77 1.76 1.81 1.65 1.56 ...\n\nprint(colnames(clean_data))\n\n[1] \"Y\"    \"DOSE\" \"AGE\"  \"SEX\"  \"WT\"   \"HT\""
  },
  {
    "objectID": "ml-models-exercise/ml-models-exercise.html#model-fitting",
    "href": "ml-models-exercise/ml-models-exercise.html#model-fitting",
    "title": "Machine Learning Models 1",
    "section": "Model Fitting",
    "text": "Model Fitting\nBelow is the code I wrote to fit my three models—a linear regression using all predictors, a LASSO regression (with penalty = 0.1), and a random forest—using the entire dataset (no train/test split) and then making predictions and computing the RMSE for each model. I also generate an observed versus predicted plot for each model.\n\n# Set seed for reproducibility\nset.seed(1234)\n\n\n\n# Model 1: Linear Regression with all predictors\nlm_recipe &lt;- recipe(Y ~ DOSE + AGE + SEX + RACE + WT + HT, \n                    data = Mav.final_data_selected)\nlm_model &lt;- linear_reg() %&gt;%\n  set_engine(\"lm\") %&gt;%\n  set_mode(\"regression\")\nlm_workflow &lt;- workflow() %&gt;%\n  add_model(lm_model) %&gt;%\n  add_recipe(lm_recipe)\nlm_fit &lt;- lm_workflow %&gt;% fit(data = Mav.final_data_selected)\nlm_predictions &lt;- predict(lm_fit, new_data = Mav.final_data_selected) %&gt;%\n  bind_cols(Mav.final_data_selected)\nlm_rmse &lt;- rmse(lm_predictions, truth = Y, estimate = .pred)\nprint(\"Linear Model RMSE:\")\n\n[1] \"Linear Model RMSE:\"\n\nprint(lm_rmse)\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard       1183.\n\nggplot(lm_predictions, aes(x = Y, y = .pred)) +\n  geom_point() +\n  geom_abline(slope = 1, intercept = 0, linetype = \"dashed\") +\n  labs(title = \"Linear Model: Observed vs. Predicted\",\n       x = \"Observed Y\", y = \"Predicted Y\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nModel 2: LASSO Regression\n\n# Model 2: LASSO Regression (penalty = 0.1, mixture = 1 for LASSO)\nlasso_recipe &lt;- recipe(Y ~ DOSE + AGE + SEX + RACE + WT + HT, \n                       data = Mav.final_data_selected) %&gt;%\n  step_dummy(all_nominal_predictors())\n\nlasso_model &lt;- linear_reg(penalty = 0.1, mixture = 1) %&gt;% \n  set_engine(\"glmnet\") %&gt;% \n  set_mode(\"regression\")\n\nlasso_workflow &lt;- workflow() %&gt;%\n  add_model(lasso_model) %&gt;%\n  add_recipe(lasso_recipe)\n\nlasso_fit &lt;- lasso_workflow %&gt;% fit(data = Mav.final_data_selected)\n\nModel 3: Random Forest using ranger\n\n# Model 3: Random Forest using ranger (with seed = 1234)\nrf_recipe &lt;- recipe(Y ~ DOSE + AGE + SEX + RACE + WT + HT, \n                    data = Mav.final_data_selected)\nrf_model &lt;- rand_forest() %&gt;% \n  set_engine(\"ranger\", seed = 1234) %&gt;%\n  set_mode(\"regression\")\nrf_workflow &lt;- workflow() %&gt;%\n  add_model(rf_model) %&gt;%\n  add_recipe(rf_recipe)\nrf_fit &lt;- rf_workflow %&gt;% fit(data = Mav.final_data_selected)\nrf_predictions &lt;- predict(rf_fit, new_data = Mav.final_data_selected) %&gt;%\n  bind_cols(Mav.final_data_selected)\nrf_rmse &lt;- rmse(rf_predictions, truth = Y, estimate = .pred)\nprint(\"Random Forest Model RMSE:\")\n\n[1] \"Random Forest Model RMSE:\"\n\nprint(rf_rmse)\n\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard        583.\n\nggplot(rf_predictions, aes(x = Y, y = .pred)) +\n  geom_point() +\n  geom_abline(slope = 1, intercept = 0, linetype = \"dashed\") +\n  labs(title = \"Random Forest: Observed vs. Predicted\",\n       x = \"Observed Y\", y = \"Predicted Y\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nI encountered an error because glmnet expects a numeric matrix, so I needed to convert my factor variables (SEX and RACE) into dummy variables. I fixed this by adding the step_dummy(all_nominal_predictors()) in my recipe. Then, when selecting the best penalty, I used the named argument metric = “rmse” in the select_best() function to avoid the error about the extra argument. This updated code now properly tunes the LASSO model.  I found that my linear model produced an RMSE of about 1183, while the random forest model achieved a much lower RMSE of around 582. When I examined the observed versus predicted plots, I noticed that the linear model’s predictions were more scattered around the diagonal—indicating larger residuals—whereas the random forest’s predictions clustered closely along the 45° line. This tells me that the random forest captures much more of the variability in Y and yields more accurate predictions than the linear model."
  },
  {
    "objectID": "tidytuesday-exercise/tidytuesday-exercise.html",
    "href": "tidytuesday-exercise/tidytuesday-exercise.html",
    "title": "Tidy Tuesday Exercise",
    "section": "",
    "text": "# Load the necessary libraries\nlibrary(here)\n\nWarning: package 'here' was built under R version 4.4.2\n\n\nhere() starts at C:/Users/ajose35/Desktop/MADA-course/AsmithJoseph-MADA-portfolio\n\nlibrary(readr)\n\nWarning: package 'readr' was built under R version 4.4.2\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.4.3\n\nlibrary(knitr)\n\nWarning: package 'knitr' was built under R version 4.4.3\n\nlibrary(maps)\n\nWarning: package 'maps' was built under R version 4.4.3\n\nlibrary(tidyr)\nlibrary(tidymodels)\n\nWarning: package 'tidymodels' was built under R version 4.4.2\n\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.3.0 ──\n\n\n✔ broom        1.0.8     ✔ rsample      1.2.1\n✔ dials        1.4.0     ✔ tibble       3.2.1\n✔ infer        1.0.7     ✔ tune         1.3.0\n✔ modeldata    1.4.0     ✔ workflows    1.2.0\n✔ parsnip      1.3.0     ✔ workflowsets 1.1.0\n✔ purrr        1.0.4     ✔ yardstick    1.3.2\n✔ recipes      1.1.1     \n\n\nWarning: package 'dials' was built under R version 4.4.2\n\n\nWarning: package 'scales' was built under R version 4.4.2\n\n\nWarning: package 'infer' was built under R version 4.4.2\n\n\nWarning: package 'modeldata' was built under R version 4.4.2\n\n\nWarning: package 'parsnip' was built under R version 4.4.2\n\n\nWarning: package 'purrr' was built under R version 4.4.2\n\n\nWarning: package 'recipes' was built under R version 4.4.2\n\n\nWarning: package 'rsample' was built under R version 4.4.3\n\n\nWarning: package 'tune' was built under R version 4.4.2\n\n\nWarning: package 'workflows' was built under R version 4.4.2\n\n\nWarning: package 'workflowsets' was built under R version 4.4.2\n\n\nWarning: package 'yardstick' was built under R version 4.4.3\n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ purrr::discard()  masks scales::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ dplyr::lag()      masks stats::lag()\n✖ purrr::map()      masks maps::map()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n\nlibrary(vip)\n\nWarning: package 'vip' was built under R version 4.4.3\n\n\n\nAttaching package: 'vip'\n\n\nThe following object is masked from 'package:utils':\n\n    vi\n\nlibrary(tidymodels)\nlibrary(yardstick)\nlibrary(tibble)\nlibrary(gt)\n\nWarning: package 'gt' was built under R version 4.4.2\n\n\n\nPart 1: Importing & Reading the Dataset\n\n# Defining the raw URL for the CSV file\nraw_url &lt;- \"https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-04-08/care_state.csv\"\n\n# Read the CSV file directly from the URL\ncare_state &lt;- read_csv(raw_url)\n\nRows: 1232 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): state, condition, measure_id, measure_name, footnote\ndbl  (1): score\ndate (2): start_date, end_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Display the first few rows of the data\nhead(care_state)\n\n# A tibble: 6 × 8\n  state condition   measure_id measure_name score footnote start_date end_date  \n  &lt;chr&gt; &lt;chr&gt;       &lt;chr&gt;      &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt;    &lt;date&gt;     &lt;date&gt;    \n1 AK    Healthcare… HCP_COVID… Percentage …   7.3 &lt;NA&gt;     2024-01-01 2024-03-31\n2 AK    Healthcare… IMM_3      Healthcare …  80   &lt;NA&gt;     2023-10-01 2024-03-31\n3 AK    Emergency … OP_18b     Average (me… 140   25, 26   2023-04-01 2024-03-31\n4 AK    Emergency … OP_18b_HI… Average tim… 157   25, 26   2023-04-01 2024-03-31\n5 AK    Emergency … OP_18b_LO… Average tim… 136   25, 26   2023-04-01 2024-03-31\n6 AK    Emergency … OP_18b_ME… Average tim… 136   25, 26   2023-04-01 2024-03-31\n\n\n\n\n# A tibble: 1,232 × 8\n   state condition  measure_id measure_name score footnote start_date end_date  \n   &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt;    &lt;date&gt;     &lt;date&gt;    \n 1 AK    Healthcar… HCP_COVID… Percentage …   7.3 &lt;NA&gt;     2024-01-01 2024-03-31\n 2 AK    Healthcar… IMM_3      Healthcare …  80   &lt;NA&gt;     2023-10-01 2024-03-31\n 3 AK    Emergency… OP_18b     Average (me… 140   25, 26   2023-04-01 2024-03-31\n 4 AK    Emergency… OP_18b_HI… Average tim… 157   25, 26   2023-04-01 2024-03-31\n 5 AK    Emergency… OP_18b_LO… Average tim… 136   25, 26   2023-04-01 2024-03-31\n 6 AK    Emergency… OP_18b_ME… Average tim… 136   25, 26   2023-04-01 2024-03-31\n 7 AK    Emergency… OP_18b_VE… Average tim…  NA   25, 26   2023-04-01 2024-03-31\n 8 AK    Emergency… OP_18c     Average (me… 196   25       2023-04-01 2024-03-31\n 9 AK    Emergency… OP_18c_HI… Average tim… 230   25       2023-04-01 2024-03-31\n10 AK    Emergency… OP_18c_LO… Average tim… 182   25       2023-04-01 2024-03-31\n# ℹ 1,222 more rows\n\n\n\n\nPart 2: Exploratory Data Analysis\n\n# Define the raw URL for the CSV file\nraw_url &lt;- \"https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-04-08/care_state.csv\"\n\n# Read the CSV data directly from the URL\ncare_state &lt;- read_csv(raw_url)\n\nRows: 1232 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): state, condition, measure_id, measure_name, footnote\ndbl  (1): score\ndate (2): start_date, end_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Check the structure and summary of the data\nstr(care_state)\n\nspc_tbl_ [1,232 × 8] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ state       : chr [1:1232] \"AK\" \"AK\" \"AK\" \"AK\" ...\n $ condition   : chr [1:1232] \"Healthcare Personnel Vaccination\" \"Healthcare Personnel Vaccination\" \"Emergency Department\" \"Emergency Department\" ...\n $ measure_id  : chr [1:1232] \"HCP_COVID_19\" \"IMM_3\" \"OP_18b\" \"OP_18b_HIGH_MIN\" ...\n $ measure_name: chr [1:1232] \"Percentage of healthcare personnel who are up to date with COVID-19 vaccinations\" \"Healthcare workers given influenza vaccination Higher percentages are better\" \"Average (median) time patients spent in the emergency department before leaving from the visit A lower number o\"| __truncated__ \"Average time patients spent in the emergency department before being sent home A lower number of minutes is better (high)\" ...\n $ score       : num [1:1232] 7.3 80 140 157 136 136 NA 196 230 182 ...\n $ footnote    : chr [1:1232] NA NA \"25, 26\" \"25, 26\" ...\n $ start_date  : Date[1:1232], format: \"2024-01-01\" \"2023-10-01\" ...\n $ end_date    : Date[1:1232], format: \"2024-03-31\" \"2024-03-31\" ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   state = col_character(),\n  ..   condition = col_character(),\n  ..   measure_id = col_character(),\n  ..   measure_name = col_character(),\n  ..   score = col_double(),\n  ..   footnote = col_character(),\n  ..   start_date = col_date(format = \"\"),\n  ..   end_date = col_date(format = \"\")\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\nsummary(care_state)\n\n    state            condition          measure_id        measure_name      \n Length:1232        Length:1232        Length:1232        Length:1232       \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n     score       footnote           start_date            end_date         \n Min.   :  1   Length:1232        Min.   :2023-01-01   Min.   :2023-12-31  \n 1st Qu.: 70   Class :character   1st Qu.:2023-04-01   1st Qu.:2024-03-31  \n Median : 93   Mode  :character   Median :2023-04-01   Median :2024-03-31  \n Mean   :134                      Mean   :2023-04-05   Mean   :2024-03-14  \n 3rd Qu.:193                      3rd Qu.:2023-04-01   3rd Qu.:2024-03-31  \n Max.   :730                      Max.   :2024-01-01   Max.   :2024-03-31  \n NA's   :155                                                               \n\n\nSummary table of missing values for each column\n\nmissing_summary &lt;- care_state %&gt;% \n  summarise_all(~ sum(is.na(.)))\nprint(missing_summary)\n\n# A tibble: 1 × 8\n  state condition measure_id measure_name score footnote start_date end_date\n  &lt;int&gt;     &lt;int&gt;      &lt;int&gt;        &lt;int&gt; &lt;int&gt;    &lt;int&gt;      &lt;int&gt;    &lt;int&gt;\n1     0         0          0            0   155      168          0        0\n\n\nFrequency Table for Categorical Variables\n\nif(\"state\" %in% colnames(care_state)){\n  state_freq &lt;- care_state %&gt;%\n    count(state) %&gt;%\n    arrange(desc(n))\n  \n  # Print the frequency table directly so it appears in the output\n  print(state_freq)\n}\n\n# A tibble: 56 × 2\n   state     n\n   &lt;chr&gt; &lt;int&gt;\n 1 AK       22\n 2 AL       22\n 3 AR       22\n 4 AS       22\n 5 AZ       22\n 6 CA       22\n 7 CO       22\n 8 CT       22\n 9 DC       22\n10 DE       22\n# ℹ 46 more rows\n\n\nVisualizing Numeric Variables\n\nnumeric_columns &lt;- care_state %&gt;% \n  select_if(is.numeric) %&gt;% \n  names()\n\nfor(col in numeric_columns){\n  print(\n    ggplot(care_state, aes_string(x = col)) +\n      geom_histogram(binwidth = 30, fill = \"skyblue\", color = \"black\") +\n      labs(title = paste(\"Histogram of\", col),\n           x = col, \n           y = \"Count\") +\n      theme_minimal()\n  )\n}\n\nWarning: `aes_string()` was deprecated in ggplot2 3.0.0.\nℹ Please use tidy evaluation idioms with `aes()`.\nℹ See also `vignette(\"ggplot2-in-packages\")` for more information.\n\n\nWarning: Removed 155 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\n\nObservations by State for Each Condition\n\n# Convert state abbreviations to full, lowercase state names\nabbr_to_state &lt;- setNames(tolower(state.name), state.abb)\ncare_state &lt;- care_state %&gt;%\n  mutate(state_full = ifelse(state %in% names(abbr_to_state),\n                             abbr_to_state[state],\n                             tolower(state)))\n\n# Group by the converted state names and condition, then count observations\nstate_condition_freq &lt;- care_state %&gt;% \n  group_by(state_full, condition) %&gt;% \n  summarize(count = n(), .groups = \"drop\")\n\n# Get U.S. states map data; note that the 'region' column contains the state full names in lowercase\nstates_map &lt;- map_data(\"state\")\n\n# Join the map data with the frequency table based on matching state names\nmap_data_condition &lt;- left_join(states_map, state_condition_freq, \n                                by = c(\"region\" = \"state_full\"))\n\nWarning in left_join(states_map, state_condition_freq, by = c(region = \"state_full\")): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 1 of `x` matches multiple rows in `y`.\nℹ Row 1 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n# Produce a faceted choropleth map showing each condition's frequency by state\nggplot(map_data_condition, aes(x = long, y = lat, group = group)) +\n  geom_polygon(aes(fill = count), color = \"white\") +\n  scale_fill_gradient(low = \"lightblue\", high = \"darkblue\", na.value = \"grey90\") +\n  coord_fixed(1.3) +\n  labs(fill = \"Count\", title = \"Observations by State for Each Condition\") +\n  facet_wrap(~ condition)\n\n\n\n\n\n\n\n\nFrequency table showing the count for each condition\n\n# Create a frequency table for all conditions\ncondition_freq &lt;- care_state %&gt;%\n  group_by(condition) %&gt;%\n  summarize(frequency = n(), .groups = \"drop\") %&gt;%\n  arrange(desc(frequency))\n\n# Print the frequency table\nprint(condition_freq)\n\n# A tibble: 6 × 2\n  condition                           frequency\n  &lt;chr&gt;                                   &lt;int&gt;\n1 Emergency Department                      672\n2 Sepsis Care                               280\n3 Healthcare Personnel Vaccination          112\n4 Cataract surgery outcome                   56\n5 Colonoscopy care                           56\n6 Electronic Clinical Quality Measure        56\n\n\n\n\nPart 3: Full Analysis\nFormulate a Research Question - Hypothesis: States with higher adherence to septic shock care bundles (both the 3-Hour and 6-Hour Bundles) exhibit better overall sepsis care quality.\nResearch Question: - Do states with higher adherence to septic shock care protocols (3-Hour and 6-Hour bundles) have better sepsis care quality as reflected in a synthetic quality score?\nOutcome (Dependent Variable): - Synthetic Sepsis Quality Score. - This variable is created by combining the adherence counts (for both bundles) and adding some random variation to simulate an overall quality measure.\nPredictors (Independent Variables): - Count of Septic Shock 3-Hour Bundle Adherence - Count of Septic Shock 6-Hour Bundle Adherence\nCreate Synthetic state_summary\n\n# creating a synthetic state_summary.\n# This synthetic data assumes one observation per state (50 states) with two predictors:\n#   - bundle_3hr: count for \"Septic Shock 3-Hour Bundle\"\n#   - bundle_6hr: count for \"Septic Shock 6-Hour Bundle\"\n# And a synthetic outcome: quality_score\n\nset.seed(123)\nstate_summary &lt;- data.frame(\n  state_full = tolower(state.name),\n  bundle_3hr = sample(10:50, 50, replace = TRUE),\n  bundle_6hr = sample(5:25, 50, replace = TRUE)\n) %&gt;%\n  mutate(quality_score = (bundle_3hr + bundle_6hr) * 0.3 + rnorm(50, mean = 0, sd = 5))\n\n# Print the synthetic state_summary\nprint(state_summary)\n\n       state_full bundle_3hr bundle_6hr quality_score\n1         alabama         40         19     14.271466\n2          alaska         24         13      9.703332\n3         arizona         23         19      8.686349\n4        arkansas         12         20      5.705014\n5      california         46         24     19.126000\n6        colorado         23         10      8.303031\n7     connecticut         34         15     15.122719\n8        delaware         35         12     10.257632\n9         florida         36         11     10.970445\n10        georgia         14         20      5.695646\n11         hawaii         36         21     20.418643\n12          idaho         37         22     19.201396\n13       illinois         18         21     12.074284\n14        indiana         38          6     14.231863\n15           iowa         44          8     13.155386\n16         kansas         17         17      7.060242\n17       kentucky         35          9     12.965416\n18      louisiana         16         23     12.513091\n19          maine         18         24     19.061530\n20       maryland         28         18     11.482217\n21  massachusetts         45          7     17.127316\n22       michigan         23         12     10.080056\n23      minnesota         26         20     15.851817\n24    mississippi         48         16     20.118391\n25       missouri         21         18     20.593708\n26        montana         24          7      9.488414\n27       nebraska         41         18     23.581101\n28         nevada         16         11      5.307321\n29  new hampshire         18          7      2.771910\n30     new jersey         50         19     17.374057\n31     new mexico         19         25     15.460151\n32       new york         32          9     14.934278\n33 north carolina         36         12     13.248689\n34   north dakota         16         23     18.687133\n35           ohio         36         14     23.818265\n36       oklahoma         41         22     21.328007\n37         oregon         47         14     16.971305\n38   pennsylvania         34         16     15.758057\n39   rhode island         43          6     21.583049\n40 south carolina         38         14     14.698028\n41   south dakota         14         16      1.161624\n42      tennessee         17         24     10.996371\n43          texas         21         18     16.509052\n44           utah         22         21     17.169477\n45        vermont         27         18     15.593984\n46       virginia         42          7     16.399783\n47     washington         36         12     17.382125\n48  west virginia         34         18     24.957090\n49      wisconsin         47         23     24.014352\n50        wyoming         30         19     10.869156\n\n\nPre-process and Clean the Data\n\nstate_clean &lt;- state_summary %&gt;% \n  drop_na()\n\n\nstate_clean &lt;- state_clean %&gt;%\n  mutate(across(c(bundle_3hr, bundle_6hr, quality_score), scale))\n\n# Print a summary and the cleaned dataset to verify changes.\nsummary(state_clean)\n\n  state_full           bundle_3hr.V1        bundle_6hr.V1    \n Length:50          Min.   :-1.6766699   Min.   :-1.7801476  \n Class :character   1st Qu.:-0.8547729   1st Qu.:-0.7077695  \n Mode  :character   Median : 0.2410898   Median : 0.2752437  \n                    Mean   : 0.0000000   Mean   : 0.0000000  \n                    3rd Qu.: 0.6976992   3rd Qu.: 0.7220679  \n                    Max.   : 1.7935619   Max.   : 1.6157163  \n   quality_score.V1  \n Min.   :-2.3807240  \n 1st Qu.:-0.6405106  \n Median : 0.0986433  \n Mean   : 0.0000000  \n 3rd Qu.: 0.6944662  \n Max.   : 1.8738541  \n\nprint(state_clean)\n\n       state_full  bundle_3hr   bundle_6hr quality_score\n1         alabama  0.88034301  0.543338236   -0.03671249\n2          alaska -0.58080721 -0.529039862   -0.85348492\n3         arizona -0.67212910  0.543338236   -1.03531943\n4        arkansas -1.67666988  0.722067919   -1.56837568\n5      california  1.42827434  1.436986651    0.83126770\n6        colorado -0.67212910 -1.065228910   -1.10385580\n7     connecticut  0.33241168 -0.171580496    0.11548972\n8        delaware  0.42373356 -0.707769545   -0.75437734\n9         florida  0.51505545 -0.886499228   -0.62692783\n10        georgia -1.49402610  0.722067919   -1.57005068\n11         hawaii  0.51505545  0.900797602    1.06238964\n12          idaho  0.60637734  1.079527285    0.84474836\n13       illinois -1.12873855  0.900797602   -0.42956385\n14        indiana  0.69769923 -1.780147642   -0.04379330\n15           iowa  1.24563056 -1.422688276   -0.23626519\n16         kansas -1.22006043  0.185878870   -1.32606385\n17       kentucky  0.42373356 -1.243958593   -0.27023132\n18      louisiana -1.31138232  1.258256968   -0.35110620\n19          maine -1.12873855  1.436986651    0.81974061\n20       maryland -0.21551966  0.364608553   -0.53542409\n21  massachusetts  1.33695245 -1.601417959    0.47390741\n22       michigan -0.67212910 -0.707769545   -0.78612747\n23      minnesota -0.39816344  0.722067919    0.24585095\n24    mississippi  1.61091812  0.007149187    1.00870520\n25       missouri -0.85477288  0.364608553    1.09369084\n26        montana -0.58080721 -1.601417959   -0.89191182\n27       nebraska  0.97166490  0.364608553    1.62783020\n28         nevada -1.31138232 -0.886499228   -1.63948231\n29  new hampshire -1.12873855 -1.601417959   -2.09280828\n30     new jersey  1.79356190  0.543338236    0.51802411\n31     new mexico -1.03741666  1.615716334    0.17582186\n32       new york  0.14976790 -1.243958593    0.08179697\n33 north carolina  0.51505545 -0.707769545   -0.21958281\n34   north dakota -1.31138232  1.258256968    0.75279936\n35           ohio  0.51505545 -0.350310179    1.67023471\n36       oklahoma  0.97166490  1.079527285    1.22498186\n37         oregon  1.51959623 -0.350310179    0.44601301\n38   pennsylvania  0.33241168  0.007149187    0.22908680\n39   rhode island  1.15430867 -1.780147642    1.27058288\n40 south carolina  0.69769923 -0.350310179    0.03955599\n41   south dakota -1.49402610  0.007149187   -2.38072395\n42      tennessee -1.22006043  1.436986651   -0.62229248\n43          texas -0.85477288  0.364608553    0.36336307\n44           utah -0.76345099  0.900797602    0.48144574\n45        vermont -0.30684155  0.364608553    0.19975083\n46       virginia  1.06298679 -1.601417959    0.34382597\n47     washington  0.51505545 -0.707769545    0.51946674\n48  west virginia  0.33241168  0.364608553    1.87385415\n49      wisconsin  1.51959623  1.258256968    1.70529459\n50        wyoming -0.03287588  0.543338236   -0.64503817\n\n\nSplit into Training and Testing Sets\n\n# Set seed for reproducibility\nset.seed(123)\n\n# Calculate the sample size for the training set (70% of the data)\ntrain_size &lt;- floor(0.7 * nrow(state_clean))\n\n# Randomly sample indices for the training set\ntrain_indices &lt;- sample(seq_len(nrow(state_clean)), size = train_size)\n\n# Create the training and testing datasets using the sampled indices\ntrain_data &lt;- state_clean[train_indices, ]\ntest_data  &lt;- state_clean[-train_indices, ]\n\n# Display the dimensions of the training and testing sets\ncat(\"Training set dimensions:\", dim(train_data), \"\\n\")\n\nTraining set dimensions: 35 4 \n\ncat(\"Testing set dimensions:\", dim(test_data), \"\\n\")\n\nTesting set dimensions: 15 4 \n\n\nIn this part of my analysis, I set out to examine whether states with higher adherence to septic shock care bundles exhibit better sepsis care quality. To do this, I formulated the research question: “Do states with higher adherence to septic shock care protocols (3-Hour and 6-Hour bundles) have better sepsis care quality as reflected in a synthetic quality score?” I then created a synthetic dataset, state_summary, representing 50 states with counts for the Septic Shock 3-Hour and 6-Hour Bundles and derived a synthetic quality score as my outcome. After generating the data, I pre-processed it by removing any missing values and standardizing the predictors and outcome. Finally, I split the cleaned dataset into training (70%) and testing (30%) sets to prepare for further modeling. This end-to-end process allowed me to simulate a complete analysis workflow from data creation, through cleaning, to model preparation.\n\n\nPart 3a: Three different model types\nSetup (Load Libraries and Create CV Folds)\n\nset.seed(123)\n\n# Create 5-fold cross-validation folds from the training data.\ncv_folds &lt;- vfold_cv(train_data, v = 5)\n\n\n\nModel 1 – Linear Regression\n\n# Specify the linear regression model using the lm engine.\nlin_reg_spec &lt;- linear_reg(mode = \"regression\") %&gt;%\n  set_engine(\"lm\")\n\n# Define the workflow: outcome quality_score is predicted by bundle_3hr and bundle_6hr.\nlin_reg_workflow &lt;- workflow() %&gt;%\n  add_model(lin_reg_spec) %&gt;%\n  add_formula(quality_score ~ bundle_3hr + bundle_6hr)\n\n# Fit the linear regression using resampling (CV)\nlin_reg_res &lt;- fit_resamples(\n  lin_reg_workflow,\n  resamples = cv_folds,\n  metrics = metric_set(rmse, rsq, mae)\n)\n\n# Collect and print performance metrics\nlin_reg_metrics &lt;- collect_metrics(lin_reg_res)\nprint(lin_reg_metrics)\n\n# A tibble: 3 × 6\n  .metric .estimator  mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 mae     standard   0.577     5  0.0547 Preprocessor1_Model1\n2 rmse    standard   0.724     5  0.0393 Preprocessor1_Model1\n3 rsq     standard   0.629     5  0.112  Preprocessor1_Model1\n\n\nThe cross-validation results indicate that the model has a mean MAE of approximately 0.577 and an RMSE of around 0.724, suggesting that, on average, our model’s predictions deviate from the actual values by roughly 0.58–0.72 units. The R² of about 0.629 means that the model is able to explain nearly 63% of the variability in the outcome. The standard errors—roughly 0.055 for MAE, 0.039 for RMSE, and 0.112 for R²—are relatively low, indicating consistent performance across the 5-fold cross-validation.\n\n# Fit the final linear regression model on the training dataset\nfinal_lin_reg &lt;- fit(lin_reg_workflow, data = train_data)\n\n# Generate predictions on the training set and combine them with the actual outcomes\nlin_reg_preds &lt;- predict(final_lin_reg, train_data) %&gt;%\n  bind_cols(train_data)\n\n# Create the observed vs predicted plot\nggplot(lin_reg_preds, aes(x = quality_score, y = .pred)) +\n  geom_point(color = \"blue\", alpha = 0.7) +\n  geom_abline(slope = 1, intercept = 0, linetype = \"dashed\", color = \"red\") +\n  labs(title = \"Observed vs Predicted: Linear Regression Model\",\n       x = \"Observed Quality Score\",\n       y = \"Predicted Quality Score\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nMost of the predictions are close to the actual values, as shown by the points clustering around the diagonal line. However, there is still some spread, which means the model sometimes predicts a bit too high or too low. Overall, when the actual scores are higher, the predictions tend to be higher too, but there’s still room to improve the model’s accuracy.\n\n\nModel 2 – Random Forest\n\n# Specify the random forest model. Here, mtry is set to 2 and trees to 500.\nrf_spec &lt;- rand_forest(mode = \"regression\", mtry = 2, trees = 500) %&gt;%\n  set_engine(\"ranger\", importance = \"permutation\")\n\n# Define the workflow for random forest.\nrf_workflow &lt;- workflow() %&gt;%\n  add_model(rf_spec) %&gt;%\n  add_formula(quality_score ~ bundle_3hr + bundle_6hr)\n\n# Fit the random forest with CV.\nrf_res &lt;- fit_resamples(\n  rf_workflow,\n  resamples = cv_folds,\n  metrics = metric_set(rmse, rsq, mae)\n)\n\nWarning: package 'ranger' was built under R version 4.4.3\n\n# Collect and print performance metrics for random forest.\nrf_metrics &lt;- collect_metrics(rf_res)\nprint(rf_metrics)\n\n# A tibble: 3 × 6\n  .metric .estimator  mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 mae     standard   0.532     5  0.0684 Preprocessor1_Model1\n2 rmse    standard   0.669     5  0.0958 Preprocessor1_Model1\n3 rsq     standard   0.614     5  0.126  Preprocessor1_Model1\n\n\nModel 2: shows an average MAE of 0.533 (SE = 0.069), RMSE of 0.673 (SE = 0.095), and R² of 0.612 (SE = 0.123). This indicates the model’s predictions deviate by about 0.53 units on average, with low error variability and approximately 61% of the outcome variation explained, demonstrating stable performance across 5-fold CV.\n\n# Fit the final random forest model on the training dataset\nfinal_rf_model &lt;- fit(rf_workflow, data = train_data)\n\n# Generate predictions on the training set and combine them with the actual outcomes\nrf_preds &lt;- predict(final_rf_model, train_data) %&gt;%\n  bind_cols(train_data)\n\n# Create the observed vs predicted plot for the random forest model\nggplot(rf_preds, aes(x = quality_score, y = .pred)) +\n  geom_point(color = \"darkgreen\", alpha = 0.7) +\n  geom_abline(slope = 1, intercept = 0, linetype = \"dashed\", color = \"red\") +\n  labs(title = \"Observed vs Predicted: Random Forest Model\",\n       x = \"Observed Quality Score\",\n       y = \"Predicted Quality Score\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nThe random forest model performs well overall. Most of its predictions are close to the ideal line where observed and predicted values match, showing good agreement. However, some predictions still deviate, indicating that the model occasionally overestimates or underestimates the actual values. This suggests that while the model captures the overall trend, there is still potential for improvement in its accuracy.\n\n\nModel 3 – Boosted Trees\n\n# Specify the boosted tree model with 500 trees, a tree depth of 3, and a learning rate of 0.1.\nboost_spec &lt;- boost_tree(\n  mode = \"regression\",\n  trees = 500,\n  tree_depth = 3,\n  learn_rate = 0.1\n) %&gt;%\n  set_engine(\"xgboost\")\n\n# Define the workflow for boosted trees.\nboost_workflow &lt;- workflow() %&gt;%\n  add_model(boost_spec) %&gt;%\n  add_formula(quality_score ~ bundle_3hr + bundle_6hr)\n\n# Fit the boosted tree model with CV.\nboost_res &lt;- fit_resamples(\n  boost_workflow,\n  resamples = cv_folds,\n  metrics = metric_set(rmse, rsq, mae)\n)\n\nWarning: package 'xgboost' was built under R version 4.4.3\n\n# Collect and print performance metrics.\nboost_metrics &lt;- collect_metrics(boost_res)\nprint(boost_metrics)\n\n# A tibble: 3 × 6\n  .metric .estimator  mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 mae     standard   0.690     5  0.0370 Preprocessor1_Model1\n2 rmse    standard   0.815     5  0.0388 Preprocessor1_Model1\n3 rsq     standard   0.540     5  0.121  Preprocessor1_Model1\n\n\nModel 3: shows an average MAE of 0.690 (SE = 0.037), RMSE of 0.815 (SE = 0.039), and R² of 0.540 (SE = 0.121). This means that, on average, the predictions deviate by about 0.69 units, and roughly 54% of the outcome’s variance is explained by the model, with low standard errors indicating stable performance across 5-fold CV.\n\n# Fit the final boosted trees model on the training dataset\nfinal_boost &lt;- fit(boost_workflow, data = train_data)\n\n# Generate predictions on the training set and combine them with the actual outcomes\nboost_preds &lt;- predict(final_boost, train_data) %&gt;%\n  bind_cols(train_data)\n\n# Create the observed vs predicted plot for the boosted trees model\nggplot(boost_preds, aes(x = quality_score, y = .pred)) +\n  geom_point(color = \"purple\", alpha = 0.7) +\n  geom_abline(slope = 1, intercept = 0, linetype = \"dashed\", color = \"red\") +\n  labs(title = \"Observed vs Predicted: Boosted Trees Model\",\n       x = \"Observed Quality Score\",\n       y = \"Predicted Quality Score\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nBased on the observed versus predicted plot for the boosted trees model, most of the points are clustered around the red dashed line, which represents perfect predictions. This indicates that the model’s predictions generally align well with the observed quality scores. However, some points deviate from the line, suggesting that in certain cases the model either overpredicts or underpredicts the actual values. Overall, while the model captures the overall trend, the spread of points reveals that there is still some error in the predictions.\n\n# Extract the fitted random forest model from the workflow\nrf_fit &lt;- extract_fit_parsnip(final_rf_model)\n\n# Create a visually appealing variable importance plot\nvip(rf_fit,\n    num_features = 10,       # Show up to 10 features, though in this example we only have two\n    geom = \"col\",            # Use a column chart\n    horizontal = TRUE,       # Display horizontally\n    aesthetics = list(fill = \"skyblue\", color = \"blue\")) +\n  labs(title = \"Random Forest Variable Importance\",\n       x = \"Importance Score\",\n       y = \"Predictor\") +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5, face = \"bold\"))\n\n\n\n\n\n\n\n\nBased on the plot, the predictor “bundle_3hr” shows a higher importance score than “bundle_6hr,” indicating it plays a stronger role in predicting the quality score. Although both variables contribute to the model, the longer bar for “bundle_3hr” demonstrates that it is the more dominant driver in the predictions.\n\n\nCompare Model Performance\n\n# Combine the performance metrics from all three models for easy comparison.\nmodel_metrics &lt;- bind_rows(\n  lin_reg = lin_reg_metrics,\n  rf = rf_metrics,\n  boost = boost_metrics,\n  .id = \"model\"\n)\n\nprint(model_metrics)\n\n# A tibble: 9 × 7\n  model   .metric .estimator  mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 lin_reg mae     standard   0.577     5  0.0547 Preprocessor1_Model1\n2 lin_reg rmse    standard   0.724     5  0.0393 Preprocessor1_Model1\n3 lin_reg rsq     standard   0.629     5  0.112  Preprocessor1_Model1\n4 rf      mae     standard   0.532     5  0.0684 Preprocessor1_Model1\n5 rf      rmse    standard   0.669     5  0.0958 Preprocessor1_Model1\n6 rf      rsq     standard   0.614     5  0.126  Preprocessor1_Model1\n7 boost   mae     standard   0.690     5  0.0370 Preprocessor1_Model1\n8 boost   rmse    standard   0.815     5  0.0388 Preprocessor1_Model1\n9 boost   rsq     standard   0.540     5  0.121  Preprocessor1_Model1\n\n\nI compared three different models using 5-fold CV. The linear regression model yielded an average MAE of 0.577, RMSE of 0.724, and an R² of 0.629. The random forest model performed a bit better, with an MAE of 0.526, RMSE of 0.665, and an R² of 0.624. On the other hand, the boosted trees model had the highest errors—an MAE of 0.690 and an RMSE of 0.815—and a lower R² of 0.540, which indicates it explains less of the outcome’s variance. Overall, while linear regression and random forest show comparable explanatory power, the random forest model stands out for having lower prediction errors, making it the best-performing option among the three.\nDot-and-whisker plot: Comparison of Model Performance Metrics\n\nlibrary(ggplot2)\n\nggplot(model_metrics, aes(x = model, y = mean, color = model)) +\n  geom_point(size = 3) +\n  geom_errorbar(aes(ymin = mean - std_err, ymax = mean + std_err), width = 0.2) +\n  facet_wrap(~ .metric, scales = \"free_y\") +\n  labs(title = \"Comparison of Model Performance Metrics\",\n       x = \"Model\",\n       y = \"Mean Value\") +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n\n\n\n\n\nPart 4: Overall best\nI decided to go with the random forest model overall. Although linear regression was competitive in terms of explanatory power, the random forest model had slightly lower MAE (0.526 vs. 0.577) and RMSE (0.665 vs. 0.724), which indicates more accurate predictions on average. Moreover, random forests excel at capturing potential non-linear relationships between septic bundle adherence and sepsis care quality—an important aspect when dealing with complex clinical data. Additionally, random forests offer useful insights through variable importance measures, allowing me to better understand which predictors drive the quality score. Overall, I believe this model best balances performance, flexibility, and interpretability for addressing the research question.\n\n\nPart 5: Final Test Data Evaluation: Performance, Residuals, and Uncertainty\nFinal Random Forest Model Predictions on Test Data\n\n# Generate predictions on the test data using the final random forest model and bind them to test_data\nfinal_rf_test_preds &lt;- predict(final_rf_model, test_data) %&gt;%\n  bind_cols(test_data) %&gt;%\n  mutate(quality_score = as.numeric(quality_score),\n         .pred = as.numeric(.pred))\n\n# Now, evaluate performance on the test data\ntest_metrics &lt;- final_rf_test_preds %&gt;%\n  metrics(truth = quality_score, estimate = .pred)\n\nprint(test_metrics)\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard       0.879\n2 rsq     standard       0.105\n3 mae     standard       0.742\n\n\nThe final evaluation of the random forest model on the test data reveals an RMSE of 0.878, meaning that, on average, the model’s predictions deviate from the actual values by about 0.88 units. The MAE is 0.737, indicating that the typical absolute error in the predictions is roughly 0.74 units. However, the model’s R² value is only 0.113, which means that the model explains just 11% of the variability in the test data. Overall, while the error metrics suggest a moderate level of prediction error, the low R² value highlights that the model has limited predictive power and significant room for improvement.\nCalculate and Append Residuals\n\n# Compute the residuals and add them as a new column\nfinal_rf_test_preds &lt;- final_rf_test_preds %&gt;%\n  mutate(residual = quality_score - .pred)\n\n# Create a residual plot: Predicted vs Residuals\nggplot(final_rf_test_preds, aes(x = .pred, y = residual)) +\n  geom_point(color = \"darkgreen\", alpha = 0.7) +\n  geom_hline(yintercept = 0, linetype = \"dashed\", color = \"red\") +\n  labs(title = \"Residuals vs Predicted (Test Data)\",\n       x = \"Predicted Quality Score\",\n       y = \"Residuals\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nThe evaluation metrics for the final random forest model on the test data show an RMSE of 0.878, an MAE of 0.737, and an R² of 0.113. This means that, on average, the model’s predictions are off by about 0.88 units, with an average absolute error of 0.74 units. However, the model only explains roughly 11% of the variance in the test data, which indicates that its predictive power is quite low. Overall, while the error values suggest some level of accuracy, the low R² value reveals that there is significant uncertainty in the model’s performance, and substantial improvements are needed to better capture the underlying patterns in the data.\n\n\nPart 6: Discussion and Summary of Key Findings\nIn this analysis, I addressed the research question of whether states with higher adherence to septic shock care protocols exhibit better sepsis care quality, as measured by a synthetic quality score. To explore this, I generated a synthetic dataset representing 50 U.S. states with two predictors—counts for the “Septic Shock 3-Hour Bundle” and “Septic Shock 6-Hour Bundle”—and a synthetic outcome, the quality score, created by combining these counts with some random noise.\nAfter cleaning the data and splitting it into training and testing sets, I built three models—linear regression, random forest, and boosted trees—using 5-fold cross-validation.\nThe cross-validation results showed that the linear regression and random forest models performed similarly, with slightly better error metrics for the random forest model, while the boosted trees model exhibited higher errors and a lower R². I then selected the random forest model for further evaluation. However, when I evaluated it on the test data, the model produced an RMSE of 0.878, an MAE of 0.737, and an R² of only 0.113, indicating that it explains just 11% of the variability in the outcome. The residual analysis confirmed that there were significant deviations between predicted and observed values, suggesting considerable uncertainty. Overall, while the models indicate some relationship between septic bundle adherence and sepsis care quality, the low R² on the test set reveals that the current predictors explain only a small portion of the outcome variability, underscoring the need for further refinement and potentially additional data to better capture this complex relationship.\nSummary Table of Model Performance\n\n# Create the summary table as a tibble\nmodel_performance &lt;- tribble(\n  ~Model,         ~MAE,   ~RMSE,   ~RSQ,\n  \"Linear Reg.\",    0.577,  0.724,   0.629,\n  \"Random Forest\",  0.526,  0.665,   0.624,\n  \"Boosted Trees\",  0.690,  0.815,   0.540\n)\n\n# Create a nicely formatted table using gt\nmodel_performance %&gt;%\n  gt() %&gt;%\n  tab_header(\n    title = \"Summary Table of Model Performance\",\n    subtitle = \"Cross-Validation Results on Training Data\"\n  ) %&gt;%\n  fmt_number(\n    columns = c(MAE, RMSE, RSQ),\n    decimals = 3\n  ) %&gt;%\n  cols_label(\n    MAE = \"Mean Absolute Error\",\n    RMSE = \"Root Mean Squared Error\",\n    RSQ = \"R²\"\n  )\n\n\n\n\n\n\n\nSummary Table of Model Performance\n\n\nCross-Validation Results on Training Data\n\n\nModel\nMean Absolute Error\nRoot Mean Squared Error\nR²\n\n\n\n\nLinear Reg.\n0.577\n0.724\n0.629\n\n\nRandom Forest\n0.526\n0.665\n0.624\n\n\nBoosted Trees\n0.690\n0.815\n0.540"
  },
  {
    "objectID": "synthetic-data-exercise/synthetic-data-exercise.html",
    "href": "synthetic-data-exercise/synthetic-data-exercise.html",
    "title": "Synthetic Data Exercise",
    "section": "",
    "text": "Introduction of the TBpregnancy Synthetic Dataset\nThe TB pregnancy dataset is a synthetic dataset designed to study the pharmacokinetic (PK) properties of antiretroviral (ARV) and anti-tuberculosis (TB) drugs in pregnant and postpartum women. The dataset was generated to model real-world drug metabolism patterns and assess how pregnancy impacts drug clearance, exposure (AUC), and birth outcomes. The data simulates clinical trial observations and incorporates known physiological changes during pregnancy that affect drug absorption, distribution, metabolism, and elimination.\nAdditionally, the dataset examines how pregnancy affects drug metabolism through demographic, pharmacokinetic, and clinical variables. It includes age, BMI, trimester (1st, 2nd, 3rd, postpartum), and drug type (ARV or anti-TB), along with Cmax, AUC, clearance (CL), half-life (T½), and protein binding. Clinical outcomes include CD4 count (for ARV users), viral load, ALT levels, and birth outcomes (normal vs. adverse). Key research questions explore pregnancy’s effect on AUC and clearance, differences in ARV vs. anti-TB metabolism, factors influencing adverse birth outcomes, and inter-individual variability in drug metabolism.\n\n\nGenerating Synthetic Data of pharmacokinetic (PK) data for Antiretroviral (ARV) and Anti-Tuberculosis (TB) drugs during pregnancy and postpartum\n\n# Load required libraries\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.4.3\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n# Set seed for reproducibility\nset.seed(123)\n\n# Number of participants\nn &lt;- 300  \n\n# Generate participant IDs\nparticipant_id &lt;- 1:n  \n\n# Pregnancy periods (1st, 2nd, 3rd trimester, Postpartum)\ntrimester &lt;- sample(c(\"1st Trimester\", \"2nd Trimester\", \"3rd Trimester\", \"Postpartum\"), \n                    size = n, replace = TRUE, prob = c(0.25, 0.25, 0.25, 0.25))\n\n# Drug Type (ARV or Anti-TB)\ndrug_type &lt;- sample(c(\"ARV\", \"Anti-TB\"), size = n, replace = TRUE)\n\n# Generate demographic data\nage &lt;- sample(18:45, size = n, replace = TRUE)  # Age between 18-45 years\nbmi &lt;- ifelse(trimester == \"Postpartum\", \n              rnorm(n, mean = 26, sd = 3), \n              rnorm(n, mean = 30, sd = 3))  # Higher BMI in pregnancy\n\n# Gestational Age (weeks) for pregnancy cases\ngestational_age &lt;- ifelse(trimester == \"Postpartum\", NA, sample(12:40, size = n, replace = TRUE))\n\n# Dose (mg), adjusted for pregnancy\ndose &lt;- ifelse(trimester == \"Postpartum\", \n               rnorm(n, mean = 600, sd = 50), \n               rnorm(n, mean = 650, sd = 50))  # Slightly increased dose in pregnancy\n\n# Generate pharmacokinetic data\ncmax &lt;- ifelse(trimester == \"Postpartum\", \n               rnorm(n, mean = 5, sd = 1), \n               rnorm(n, mean = 4, sd = 1))  # Lower in pregnancy\n\nauc &lt;- ifelse(trimester == \"Postpartum\", \n              rnorm(n, mean = 45, sd = 5), \n              rnorm(n, mean = 35, sd = 5))  # Reduced drug exposure in pregnancy\n\nhalf_life &lt;- ifelse(trimester == \"Postpartum\", \n                    rnorm(n, mean = 8, sd = 1), \n                    rnorm(n, mean = 7, sd = 1))  # Shorter in pregnancy\n\nclearance &lt;- ifelse(trimester == \"Postpartum\", \n                    rnorm(n, mean = 10, sd = 2), \n                    rnorm(n, mean = 12, sd = 2))  # Higher clearance in pregnancy\n\n# Protein Binding (%)\nprotein_binding &lt;- rnorm(n, mean = 85, sd = 5)  # Between 80-90%\n\n# CD4 Count (HIV patients, ARV only)\ncd4_count &lt;- ifelse(drug_type == \"ARV\", \n                    ifelse(trimester == \"Postpartum\", rnorm(n, mean = 500, sd = 100), rnorm(n, mean = 400, sd = 100)), \n                    NA)  # Only for ARV users\n\n# Viral Load (log10 copies/mL) - inverse of CD4 count\nviral_load &lt;- ifelse(drug_type == \"ARV\", \n                     5 - (cd4_count / 200), \n                     NA)  # Only for ARV users\n\n# Liver Enzyme Levels (ALT, IU/L) - indicator of liver function\nalt_levels &lt;- rnorm(n, mean = 25, sd = 10)  # Between 15-35 IU/L\n\n# Birth Outcome (0 = Normal, 1 = Adverse) influenced by drug exposure\nprob_adverse_outcome &lt;- 1 / (1 + exp(-(-1 + 0.05 * clearance - 0.1 * auc + 0.01 * alt_levels)))\nbirth_outcome &lt;- rbinom(n, size = 1, prob = prob_adverse_outcome)\n\n# Create the dataset\nTBpregnancy &lt;- data.frame(ParticipantID = participant_id, \n                 Age = age,\n                 BMI = bmi,\n                 GestationalAge = gestational_age,\n                 Trimester = trimester, \n                 DrugType = drug_type, \n                 Dose_mg = dose,\n                 Cmax = cmax, \n                 AUC = auc, \n                 HalfLife = half_life, \n                 Clearance = clearance, \n                 ProteinBinding = protein_binding,\n                 CD4Count = cd4_count,\n                 ViralLoad = viral_load,\n                 ALT_Levels = alt_levels,\n                 BirthOutcome = birth_outcome)\n\n# View first few rows\nhead(TBpregnancy)\n\n  ParticipantID Age      BMI GestationalAge     Trimester DrugType  Dose_mg\n1             1  45 30.39880             18 3rd Trimester  Anti-TB 690.5561\n2             2  33 28.22766             25 1st Trimester  Anti-TB 731.4292\n3             3  26 29.43845             21 3rd Trimester      ARV 641.5331\n4             4  28 35.93455             35 1st Trimester  Anti-TB 692.9263\n5             5  28 25.94956             27 1st Trimester      ARV 627.9202\n6             6  36 29.20644             36 2nd Trimester      ARV 704.2929\n      Cmax      AUC HalfLife Clearance ProteinBinding CD4Count ViralLoad\n1 5.051530 31.87629 5.439194  9.920776       78.50281       NA        NA\n2 3.911380 26.52678 6.122411 10.812195       75.52868       NA        NA\n3 5.561617 41.72005 5.674557  8.264870       84.76765 397.1953  3.014024\n4 4.966893 28.51780 6.877079 13.380295       84.80144       NA        NA\n5 3.949942 30.39506 6.690450 13.424845       82.75101 373.9001  3.130500\n6 2.427745 37.21709 7.535453 13.231151       84.61910 499.8509  2.500746\n  ALT_Levels BirthOutcome\n1   14.62036            0\n2   21.40848            0\n3   14.65765            0\n4   26.06639            0\n5   41.08755            0\n6   24.63504            0\n\n\n\n\nExploratory of the Dataset\n\nsummary(TBpregnancy)\n\n ParticipantID         Age             BMI        GestationalAge \n Min.   :  1.00   Min.   :18.00   Min.   :19.37   Min.   :12.00  \n 1st Qu.: 75.75   1st Qu.:24.00   1st Qu.:26.53   1st Qu.:19.25  \n Median :150.50   Median :30.00   Median :28.89   Median :27.50  \n Mean   :150.50   Mean   :31.04   Mean   :28.92   Mean   :26.89  \n 3rd Qu.:225.25   3rd Qu.:39.00   3rd Qu.:31.31   3rd Qu.:35.00  \n Max.   :300.00   Max.   :45.00   Max.   :37.23   Max.   :40.00  \n                                                  NA's   :74     \n  Trimester           DrugType            Dose_mg           Cmax      \n Length:300         Length:300         Min.   :507.8   Min.   :1.175  \n Class :character   Class :character   1st Qu.:610.3   1st Qu.:3.596  \n Mode  :character   Mode  :character   Median :639.9   Median :4.223  \n                                       Mean   :639.2   Mean   :4.235  \n                                       3rd Qu.:669.6   3rd Qu.:4.967  \n                                       Max.   :763.4   Max.   :7.852  \n                                                                      \n      AUC           HalfLife        Clearance      ProteinBinding \n Min.   :24.02   Min.   : 3.866   Min.   : 5.126   Min.   :66.32  \n 1st Qu.:33.41   1st Qu.: 6.421   1st Qu.: 9.881   1st Qu.:81.81  \n Median :37.16   Median : 7.137   Median :11.280   Median :85.17  \n Mean   :37.80   Mean   : 7.186   Mean   :11.377   Mean   :84.78  \n 3rd Qu.:42.52   3rd Qu.: 7.984   3rd Qu.:12.951   3rd Qu.:87.74  \n Max.   :54.96   Max.   :10.334   Max.   :17.451   Max.   :99.56  \n                                                                  \n    CD4Count        ViralLoad       ALT_Levels      BirthOutcome \n Min.   : 92.31   Min.   :1.227   Min.   :-3.729   Min.   :0.00  \n 1st Qu.:364.42   1st Qu.:2.488   1st Qu.:18.851   1st Qu.:0.00  \n Median :429.95   Median :2.850   Median :25.494   Median :0.00  \n Mean   :429.62   Mean   :2.852   Mean   :25.157   Mean   :0.03  \n 3rd Qu.:502.43   3rd Qu.:3.178   3rd Qu.:32.009   3rd Qu.:0.00  \n Max.   :754.55   Max.   :4.538   Max.   :48.426   Max.   :1.00  \n NA's   :150      NA's   :150                                    \n\nstr(TBpregnancy)\n\n'data.frame':   300 obs. of  16 variables:\n $ ParticipantID : int  1 2 3 4 5 6 7 8 9 10 ...\n $ Age           : int  45 33 26 28 28 36 27 40 19 42 ...\n $ BMI           : num  30.4 28.2 29.4 35.9 25.9 ...\n $ GestationalAge: int  18 25 21 35 27 36 NA 33 NA 22 ...\n $ Trimester     : chr  \"3rd Trimester\" \"1st Trimester\" \"3rd Trimester\" \"1st Trimester\" ...\n $ DrugType      : chr  \"Anti-TB\" \"Anti-TB\" \"ARV\" \"Anti-TB\" ...\n $ Dose_mg       : num  691 731 642 693 628 ...\n $ Cmax          : num  5.05 3.91 5.56 4.97 3.95 ...\n $ AUC           : num  31.9 26.5 41.7 28.5 30.4 ...\n $ HalfLife      : num  5.44 6.12 5.67 6.88 6.69 ...\n $ Clearance     : num  9.92 10.81 8.26 13.38 13.42 ...\n $ ProteinBinding: num  78.5 75.5 84.8 84.8 82.8 ...\n $ CD4Count      : num  NA NA 397 NA 374 ...\n $ ViralLoad     : num  NA NA 3.01 NA 3.13 ...\n $ ALT_Levels    : num  14.6 21.4 14.7 26.1 41.1 ...\n $ BirthOutcome  : int  0 0 0 0 0 0 0 0 0 0 ...\n\n\n\n\nVisualizations of the dataset\n\n# Boxplot of AUC (Drug Exposure) across pregnancy stages\nggplot(TBpregnancy, aes(x = Trimester, y = AUC, fill = Trimester)) +\n  geom_boxplot() +\n  theme_minimal() +\n  ggtitle(\"Drug Exposure (AUC) Across Pregnancy and Postpartum\")\n\n\n\n\n\n\n\n# Scatter plot: Clearance vs. AUC\nggplot(TBpregnancy, aes(x = Clearance, y = AUC, color = Trimester)) +\n  geom_point() +\n  theme_minimal() +\n  ggtitle(\"Clearance vs. Drug Exposure (AUC)\")\n\n\n\n\n\n\n\n# Birth Outcome Distribution\nggplot(TBpregnancy, aes(x = factor(BirthOutcome), fill = factor(BirthOutcome))) +\n  geom_bar() +\n  theme_minimal() +\n  labs(x = \"Birth Outcome (0 = Normal, 1 = Adverse)\", y = \"Count\", title = \"Distribution of Birth Outcomes\")\n\n\n\n\n\n\n\n\n\n\nFitting Regression Models\nI want to explore this question: Does Pregnancy Affect Drug Exposure (AUC)?\n\nlm_model &lt;- lm(AUC ~ Trimester + DrugType + BMI, data = TBpregnancy)\nsummary(lm_model)  # Expect AUC to be lower in pregnancy\n\n\nCall:\nlm(formula = AUC ~ Trimester + DrugType + BMI, data = TBpregnancy)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-11.2311  -2.9273  -0.4594   3.0240  10.0642 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)            36.78303    2.59611  14.169   &lt;2e-16 ***\nTrimester2nd Trimester  1.39998    0.74434   1.881    0.061 .  \nTrimester3rd Trimester  0.34391    0.72871   0.472    0.637    \nTrimesterPostpartum    10.84955    0.80261  13.518   &lt;2e-16 ***\nDrugTypeARV            -0.81245    0.52043  -1.561    0.120    \nBMI                    -0.05828    0.08543  -0.682    0.496    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 4.465 on 294 degrees of freedom\nMultiple R-squared:  0.5152,    Adjusted R-squared:  0.507 \nF-statistic: 62.49 on 5 and 294 DF,  p-value: &lt; 2.2e-16\n\n\nInterpretation The linear regression model examines the effect of trimester, drug type, and BMI on AUC (drug exposure). - The intercept (36.78, p &lt; 0.001) represents the estimated AUC in the first trimester for anti-TB drugs, assuming BMI is zero. - Postpartum significantly increases AUC by 10.85 units (p &lt; 0.001), indicating higher drug exposure after pregnancy. - The second trimester shows a marginally significant increase (1.40, p = 0.061), while the third trimester has no meaningful effect (p = 0.637). - ARV drugs tend to reduce AUC (-0.81), but this effect is not significant (p = 0.120). BMI has a negligible effect on AUC (p = 0.496).\nThe model explains 51.5% of the variance in AUC (R² = 0.515), and the overall model is highly significant (p &lt; 0.001), confirming that trimester is the primary driver of AUC changes.\n\n\nFitting Logistic Regression to Predict Birth Outcomes\n\nglm_model &lt;- glm(BirthOutcome ~ AUC + Clearance + ALT_Levels + Trimester, data = TBpregnancy, family = binomial)\nsummary(glm_model)  # Expect higher clearance & ALT levels to increase risk of adverse birth outcomes\n\n\nCall:\nglm(formula = BirthOutcome ~ AUC + Clearance + ALT_Levels + Trimester, \n    family = binomial, data = TBpregnancy)\n\nCoefficients:\n                         Estimate Std. Error z value Pr(&gt;|z|)  \n(Intercept)               3.82120    3.78056   1.011   0.3121  \nAUC                      -0.20101    0.08760  -2.295   0.0218 *\nClearance                 0.09208    0.17360   0.530   0.5958  \nALT_Levels               -0.03880    0.03740  -1.037   0.2995  \nTrimester2nd Trimester   -0.20570    0.80006  -0.257   0.7971  \nTrimester3rd Trimester   -1.91442    1.13286  -1.690   0.0910 .\nTrimesterPostpartum     -15.43338 1959.80257  -0.008   0.9937  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 80.845  on 299  degrees of freedom\nResidual deviance: 63.949  on 293  degrees of freedom\nAIC: 77.949\n\nNumber of Fisher Scoring iterations: 19\n\n\nInterpretattion: This logistic regression model assesses the relationship between AUC (drug exposure), Clearance, ALT levels, and Trimester on the probability of adverse birth outcomes. - The intercept (3.82, p = 0.312) suggests the baseline log-odds of an adverse birth outcome when all predictors are at their reference levels. - Higher AUC significantly reduces the risk of adverse birth outcomes (-0.201, p = 0.0218), indicating that increased drug exposure is protective. - Clearance (0.092, p = 0.5958) and ALT levels (-0.0388, p = 0.2995) are not significant predictors, suggesting that drug metabolism and liver function have limited impact in this model. - The third trimester shows a marginally lower risk (-1.91, p = 0.091), while postpartum has an extreme coefficient (-15.43), likely due to data imbalance.\nThe model improves prediction compared to the null model (lower residual deviance: 63.95 vs. null deviance: 80.85), and the overall fit is reasonable (AIC = 77.95), but additional covariates or interaction terms may refine predictions.\n\n\nLinear Regression: Predict Drug Exposure (AUC)\n\n# Linear Model: AUC as the dependent variable\nlm_auc &lt;- lm(AUC ~ Trimester + BMI + DrugType + Clearance + ProteinBinding, data = TBpregnancy)\nsummary(lm_auc)  # Expect Trimester and Clearance to be significant\n\n\nCall:\nlm(formula = AUC ~ Trimester + BMI + DrugType + Clearance + ProteinBinding, \n    data = TBpregnancy)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-10.8389  -2.9398  -0.3856   3.1062  10.0087 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)            44.67683    5.55159   8.048 2.14e-14 ***\nTrimester2nd Trimester  1.40815    0.74509   1.890   0.0598 .  \nTrimester3rd Trimester  0.32169    0.72716   0.442   0.6585    \nTrimesterPostpartum    10.46530    0.85853  12.190  &lt; 2e-16 ***\nBMI                    -0.06334    0.08530  -0.743   0.4583    \nDrugTypeARV            -0.84857    0.52081  -1.629   0.1043    \nClearance              -0.16896    0.12772  -1.323   0.1869    \nProteinBinding         -0.06733    0.05426  -1.241   0.2157    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 4.454 on 292 degrees of freedom\nMultiple R-squared:  0.5207,    Adjusted R-squared:  0.5092 \nF-statistic: 45.32 on 7 and 292 DF,  p-value: &lt; 2.2e-16\n\n\nInterpretation This linear regression model examines the effect of Trimester, BMI, Drug Type, Clearance, and Protein Binding on AUC (drug exposure). - The intercept (44.68, p &lt; 0.001) represents the baseline AUC when all categorical variables are at their reference levels. - Postpartum is significantly associated with a 10.47-unit increase in AUC (p &lt; 0.001), confirming that drug exposure is higher after pregnancy. - The second trimester shows a marginally significant increase (1.41, p = 0.0598), while the third trimester has no significant effect (p = 0.6585). - Drug type (ARV vs. Anti-TB) slightly reduces AUC (-0.85, p = 0.1043), but the effect is not statistically significant. BMI (-0.063, p = 0.4583), Clearance (-0.168, p = 0.1869), and Protein Binding (-0.067, p = 0.2157) do not significantly influence AUC.\nThe model explains 52.1% of the variance in AUC (R² = 0.5207), indicating a moderate fit, and the overall model is highly significant (p &lt; 0.001), confirming that trimester remains the strongest predictor of AUC changes.\n\n\n2 Logistic Regression to Predict Adverse Birth Outcome\n\n# Logistic Regression: Predicting BirthOutcome\nglm_birth &lt;- glm(BirthOutcome ~ AUC + Clearance + ALT_Levels + Trimester + DrugType, \n                 data = TBpregnancy, family = binomial)\nsummary(glm_birth)  # Expect Clearance & ALT levels to increase risk\n\n\nCall:\nglm(formula = BirthOutcome ~ AUC + Clearance + ALT_Levels + Trimester + \n    DrugType, family = binomial, data = TBpregnancy)\n\nCoefficients:\n                         Estimate Std. Error z value Pr(&gt;|z|)  \n(Intercept)               4.29376    4.04765   1.061   0.2888  \nAUC                      -0.20583    0.08914  -2.309   0.0209 *\nClearance                 0.07990    0.17648   0.453   0.6507  \nALT_Levels               -0.04112    0.03841  -1.071   0.2844  \nTrimester2nd Trimester   -0.20060    0.79934  -0.251   0.8018  \nTrimester3rd Trimester   -1.88516    1.13819  -1.656   0.0977 .\nTrimesterPostpartum     -15.38573 1957.06453  -0.008   0.9937  \nDrugTypeARV              -0.26425    0.75192  -0.351   0.7253  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 80.845  on 299  degrees of freedom\nResidual deviance: 63.824  on 292  degrees of freedom\nAIC: 79.824\n\nNumber of Fisher Scoring iterations: 19\n\n\nInterpretation This logistic regression model evaluates the impact of AUC, Clearance, ALT Levels, Trimester, and Drug Type on the probability of adverse birth outcomes. - The intercept (4.29, p = 0.2888) represents the baseline log-odds of an adverse birth outcome when all predictors are at their reference levels. - AUC is the only significant predictor (-0.2058, p = 0.0209), indicating that higher drug exposure significantly reduces the risk of adverse birth outcomes. - Clearance (0.0799, p = 0.6507) and ALT levels (-0.0411, p = 0.2844) do not significantly influence birth outcomes. - Trimester has no significant impact, although the third trimester shows a marginally protective effect (-1.88, p = 0.0977). - The postpartum coefficient (-15.39) is extreme and non-significant (p = 0.9937), likely due to data imbalance. - Drug type (ARV vs. Anti-TB) does not significantly influence birth outcomes (-0.2642, p = 0.7253).\nThe model improves prediction compared to the null model (residual deviance: 63.82 vs. null deviance: 80.85), and AUC remains the strongest predictor of birth outcomes. However, the AIC (79.82) suggests that additional predictors may improve the model’s fit.\n\n\nRandom Forest of Non-Linear Model for Birth Outcomes\n\n# Load required libraries\nlibrary(randomForest)\n\nWarning: package 'randomForest' was built under R version 4.4.2\n\n\nrandomForest 4.7-1.2\n\n\nType rfNews() to see new features/changes/bug fixes.\n\n\n\nAttaching package: 'randomForest'\n\n\nThe following object is masked from 'package:dplyr':\n\n    combine\n\n\nThe following object is masked from 'package:ggplot2':\n\n    margin\n\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Convert categorical variables (ensuring classification mode)\nTBpregnancy$Trimester &lt;- as.factor(TBpregnancy$Trimester)\nTBpregnancy$DrugType &lt;- as.factor(TBpregnancy$DrugType)\nTBpregnancy$BirthOutcome &lt;- as.factor(TBpregnancy$BirthOutcome)  # Ensuring classification mode\n\n# Train a Random Forest classification model\nset.seed(123)\nrf_model &lt;- randomForest(BirthOutcome ~ AUC + Clearance + ALT_Levels + BMI + Age + ProteinBinding, \n                         data = TBpregnancy, ntree = 500, importance = TRUE)\n\n# Extract variable importance (correctly using \"MeanDecreaseGini\" for classification models)\nvar_imp &lt;- as.data.frame(importance(rf_model))  # Extract importance values\nvar_imp$Variable &lt;- rownames(var_imp)  # Add variable names\nvar_imp &lt;- var_imp %&gt;% arrange(desc(MeanDecreaseGini))  # Sort by importance\n\n# Create a color-coded variable importance plot\nggplot(var_imp, aes(x = reorder(Variable, MeanDecreaseGini), y = MeanDecreaseGini, fill = MeanDecreaseGini)) +\n  geom_bar(stat = \"identity\", width = 0.7, color = \"black\") +  # Adds border for clarity\n  coord_flip() +\n  scale_fill_gradient(low = \"#00BFC4\", high = \"#F8766D\") +  # Blue to red gradient (low to high importance)\n  theme_minimal() +\n  labs(title = \"Variable Importance in Predicting Birth Outcomes\",\n       x = \"Predictor Variables\", y = \"Mean Decrease in Gini\",\n       fill = \"Importance\") +\n  theme(text = element_text(size = 14),\n        plot.title = element_text(hjust = 0.5, face = \"bold\"),\n        legend.position = \"right\")\n\n\n\n\n\n\n\n\n\n\nSimulate Repeated Measures\n\n# Expand the dataset: Each participant has 3 time points\nset.seed(123)\nTBpregnancy_long &lt;- TBpregnancy %&gt;%\n  slice(rep(1:n(), each = 3)) %&gt;%  # Repeat each row 3 times\n  mutate(Timepoint = rep(1:3, times = n))  # Assign time points\n\n# Introduce slight variations in AUC and Clearance per timepoint\nTBpregnancy_long &lt;- TBpregnancy_long %&gt;%\n  mutate(AUC = AUC + rnorm(n() , mean = 0, sd = 2),  # Small variations\n         Clearance = Clearance + rnorm(n(), mean = 0, sd = 0.5))\n\n# Check the structure\nhead(TBpregnancy_long)\n\n  ParticipantID Age      BMI GestationalAge     Trimester DrugType  Dose_mg\n1             1  45 30.39880             18 3rd Trimester  Anti-TB 690.5561\n2             1  45 30.39880             18 3rd Trimester  Anti-TB 690.5561\n3             1  45 30.39880             18 3rd Trimester  Anti-TB 690.5561\n4             2  33 28.22766             25 1st Trimester  Anti-TB 731.4292\n5             2  33 28.22766             25 1st Trimester  Anti-TB 731.4292\n6             2  33 28.22766             25 1st Trimester  Anti-TB 731.4292\n     Cmax      AUC HalfLife Clearance ProteinBinding CD4Count ViralLoad\n1 5.05153 30.75534 5.439194  9.413719       78.50281       NA        NA\n2 5.05153 31.41594 5.439194  9.525120       78.50281       NA        NA\n3 5.05153 34.99371 5.439194 10.070573       78.50281       NA        NA\n4 3.91138 26.66780 6.122411 11.631721       75.52868       NA        NA\n5 3.91138 26.78536 6.122411 11.354504       75.52868       NA        NA\n6 3.91138 29.95691 6.122411 10.499911       75.52868       NA        NA\n  ALT_Levels BirthOutcome Timepoint\n1   14.62036            0         1\n2   14.62036            0         2\n3   14.62036            0         3\n4   21.40848            0         1\n5   21.40848            0         2\n6   21.40848            0         3\n\n\n\n\nMixed-Effects Model: Accounting for Individual Differences\n\nlibrary(lme4)\n\nWarning: package 'lme4' was built under R version 4.4.3\n\n\nLoading required package: Matrix\n\n\nWarning: package 'Matrix' was built under R version 4.4.3\n\n# Fit a mixed model for AUC with random intercept per Participant\nmixed_model &lt;- lmer(AUC ~ Trimester + Clearance + (1 | ParticipantID), data = TBpregnancy_long)\nsummary(mixed_model)\n\nLinear mixed model fit by REML ['lmerMod']\nFormula: AUC ~ Trimester + Clearance + (1 | ParticipantID)\n   Data: TBpregnancy_long\n\nREML criterion at convergence: 4610\n\nScaled residuals: \n     Min       1Q   Median       3Q      Max \n-2.60844 -0.57569 -0.00148  0.54177  2.90555 \n\nRandom effects:\n Groups        Name        Variance Std.Dev.\n ParticipantID (Intercept) 19.501   4.416   \n Residual                   3.923   1.981   \nNumber of obs: 900, groups:  ParticipantID, 300\n\nFixed effects:\n                       Estimate Std. Error t value\n(Intercept)            35.39729    1.33250  26.564\nTrimester2nd Trimester  1.49325    0.76096   1.962\nTrimester3rd Trimester  0.18794    0.73955   0.254\nTrimesterPostpartum    10.80113    0.79607  13.568\nClearance              -0.05564    0.10071  -0.553\n\nCorrelation of Fixed Effects:\n            (Intr) Trms2T Trms3T TrmstP\nTrmstr2ndTr -0.326                     \nTrmstr3rdTr -0.310  0.521              \nTrmstrPstpr -0.556  0.496  0.502       \nClearance   -0.914  0.040  0.013  0.306\n\n\nInterpretation of the last model This linear mixed model (LMM) examines the effect of Trimester and Clearance on AUC (drug exposure), while accounting for individual variability through random effects for ParticipantID. - The random intercept variance (19.501, SD = 4.416) indicates substantial differences in AUC between individuals, whereas residual variance (3.923, SD = 1.981) reflects within-individual fluctuations. - The postpartum period is significantly associated with a 10.80-unit increase in AUC (p &lt; 0.001), confirming that drug exposure rises after pregnancy. - The second trimester shows a marginally significant increase in AUC (+1.49, p ≈ 0.05), while the third trimester has no meaningful effect. Clearance (-0.056, p = 0.55) does not significantly influence AUC, suggesting that other metabolic factors may play a stronger role. - The large variation across participants highlights the need for individualized drug monitoring during pregnancy and postpartum.\n\n\nKey Results & Findings\n\nPregnancy significantly reduces drug exposure (AUC), with postpartum showing a strong rebound (+10.8, p &lt; 0.001), confirming higher drug levels after delivery.\nThe second trimester shows a marginal increase in AUC (p ≈ 0.05), while the third trimester has no meaningful effect.\nHigher AUC is protective against adverse birth outcomes (-0.2058, p = 0.0218), while drug clearance does not show a significant effect.\nA linear mixed model (LMM) revealed substantial inter-individual variability in drug metabolism (ParticipantID variance = 19.501), highlighting the need for personalized drug monitoring during pregnancy."
  },
  {
    "objectID": "starter-analysis-exercise/results/readme.html",
    "href": "starter-analysis-exercise/results/readme.html",
    "title": "Asmith Joseph Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains results produced by the code, such as figures and tables.\nDepending on the size and type of your project, you can either place it all in a single folder or create sub-folders. For instance you could create a folder for figures, another for tables. Or you could create a sub-folder for dataset 1, another for dataset 2. Or you could have a subfolder for exploratory analysis, another for final analysis. The options are endless, choose whatever makes sense for your project. For this template, there is just a a single folder, but having sub-folders is often a good idea."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "title": "Starter Analysis Exercise",
    "section": "",
    "text": "Write a summary of your project."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#general-background-information",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#general-background-information",
    "title": "Starter Analysis Exercise",
    "section": "2.1 General Background Information",
    "text": "2.1 General Background Information\nProvide enough background on your topic that others can understand the why and how of your analysis"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "title": "Starter Analysis Exercise",
    "section": "2.2 Description of data and data source",
    "text": "2.2 Description of data and data source\nDescribe what the data is, what it contains, where it is from, etc. Eventually this might be part of a methods section. The dataset comprises variables related to individuals’ physical characteristics, such as height, weight, gender, hair color, and calculated Body Mass Index (BMI) with its classification. Each variable is accompanied by a definition and a range of allowed values as per the codebook."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#questionshypotheses-to-be-addressed",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#questionshypotheses-to-be-addressed",
    "title": "Starter Analysis Exercise",
    "section": "2.3 Questions/Hypotheses to be addressed",
    "text": "2.3 Questions/Hypotheses to be addressed\nState the research questions you plan to answer with this analysis.\nTo cite other work (important everywhere, but likely happens first in introduction), make sure your references are in the bibtex file specified in the YAML header above (here dataanalysis_template_references.bib) and have the right bibtex key. Then you can include like this:\nExamples of reproducible research projects can for instance be found in (McKay, Ebell, Billings, et al., 2020; McKay, Ebell, Dale, Shen, & Handel, 2020)"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-aquisition",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-aquisition",
    "title": "Starter Analysis Exercise",
    "section": "3.1 Data aquisition",
    "text": "3.1 Data aquisition\nAs applicable, explain where and how you got the data. If you directly import the data from an online source, you can combine this section with the next."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-import-and-cleaning",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-import-and-cleaning",
    "title": "Starter Analysis Exercise",
    "section": "3.2 Data import and cleaning",
    "text": "3.2 Data import and cleaning\nWrite code that reads in the file and cleans it so it’s ready for analysis. Since this will be fairly long code for most datasets, it might be a good idea to have it in one or several R scripts. If that is the case, explain here briefly what kind of cleaning/processing you do, and provide more details and well documented code somewhere (e.g. as supplement in a paper). All materials, including files that contain code, should be commented well so everyone can follow along."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#statistical-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#statistical-analysis",
    "title": "Starter Analysis Exercise",
    "section": "3.3 Statistical analysis",
    "text": "3.3 Statistical analysis\nExplain anything related to your statistical analyses."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#exploratorydescriptive-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#exploratorydescriptive-analysis",
    "title": "Starter Analysis Exercise",
    "section": "4.1 Exploratory/Descriptive analysis",
    "text": "4.1 Exploratory/Descriptive analysis\nUse a combination of text/tables/figures to explore and describe your data. Show the most important descriptive results here. Additional ones should go in the supplement. Even more can be in the R and Quarto files that are part of your project.\nTable 1 shows a summary of the data.\nNote the loading of the data providing a relative path using the ../../ notation. (Two dots means a folder up). You never want to specify an absolute path like C:\\ahandel\\myproject\\results\\ because if you share this with someone, it won’t work for them since they don’t have that path. You can also use the here R package to create paths. See examples of that below. I recommend the here package, but I’m showing the other approach here just in case you encounter it.\n\n\n\n\nTable 1: Data summary table.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_type\nskim_variable\nn_missing\ncomplete_rate\nfactor.ordered\nfactor.n_unique\nfactor.top_counts\nnumeric.mean\nnumeric.sd\nnumeric.p0\nnumeric.p25\nnumeric.p50\nnumeric.p75\nnumeric.p100\nnumeric.hist\n\n\n\n\nfactor\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nnumeric\nHeight\n0\n1\nNA\nNA\nNA\n165.66667\n15.97655\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nnumeric\nWeight\n0\n1\nNA\nNA\nNA\n70.11111\n21.24526\n45\n55\n70\n80\n110\n▇▂▃▂▂"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#basic-statistical-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#basic-statistical-analysis",
    "title": "Starter Analysis Exercise",
    "section": "4.2 Basic statistical analysis",
    "text": "4.2 Basic statistical analysis\nTo get some further insight into your data, if reasonable you could compute simple statistics (e.g. simple models with 1 predictor) to look for associations between your outcome(s) and each individual predictor variable. Though note that unless you pre-specified the outcome and main exposure, any “p&lt;0.05 means statistical significance” interpretation is not valid.\nFigure 1 shows a scatterplot figure produced by one of the R scripts.\n\n\n\n\n\n\n\n\nFigure 1: Height and weight stratified by gender."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis",
    "title": "Starter Analysis Exercise",
    "section": "4.3 Full analysis",
    "text": "4.3 Full analysis\nUse one or several suitable statistical/machine learning methods to analyze your data and to produce meaningful figures, tables, etc. This might again be code that is best placed in one or several separate R scripts that need to be well documented. You want the code to produce figures and data ready for display as tables, and save those. Then you load them here.\nExample Table 2 shows a summary of a linear model fit.\n\n\n\n\nTable 2: Linear model fit table.\n\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n149.2726967\n23.3823360\n6.3839942\n0.0013962\n\n\nWeight\n0.2623972\n0.3512436\n0.7470519\n0.4886517\n\n\nGenderM\n-2.1244913\n15.5488953\n-0.1366329\n0.8966520\n\n\nGenderO\n-4.7644739\n19.0114155\n-0.2506112\n0.8120871"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#summary-and-interpretation",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#summary-and-interpretation",
    "title": "Starter Analysis Exercise",
    "section": "5.1 Summary and Interpretation",
    "text": "5.1 Summary and Interpretation\nSummarize what you did, what you found and what it means."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#strengths-and-limitations",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#strengths-and-limitations",
    "title": "Starter Analysis Exercise",
    "section": "5.2 Strengths and Limitations",
    "text": "5.2 Strengths and Limitations\nDiscuss what you perceive as strengths and limitations of your analysis."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#conclusions",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#conclusions",
    "title": "Starter Analysis Exercise",
    "section": "5.3 Conclusions",
    "text": "5.3 Conclusions\nWhat are the main take-home messages?\nInclude citations in your Rmd file using bibtex, the list of references will automatically be placed at the end\nThis paper (Leek & Peng, 2015) discusses types of analyses.\nThese papers (McKay, Ebell, Billings, et al., 2020; McKay, Ebell, Dale, et al., 2020) are good examples of papers published using a fully reproducible setup similar to the one shown in this template.\nNote that this cited reference will show up at the end of the document, the reference formatting is determined by the CSL file specified in the YAML header. Many more style files for almost any journal are available. You also specify the location of your bibtex reference file in the YAML. You can call your reference file anything you like, I just used the generic word references.bib but giving it a more descriptive name is probably better."
  },
  {
    "objectID": "starter-analysis-exercise/data/readme.html",
    "href": "starter-analysis-exercise/data/readme.html",
    "title": "Asmith Joseph Data Analysis Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all data at various stages.\nThis data is being loaded/manipulated/changed/saved with code from the code folders.\nYou should place the raw data in the raw_data folder and not edit it. Ever!\nIdeally, load the raw data into R and do all changes there with code, so everything is automatically reproducible and documented.\nSometimes, you need to edit the files in the format you got. For instance, Excel files are sometimes so poorly formatted that it’s close to impossible to read them into R, or the persons you got the data from used color to code some information, which of course won’t import into R. In those cases, you might have to make modifications in a software other than R. If you need to make edits in whatever format you got the data (e.g. Excel), make a copy and place those copies in a separate folder, AND ONLY EDIT THOSE COPIES. Also, write down somewhere the edits you made.\nAdd as many sub-folders as suitable. If you only have a single processing step, one sub-folder for processed data is enough. If you have multiple stages of cleaning and processing, additional sub-folders might be useful. Adjust based on the complexity of your project.\nI suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data:\nhttp://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata"
  },
  {
    "objectID": "starter-analysis-exercise/code/readme.html",
    "href": "starter-analysis-exercise/code/readme.html",
    "title": "Asmith Joseph Data Analysis Portfolio",
    "section": "",
    "text": "Place your various R or Quarto files in the appropriate folders.\nYou can either have fewer large scripts, or multiple scripts that do only specific actions. Those can be R or Quarto files. In either case, document the scripts and what goes on in them so well that someone else (including future you) can easily figure out what is happening.\nThe scripts should load the appropriate data (e.g. raw or processed), perform actions, and save results (e.g. processed data, figures, computed values) in the appropriate folders. Document somewhere what inputs each script takes and where output is placed.\nIf scripts need to be run in a specific order, document this. Either as comments in the script, or in a separate text file such as this readme file. Ideally of course in both locations.\nDepending on your specific project, you might want to have further folders/sub-folders."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl) #for loading Excel files\n\nWarning: package 'readxl' was built under R version 4.4.3\n\nlibrary(dplyr) #for data processing/cleaning\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\nlibrary(skimr) #for nice visualization of data \n\nWarning: package 'skimr' was built under R version 4.4.2\n\nlibrary(here) #to set paths\n\nWarning: package 'here' was built under R version 4.4.2\n\n\nhere() starts at C:/Users/ajose35/Desktop/MADA-course/AsmithJoseph-MADA-portfolio\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"raw-data\",\"exampledata.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\n\n\n\nCheck data\nFirst we can look at the codebook\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 3 × 3\n  `Variable Name` `Variable Definition`                 `Allowed Values`      \n  &lt;chr&gt;           &lt;chr&gt;                                 &lt;chr&gt;                 \n1 Height          height in centimeters                 numeric value &gt;0 or NA\n2 Weight          weight in kilograms                   numeric value &gt;0 or NA\n3 Gender          identified gender (male/female/other) M/F/O/NA              \n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 3\n$ Height &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\", \"156\", \"166\", \"155\", …\n$ Weight &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7000, NA, 45, 55, 50\n$ Gender &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"M\", \"F\", \"F\", \"M…\n\nsummary(rawdata)\n\n    Height              Weight          Gender         \n Length:14          Min.   :  45.0   Length:14         \n Class :character   1st Qu.:  55.0   Class :character  \n Mode  :character   Median :  70.0   Mode  :character  \n                    Mean   : 602.7                     \n                    3rd Qu.:  90.0                     \n                    Max.   :7000.0                     \n                    NA's   :1                          \n\nhead(rawdata)\n\n# A tibble: 6 × 3\n  Height Weight Gender\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; \n1 180        80 M     \n2 175        70 O     \n3 sixty      60 F     \n4 178        76 F     \n5 192        90 NA    \n6 6          55 F     \n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45\n55\n70\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n151.62\n46.46\n6\n154.00\n165\n175\n192\n▁▁▁▂▇\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\nhist(d1$Height)\n\n\n\n\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n165.23\n16.52\n133\n155.00\n166\n178\n192\n▂▇▆▆▃\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) %&gt;% tidyr::drop_na()\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\n\n\n\nAll done, data is clean now.\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above.\n\nprocesseddata &lt;- d4\n\n\n\nSave data\nFinally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\nsaveRDS(processeddata, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda.html",
    "href": "starter-analysis-exercise/code/eda-code/eda.html",
    "title": "An example exploratory analysis script",
    "section": "",
    "text": "This Quarto file loads the cleaned data and does some exploring.\nI’m only showing it the way where the code is included in the file. As described in the processing_code materials, I currently prefer the approach of having R code in a separate file and pulling it in.\nBut I already had this written and haven’t yet re-done it that way. Feel free to redo and send a pull request on GitHub :)\nAgain, it is largely a matter of preference and what makes the most sense to decide if one wants to have code inside Quarto files, or as separate R files. And sometimes, an R script with enough comments is good enough and one doesn’t need a Quarto file.\nAlso note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you’ll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.\nAs part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.\nStart by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables.\nPlots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones.\n\nSetup\n\n#load needed packages. make sure they are installed.\nlibrary(here) #for data loading/saving\n\nWarning: package 'here' was built under R version 4.4.2\n\n\nhere() starts at C:/Users/ajose35/Desktop/MADA-course/AsmithJoseph-MADA-portfolio\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(skimr)\n\nWarning: package 'skimr' was built under R version 4.4.2\n\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.4.3\n\n\nLoad the data.\n\n#Path to data. Note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\n#load data\nmydata &lt;- readRDS(data_location)\n\n\n\nData exploration through tables\nShowing a bit of code to produce and save a summary table.\n\nsummary_df = skimr::skim(mydata)\nprint(summary_df)\n\n── Data Summary ────────────────────────\n                           Values\nName                       mydata\nNumber of rows             9     \nNumber of columns          3     \n_______________________          \nColumn type frequency:           \n  factor                   1     \n  numeric                  2     \n________________________         \nGroup variables            None  \n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique top_counts      \n1 Gender                0             1 FALSE          3 M: 4, F: 3, O: 2\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate  mean   sd  p0 p25 p50 p75 p100 hist \n1 Height                0             1 166.  16.0 133 156 166 178  183 ▂▁▃▃▇\n2 Weight                0             1  70.1 21.2  45  55  70  80  110 ▇▂▃▂▂\n\n# save to file\nsummarytable_file = here(\"starter-analysis-exercise\",\"results\", \"tables-files\", \"summarytable.rds\")\nsaveRDS(summary_df, file = summarytable_file)\n\nWe are saving the results to the results/tables folder. Structure the folders inside results such that they make sense for your specific analysis. Provide enough documentation that someone can understand what you are doing and what goes where. readme.md files inside each folder are a good idea.\n\n\nData exploration through figures\nHistogram plots for the continuous outcomes.\nHeight first.\n\np1 &lt;- mydata %&gt;% ggplot(aes(x=Height)) + geom_histogram() \nplot(p1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-distribution.png\")\nggsave(filename = figure_file, plot=p1) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow weights.\n\np2 &lt;- mydata %&gt;% ggplot(aes(x=Weight)) + geom_histogram() \nplot(p2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"weight-distribution.png\")\nggsave(filename = figure_file, plot=p2) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow height as function of weight.\n\np3 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_point() + geom_smooth(method='lm')\nplot(p3)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight.png\")\nggsave(filename = figure_file, plot=p3) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nOnce more height as function of weight, stratified by gender. Note that there is so little data, it’s a bit silly. But we’ll plot it anyway.\n\np4 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight, color = Gender)) + geom_point() + geom_smooth(method='lm')\nplot(p4)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight-stratified.png\")\nggsave(filename = figure_file, plot=p4) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\nWarning in qt((1 - level)/2, df): no non-missing arguments to max; returning\n-Inf\n\n\n\n\nNotes\nFor your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible."
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html",
    "href": "presentation-exercise/presentation-exercise.html",
    "title": "Presentation Exercise",
    "section": "",
    "text": "Introduction\nVisualization Exercise : Replicating the FiveThirtyEight Fatalities Graph using AI Assistance\nThe objective of this exercise is to replicate a FiveThirtyEight graph that visualizes airline fatalities adjusted for seat availability and distance traveled between 1985-99 and 2000-14. I obtained the article from FiveThirtyEight.\nThe FiveThirtyEight article suggests that past crashes are not the best indicator of an airline’s current safety. Instead, it recommends evaluating airlines based on their overall incident rates, including non-fatal ones, which provide a more consistent safety measure. The analysis also notes that airlines from wealthier countries typically have better safety records due to stricter standards and regulations. A composite “safety score” calculated using data on incidents and fatalities helps rank airlines, with significant variations in safety observed across different carriers and time periods.\nFull article for more details here.\nThe data was pulled from FiveThirtyEight Data.\n\n\nWarning: package 'here' was built under R version 4.4.2\n\n\nhere() starts at C:/Users/ajose35/Desktop/MADA-course/AsmithJoseph-MADA-portfolio\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInitial AI Prompt\nMy Prompt:\nI am undertaking a project to replicate a graph from an online article. Here’s how we’ll proceed: 1) I will provide the link to the article, 2) share the dataset, and 3) upload an image of the original graph. Your task is to recreate the graph in RStudio, mirroring the original in terms of variables, colors, and styles. I will be available throughout the process to help with any adjustments you need to make.\nAI Response:\nUnderstood! Please provide the dataset, and I will generate RStudio code to replicate the FiveThirtyEight visualization.\n\n\nData Loading & Initial Visualization\nUser Prompt:\nLoad the dataset using the here package in R. Read and clean the data to extract only relevant columns.\nI Response & Code:\n\n# Load required libraries\nif (!requireNamespace(\"here\", quietly = TRUE)) install.packages(\"here\")\nif (!requireNamespace(\"tidyverse\", quietly = TRUE)) install.packages(\"tidyverse\")\n\nlibrary(here)\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.4.2\n\n\nWarning: package 'ggplot2' was built under R version 4.4.3\n\n\nWarning: package 'readr' was built under R version 4.4.2\n\n\nWarning: package 'purrr' was built under R version 4.4.2\n\n\nWarning: package 'lubridate' was built under R version 4.4.2\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# Define the file path using `here`\ndata_path &lt;- here(\"presentation-exercise\", \"data\", \"airline-safety.csv\")\n\n# Read the CSV file\nairline_data &lt;- read_csv(data_path)\n\nRows: 56 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): airline\ndbl (7): avail_seat_km_per_week, incidents_85_99, fatal_accidents_85_99, fat...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Rename columns for clarity\nairline_data_clean &lt;- airline_data %&gt;%\n  rename(\n    airline = airline,\n    fatal_85_99 = fatalities_85_99,\n    fatal_00_14 = fatalities_00_14\n  )\n\n\n\nFirst Attempt at the Graph\nMy Prompt:\nGenerate a scatter plot where:\nX-axis: Fatalities (1985-99) Y-axis: Fatalities (2000-14) Dots: Represent airlines Trend Line: Add a flat red regression line (like in the original graph) Label specific airlines (Kenya Airways, Malaysia Airlines, China Airlines, Pakistan International, and Avianca)\n\n\nLoad the data.\n\n# Load libraries\nlibrary(here)\nlibrary(tidyverse)\nlibrary(ggrepel)\n\nWarning: package 'ggrepel' was built under R version 4.4.2\n\n# Define file path using `here`\ndata_path &lt;- here(\"presentation-exercise\", \"data\", \"airline-safety.csv\")\n\n# Read the CSV file\nairline_data &lt;- read_csv(data_path)\n\nRows: 56 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): airline\ndbl (7): avail_seat_km_per_week, incidents_85_99, fatal_accidents_85_99, fat...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Check the first few rows of the dataset\nhead(airline_data)\n\n# A tibble: 6 × 8\n  airline           avail_seat_km_per_week incidents_85_99 fatal_accidents_85_99\n  &lt;chr&gt;                              &lt;dbl&gt;           &lt;dbl&gt;                 &lt;dbl&gt;\n1 Aer Lingus                     320906734               2                     0\n2 Aeroflot*                     1197672318              76                    14\n3 Aerolineas Argen…              385803648               6                     0\n4 Aeromexico*                    596871813               3                     1\n5 Air Canada                    1865253802               2                     0\n6 Air France                    3004002661              14                     4\n# ℹ 4 more variables: fatalities_85_99 &lt;dbl&gt;, incidents_00_14 &lt;dbl&gt;,\n#   fatal_accidents_00_14 &lt;dbl&gt;, fatalities_00_14 &lt;dbl&gt;\n\n\n\n\nData Preparation\n\n# Check the structure of the dataset\nglimpse(airline_data)\n\nRows: 56\nColumns: 8\n$ airline                &lt;chr&gt; \"Aer Lingus\", \"Aeroflot*\", \"Aerolineas Argentin…\n$ avail_seat_km_per_week &lt;dbl&gt; 320906734, 1197672318, 385803648, 596871813, 18…\n$ incidents_85_99        &lt;dbl&gt; 2, 76, 6, 3, 2, 14, 2, 3, 5, 7, 3, 21, 1, 5, 4,…\n$ fatal_accidents_85_99  &lt;dbl&gt; 0, 14, 0, 1, 0, 4, 1, 0, 0, 2, 1, 5, 0, 3, 0, 0…\n$ fatalities_85_99       &lt;dbl&gt; 0, 128, 0, 64, 0, 79, 329, 0, 0, 50, 1, 101, 0,…\n$ incidents_00_14        &lt;dbl&gt; 0, 6, 1, 5, 2, 6, 4, 5, 5, 4, 7, 17, 1, 0, 6, 2…\n$ fatal_accidents_00_14  &lt;dbl&gt; 0, 1, 0, 0, 0, 2, 1, 1, 1, 0, 0, 3, 0, 0, 0, 0,…\n$ fatalities_00_14       &lt;dbl&gt; 0, 88, 0, 0, 0, 337, 158, 7, 88, 0, 0, 416, 0, …\n\n# Rename columns for clarity (optional, keeping it consistent with the FiveThirtyEight graphs)\nairline_data_clean &lt;- airline_data %&gt;%\n  rename(\n    airline = airline,\n    fatal_accidents_85_99 = fatal_accidents_85_99,\n    fatal_accidents_00_14 = fatal_accidents_00_14,\n    fatalities_85_99 = fatalities_85_99,\n    fatalities_00_14 = fatalities_00_14,\n    incidents_85_99 = incidents_85_99,\n    incidents_00_14 = incidents_00_14\n  )\n\n# Check for missing values\nsum(is.na(airline_data_clean))\n\n[1] 0\n\n\n\n\nFirst Attempt at the Graph\nMy Prompt:\nGenerate a scatter plot where:\nX-axis: Fatalities (1985-99) Y-axis: Fatalities (2000-14) Dots: Represent airlines Trend Line: Add a flat red regression line (like in the original graph) Label specific airlines (Kenya Airways, Malaysia Airlines, China Airlines, Pakistan International, and Avianca)\n#Correcting Airline Positions My Prompt:\nAdjust airline fatality positions to match the original graph.\nKenya Airways should be at (0, 1375) Malaysia Airlines should have two dots at (0, 750) and (0, 500) China Airlines & Pakistan International should be aligned at the same X-axis value. Avianca should be slightly past 1000.\n\n\nCreate Graph 1 (Fatalities) –&gt; (1st attempt)\n\n# Create the first scatter plot\nfatalities_plot &lt;- ggplot(airline_data_clean, aes(x = fatalities_85_99, y = fatalities_00_14)) +\n  geom_point(color = \"black\", size = 3, alpha = 0.7) +  # Scatter plot points\n  geom_smooth(method = \"lm\", color = \"red\", se = FALSE, size = 1.5) +  # Regression line\n  geom_text_repel(aes(label = ifelse(fatalities_00_14 &gt; 250 | fatalities_85_99 &gt; 750, airline, \"\")),\n                  size = 5, family = \"Atlas Grotesk\", fontface = \"bold\") +  # Automatic labeling for key airlines\n  labs(\n    title = \"Fatalities by Airline Are Highly Unpredictable\",\n    subtitle = \"Fatalities adjusted for seats available and distance traveled\\n(deaths per 1 trillion seat kilometers)\",\n    x = \"1985-99\",\n    y = \"2000-14\",\n    caption = \"Source: Flight Safety Foundation | FIVE THIRTY EIGHT\"\n  ) +\n  theme_minimal() +  # Minimalist theme to match FiveThirtyEight\n  theme(\n    text = element_text(family = \"Atlas Grotesk\"),\n    plot.title = element_text(size = 18, face = \"bold\"),\n    plot.subtitle = element_text(size = 12, color = \"gray30\"),\n    axis.title = element_text(size = 14),\n    axis.text = element_text(size = 12),\n    plot.caption = element_text(size = 10, color = \"gray50\"),\n    panel.grid.major = element_line(color = \"gray85\"),\n    panel.grid.minor = element_blank(),\n    plot.background = element_rect(fill = \"gray95\", color = NA)\n  )\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n# Print the plot\nprint(fatalities_plot)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n\n\nCreate Graph 1 (Fatalities) –&gt; (2nd attempt)\n\n# Load libraries\nlibrary(here)\nlibrary(tidyverse)\nlibrary(ggrepel)\nlibrary(showtext)  # For custom fonts\n\nWarning: package 'showtext' was built under R version 4.4.2\n\n\nLoading required package: sysfonts\n\n\nWarning: package 'sysfonts' was built under R version 4.4.2\n\n\nLoading required package: showtextdb\n\n\nWarning: package 'showtextdb' was built under R version 4.4.2\n\n# Enable the Atlas Grotesk font\nfont_add_google(\"Montserrat\", \"AtlasGrotesk\")  # Alternative if Atlas Grotesk isn't available\nshowtext_auto()\n\n\n# Rename columns for clarity\nairline_data_clean &lt;- airline_data %&gt;%\n  rename(\n    airline = airline,\n    fatal_85_99 = fatalities_85_99,\n    fatal_00_14 = fatalities_00_14\n  )\n\n# Manually correct airline fatality positions to match original graph\nmanual_adjustments &lt;- tibble(\n  airline = c(\"Kenya Airways\", \"Malaysia Airlines\", \"China Airlines\", \"Pakistan International\", \"Avianca\"),\n  fatal_85_99 = c(250, 250, 750, 700, 1050),  # Adjust x-axis positions\n  fatal_00_14 = c(1250, 750, 400, 300, 0)  # Adjust y-axis positions\n)\n\n# Merge adjustments with original dataset\nairline_data_fixed &lt;- airline_data_clean %&gt;%\n  filter(!airline %in% manual_adjustments$airline) %&gt;%\n  bind_rows(manual_adjustments)\n\n# Select only key airlines for labeling\nlabel_airlines &lt;- c(\"Kenya Airways\", \"Malaysia Airlines\", \"China Airlines\", \"Pakistan International\", \"Avianca\")\n\n# Create label column for only the selected airlines\nairline_data_fixed &lt;- airline_data_fixed %&gt;%\n  mutate(label = ifelse(airline %in% label_airlines, airline, NA))\n\n\n# Load required package for margin units\nlibrary(grid)\n\n# Create the scatter plot with corrected airline positions\nfatalities_plot &lt;- ggplot(airline_data_fixed, aes(x = fatal_85_99, y = fatal_00_14)) +\n  \n  # Scatter points (Black dots)\n  geom_point(color = \"black\", size = 3, alpha = 0.8) +\n  \n  # Flat Red regression line (Ensuring a flat trend)\n  geom_smooth(method = \"lm\", formula = y ~ 1, color = \"red\", se = FALSE, size = 1.5, fullrange = TRUE) +\n  \n  # Airline Labels (Fix Overlap Issues)\n  geom_text_repel(aes(label = label),\n                  size = 4.5,  # Adjusted for better readability\n                  family = \"AtlasGrotesk\",\n                  fontface = \"bold\",\n                  nudge_y = 50,  # Move text slightly to reduce overlap\n                  segment.color = \"gray70\", # Light gray connecting lines\n                  segment.size = 0.5,\n                  segment.curvature = -0.2,\n                  box.padding = 0.5) +\n  \n  # Titles and labels\n  labs(\n    title = \"Fatalities by Airline Are Highly Unpredictable\",\n    subtitle = \"Fatalities adjusted for seats available and distance traveled\\n(deaths per 1 trillion seat kilometers)\",\n    x = \"1985-99\",\n    y = \"2000-14\",\n    caption = \"Source: Flight Safety Foundation | FIVE THIRTY EIGHT\"\n  ) +\n  \n  # Match FiveThirtyEight theme\n  theme_minimal() +\n  theme(\n    text = element_text(family = \"AtlasGrotesk\"),\n    plot.title = element_text(size = 18, face = \"bold\"),\n    plot.subtitle = element_text(size = 12, color = \"gray30\"),\n    axis.title = element_text(size = 14),\n    axis.text = element_text(size = 12),\n    plot.caption = element_text(size = 10, color = \"gray50\", hjust = 1), # Align to right\n    \n    # Grid styling to match FiveThirtyEight\n    panel.grid.major = element_line(color = \"gray90\"),  # Lighter grid\n    panel.grid.minor = element_blank(),\n    \n    # Background color\n    plot.background = element_rect(fill = \"gray95\", color = NA),\n    \n    # Adjust margins for axis spacing (Fix: Convert to unit format)\n    plot.margin = unit(c(20, 20, 30, 20), \"pt\")  # Use \"pt\" for points\n  ) +\n  \n  # Set x and y axis limits to match the original graph\n  scale_x_continuous(limits = c(0, 1500), breaks = seq(0, 1500, 250)) +\n  scale_y_continuous(limits = c(0, 1500), breaks = seq(0, 1500, 250))\n\n# Print the corrected plot\nprint(fatalities_plot)\n\nWarning: Removed 51 rows containing missing values or values outside the scale range\n(`geom_text_repel()`).\n\n\n\n\n\n\n\n\n\n\n\n\nMy prompt:\nLet’s proceed with the following revisions and adjustments to your graph:\nAdjust the positions of airline fatalities to match those in the original graph:\nPlace Kenya Airways at coordinates (0, 1375). Position Malaysia Airlines with two dots at coordinates (0, 750) and (0, 500). Align China Airlines and Pakistan International on the same X-axis. Set Avianca slightly past the 1000 mark on the X-axis. Change the font to Atlas Grotesk for all text elements.\nAdjust the label positions to ensure they sit right next to the corresponding dot.\nModify the grid color to light gray, replicating the style of FiveThirtyEight.\nAdd a shaded gray area at the bottom of the graph, incorporating the FiveThirtyEight logo and source text for attribution.\n\n# Load required libraries\nif (!requireNamespace(\"here\", quietly = TRUE)) install.packages(\"here\")\nif (!requireNamespace(\"tidyverse\", quietly = TRUE)) install.packages(\"tidyverse\")\nif (!requireNamespace(\"ggrepel\", quietly = TRUE)) install.packages(\"ggrepel\")\nif (!requireNamespace(\"showtext\", quietly = TRUE)) install.packages(\"showtext\")\n\nlibrary(here)\nlibrary(tidyverse)\nlibrary(ggrepel)\nlibrary(showtext)\nlibrary(grid)  # For margin fixes\n\n# Enable Google Font (Alternative to Atlas Grotesk)\nfont_add_google(\"Montserrat\", \"montserrat\")\nshowtext_auto()\n\n# Define the file path using `here`\ndata_path &lt;- here(\"presentation-exercise\", \"data\", \"airline-safety.csv\")\n\n# Read the CSV file\nairline_data &lt;- read_csv(data_path)\n\nRows: 56 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): airline\ndbl (7): avail_seat_km_per_week, incidents_85_99, fatal_accidents_85_99, fat...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Rename columns for clarity\nairline_data_clean &lt;- airline_data %&gt;%\n  rename(\n    airline = airline,\n    fatal_85_99 = fatalities_85_99,\n    fatal_00_14 = fatalities_00_14\n  )\n\n# Manually correct airline fatality positions to match original graph\nmanual_adjustments &lt;- tibble(\n  airline = c(\"Kenya Airways\", \"Malaysia Airlines\", \"China Airlines\", \"Pakistan International\", \"Avianca\"),\n  fatal_85_99 = c(0, 0, 850, 850, 1025),  # Keep Malaysia & Kenya exactly on the y-axis\n  fatal_00_14 = c(1375, 750, 400, 200, 0)  # One dot at 750, China at 400, Pakistan at 200\n)\n\n# Merge adjustments with original dataset\nairline_data_fixed &lt;- airline_data_clean %&gt;%\n  filter(!airline %in% manual_adjustments$airline) %&gt;%\n  bind_rows(manual_adjustments)\n\n# Select only key airlines for labeling\nlabel_airlines &lt;- c(\"Kenya Airways\", \"Malaysia Airlines\", \"China Airlines\", \"Pakistan International\", \"Avianca\")\n\n# Create label column for only the selected airlines\nairline_data_fixed &lt;- airline_data_fixed %&gt;%\n  mutate(label = ifelse(airline %in% label_airlines, airline, NA)) %&gt;%\n  mutate(label = ifelse(is.na(label), \"\", label))  # Fix missing label issue\n\n# Create the scatter plot with corrected airline positions\nfatalities_plot &lt;- ggplot(airline_data_fixed, aes(x = fatal_85_99, y = fatal_00_14)) +\n  \n  # Scatter points (Black dots)\n  geom_point(color = \"black\", size = 3, alpha = 0.8) +\n  \n  # Flat Red regression line (Ensuring a flat trend)\n  geom_smooth(method = \"lm\", formula = y ~ 1, color = \"red\", se = FALSE, linewidth = 1.5, fullrange = TRUE) +\n  \n  # Airline Labels (Fix Overlap Issues)\n  geom_text_repel(aes(label = label),\n                  size = 4.5,  \n                  family = \"montserrat\",  # Updated font\n                  fontface = \"bold\",\n                  hjust = 0,  # Align text to the right\n                  nudge_x = 15,  # Move labels slightly right of dots for precision\n                  nudge_y = 5,   # Adjust to ensure spacing is exactly like original\n                  segment.color = NA,  # No connecting line\n                  segment.size = 0) +\n  \n  # Titles and labels\n  labs(\n    title = \"Fatalities by Airline Are Highly Unpredictable\",\n    subtitle = \"Fatalities adjusted for seats available and distance traveled\\n(deaths per 1 trillion seat kilometers)\",\n    x = \"1985-99\",\n    y = \"2000-14\",\n    caption = \"Source: Flight Safety Foundation | FIVE THIRTY EIGHT\"\n  ) +\n  \n  # Match FiveThirtyEight theme\n  theme_minimal() +\n  theme(\n    text = element_text(family = \"montserrat\"),  # Use the correct font\n    plot.title = element_text(size = 18, face = \"bold\"),\n    plot.subtitle = element_text(size = 12, color = \"gray30\"),\n    axis.title = element_text(size = 14),\n    axis.text = element_text(size = 12),\n    plot.caption = element_text(size = 10, color = \"gray50\", hjust = 1), \n    \n    # Grid styling to match FiveThirtyEight\n    panel.grid.major = element_line(color = \"gray90\"),  \n    panel.grid.minor = element_blank(),\n    \n    # Background color\n    plot.background = element_rect(fill = \"gray95\", color = NA),\n    \n    # Adjust margins for axis spacing\n    plot.margin = unit(c(20, 20, 30, 20), \"pt\")  # Fix margin issue\n  ) +\n  \n  # Set x and y axis limits to match the original graph\n  scale_x_continuous(limits = c(0, 1500), breaks = seq(0, 1500, 250)) +\n  scale_y_continuous(limits = c(0, 1500), breaks = seq(0, 1500, 250))\n\n# Print the corrected plot\nprint(fatalities_plot)\n\n\n\n\n\n\n\n\n\n\nMy Prompt:\nIdentify the differences between Graph 1 the original and the replicate\nAI Response:\nIn the original graph, the labels for China Airlines and Pakistan International need vertical adjustments for accuracy; they’re positioned too closely in the replicated graph. The red trend line should be flat and end slightly past 1000, not extending too far as in the replication. For Kenya Airways, the dot should align on the first y-grid line with the label rightly spaced to the right—current positioning is off. Malaysia Airlines’ labels need to accurately reflect their placement next to the first major y-grid line. Avianca’s dot, closer to 1000 in the original, is too far right in the replication and needs adjustment. Generally, labels in the replicated graph are too close to the dots compared to the original, where they are more spaced out, requiring overall spacing corrections.\n\n\n\n\n\n(Part 2) Creating the Airline Safety Table\nTo build this table, I selected key variables on incidents, fatal accidents, and fatalities for the periods 1985-1999 and 2000-2014, filtering the data to highlight the 15 airlines with the highest total fatalities.\nUsing gt(), I structured the table by adding a bold title, formatted headers, and spanning columns for the two time periods. Airline names were bolded for emphasis, and numerical values were simplified for better readability. To enhance insights, I applied color-coded conditional formatting, using a gradient scale from green (low incidents) to red (high fatalities). A summary row was also included to provide totals for incidents, fatal accidents, and fatalities, along with a source note for attribution.\n\n\nLoading the data and necessary Libraries\n\n# Load libraries\nlibrary(gt)\n\nWarning: package 'gt' was built under R version 4.4.2\n\nlibrary(tidyverse)\nlibrary(scales)\n\nWarning: package 'scales' was built under R version 4.4.2\n\n\n\nAttaching package: 'scales'\n\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\nlibrary(sparkline)  # For inline visualizations\n\nWarning: package 'sparkline' was built under R version 4.4.2\n\n\n\n# Load airline safety dataset\ndata_path &lt;- here(\"presentation-exercise\", \"data\", \"airline-safety.csv\")\nairline_data &lt;- read_csv(data_path)\n\nRows: 56 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): airline\ndbl (7): avail_seat_km_per_week, incidents_85_99, fatal_accidents_85_99, fat...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Select key columns\nairline_table &lt;- airline_data %&gt;%\n  select(\n    airline, incidents_85_99, fatal_accidents_85_99, fatalities_85_99,\n    incidents_00_14, fatal_accidents_00_14, fatalities_00_14\n  ) %&gt;%\n\n  # Filter for top airlines based on total fatalities\n  arrange(desc(fatalities_85_99 + fatalities_00_14)) %&gt;%\n  slice_head(n = 15)  # Show only the top 15 airlines for readability\n\n\n\nCreating the Airline Safety Incidents (1985-2014) Table with gt\n\n# Define color palette for severity levels\ncolor_palette &lt;- c(\n  \"#4CAF50\",  # Green (Low)\n  \"#FFD700\",  # Yellow (Moderate)\n  \"#FF9800\",  # Orange (High)\n  \"#E53935\",  # Red (Very High)\n  \"#B71C1C\"   # Dark Red (Extreme)\n)\n\n# Define breakpoints for automatic conditional formatting\nbreakpoints &lt;- c(0, 10, 50, 200, 700, Inf) \n\n# Create the gt table\ngt_table &lt;- airline_table %&gt;%\n  gt() %&gt;%\n\n  # Add title & subtitle\n  tab_header(\n    title = md(\"**Airline Safety Incidents (1985-2014)**\"),\n    subtitle = md(\"_A summary of incidents, fatal accidents, and fatalities per trillion seat kilometers._\")\n  ) %&gt;%\n\n  # Format column labels\n  cols_label(\n    airline = \"Airline\",\n    incidents_85_99 = \"Incidents\",\n    fatal_accidents_85_99 = \"Fatal Accidents\",\n    fatalities_85_99 = \"Fatalities\",\n    incidents_00_14 = \"Incidents\",\n    fatal_accidents_00_14 = \"Fatal Accidents\",\n    fatalities_00_14 = \"Fatalities\"\n  ) %&gt;%\n\n  # Apply color formatting\n  data_color(\n    columns = c(incidents_85_99, fatal_accidents_85_99, fatalities_85_99,\n                incidents_00_14, fatal_accidents_00_14, fatalities_00_14),\n    colors = col_bin(\n      palette = color_palette,\n      domain = NULL,\n      bins = breakpoints\n    )\n  ) %&gt;%\n\n  # Format numerical values\n  fmt_number(\n    columns = c(incidents_85_99, fatal_accidents_85_99, fatalities_85_99,\n                incidents_00_14, fatal_accidents_00_14, fatalities_00_14),\n    decimals = 0\n  ) %&gt;%\n\n  # Bold airline names\n  tab_style(\n    style = list(\n      cell_text(weight = \"bold\")\n    ),\n    locations = cells_body(\n      columns = airline\n    )\n  ) %&gt;%\n\n  # Add column span header\n  tab_spanner(\n    label = \"1985-1999\",\n    columns = c(incidents_85_99, fatal_accidents_85_99, fatalities_85_99)\n  ) %&gt;%\n  tab_spanner(\n    label = \"2000-2014\",\n    columns = c(incidents_00_14, fatal_accidents_00_14, fatalities_00_14)\n  ) %&gt;%\n\n  # Add summary row\n  summary_rows(\n    groups = NULL,\n    columns = c(incidents_85_99, fatal_accidents_85_99, fatalities_85_99,\n                incidents_00_14, fatal_accidents_00_14, fatalities_00_14),\n    fns = list(\"Total\" = ~sum(.))\n  ) %&gt;%\n\n  # Add source note\n  tab_source_note(\n    source_note = md(\"Source: Flight Safety Foundation | **FIVETHIRTYEIGHT**\")\n  ) %&gt;%\n\n  # Set table options\n  tab_options(\n    column_labels.font.weight = \"bold\",\n    table.font.size = px(14),\n    table.border.top.width = px(2),\n    table.border.bottom.width = px(2),\n    heading.title.font.weight = \"bold\"\n  )\n\nWarning: Since gt v0.9.0, the `colors` argument has been deprecated.\n• Please use the `fn` argument instead.\nThis warning is displayed once every 8 hours.\n\n\nWarning: Since gt v0.9.0, `groups = NULL` is deprecated.\nℹ If this was intended for generation of grand summary rows, use\n  `grand_summary_rows()` instead.\n\n# Print the table\ngt_table\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAirline Safety Incidents (1985-2014)\n\n\nA summary of incidents, fatal accidents, and fatalities per trillion seat kilometers.\n\n\n\nAirline\n\n1985-1999\n\n\n2000-2014\n\n\n\nIncidents\nFatal Accidents\nFatalities\nIncidents\nFatal Accidents\nFatalities\n\n\n\n\n\nChina Airlines\n12\n6\n535\n2\n1\n225\n\n\n\nMalaysia Airlines\n3\n1\n34\n3\n2\n537\n\n\n\nJapan Airlines\n3\n1\n520\n0\n0\n0\n\n\n\nAmerican*\n21\n5\n101\n17\n3\n416\n\n\n\nAir India*\n2\n1\n329\n4\n1\n158\n\n\n\nDelta / Northwest*\n24\n12\n407\n24\n2\n51\n\n\n\nUnited / Continental*\n19\n8\n319\n14\n2\n109\n\n\n\nKorean Air\n12\n5\n425\n1\n0\n0\n\n\n\nAir France\n14\n4\n79\n6\n2\n337\n\n\n\nAvianca\n5\n3\n323\n0\n0\n0\n\n\n\nSaudi Arabian\n7\n2\n313\n11\n0\n0\n\n\n\nThai Airways\n8\n4\n308\n2\n1\n1\n\n\n\nEgyptair\n8\n3\n282\n4\n1\n14\n\n\n\nTAM\n8\n3\n98\n7\n2\n188\n\n\n\nKenya Airways\n2\n0\n0\n2\n2\n283\n\n\nTotal\n—\n148\n58\n4073\n97\n19\n2319\n\n\n\nSource: Flight Safety Foundation | FIVETHIRTYEIGHT"
  },
  {
    "objectID": "starter-analysis-exercise/code/analysis-code/readme.html",
    "href": "starter-analysis-exercise/code/analysis-code/readme.html",
    "title": "Asmith Joseph Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory analysis and statistical analysis on the processed/cleaned data. The code produces a few tables and figures, which are saved in the results folder.\nIt’s the same code done 3 times:\n\nFirst, there is an R script that you can run which does all the computations.\nSecond, there is a Quarto file which contains exactly the same code as the R script.\nThird, my current favorite, is a Quarto file with an approach where the code is pulled in from the R script and run.\n\nThe last version has the advantage of having code in one place for easy writing/debugging, and then being able to pull the code into the Quarto file for a nice combination of text/commentary and code.\nEach way of doing this is a reasonable approach, pick whichever one you prefer or makes the most sense for your setup. Whichever approach you choose, add ample documentation/commentary so you and others can easily understand what’s going on and what is done."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/readme.html",
    "href": "starter-analysis-exercise/code/eda-code/readme.html",
    "title": "Asmith Joseph Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory data analysis (EDA) on the processed/cleaned data. The code produces a few tables and figures, which are saved in the appropriate results sub-folder."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/readme.html",
    "href": "starter-analysis-exercise/code/processing-code/readme.html",
    "title": "Asmith Joseph Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code for processing data.\nCurrently, there is just a single Quarto file to illustrate how the processing can look like.\nInstead of a Quarto file that contains code, it is also possible to use R scripts or a combination of R scripts and Quarto code. Those approaches are illustrated in the full dataanalysis-template repository."
  },
  {
    "objectID": "starter-analysis-exercise/data/raw-data/readme.html",
    "href": "starter-analysis-exercise/data/raw-data/readme.html",
    "title": "Asmith Joseph Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains a simple made-up data-set in an Excel file.\nIt contains the variables Height, Weight and Gender of a few imaginary individuals.\nThe dataset purposefully contains some faulty entries that need to be cleaned.\nGenerally, any dataset should contain some meta-data explaining what each variable in the dataset is. (This is often called a Codebook.) For this simple example, the codebook is given as a second sheet in the Excel file.\nThis raw data-set should generally not be edited by hand. It should instead be loaded and processed/cleaned using code."
  },
  {
    "objectID": "starter-analysis-exercise/products/readme.html",
    "href": "starter-analysis-exercise/products/readme.html",
    "title": "Asmith Joseph Data Analysis Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all the products of your project.\nFor a classical academic project, this will be a peer-reviewed manuscript, and should be placed into a manuscript folder.\nFor our case, since we’ll want to put it on the website, we call it a report.\nOften you need a library of references in bibtex format, as well as a CSL style file that determines reference formatting. Since those files might be used by several of the products, I’m placing them in the main products folder. Feel free to re-organize."
  },
  {
    "objectID": "starter-analysis-exercise/results/figures/readme.html",
    "href": "starter-analysis-exercise/results/figures/readme.html",
    "title": "Asmith Joseph Data Analysis Portfolio",
    "section": "",
    "text": "Folder for all figures.\nYou can create further sub-folders if that makes sense."
  },
  {
    "objectID": "starter-analysis-exercise/results/tables-files/readme.html",
    "href": "starter-analysis-exercise/results/tables-files/readme.html",
    "title": "Asmith Joseph Data Analysis Portfolio",
    "section": "",
    "text": "Folder for all tables (generally stored as Rds files) and other files.\nYou can create further sub-folders if that makes sense."
  }
]